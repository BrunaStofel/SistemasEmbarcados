

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 16 15:12:08 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100                           
   101                           	psect	stringtext
   102  0400                     __pstringtext:	
   103  0400                     stringtab:	
   104  0400                     __stringtab:	
   105                           
   106                           ;	String table - string pointers are 2 bytes each
   107  0400  1BFF               	btfsc	btemp+1,7
   108  0401  2C0A               	ljmp	stringcode
   109  0402  1383               	bcf	3,7
   110  0403  187F               	btfsc	btemp+1,0
   111  0404  1783               	bsf	3,7
   112  0405  0800               	movf	0,w
   113  0406  0A84               	incf	4,f
   114  0407  1903               	skipnz
   115  0408  0AFF               	incf	btemp+1,f
   116  0409  0008               	return
   117  040A                     stringcode:	
   118  040A  087F               	movf	btemp+1,w
   119  040B  397F               	andlw	127
   120  040C  008A               	movwf	10
   121  040D  0804               	movf	4,w
   122  040E  0A84               	incf	4,f
   123  040F  1903               	skipnz
   124  0410  0AFF               	incf	btemp+1,f
   125  0411  0082               	movwf	2
   126  0412                     __stringbase:	
   127  0412                     __end_of__stringtab:	
   128  0412                     _dpowers:	
   129  0412  3401               	retlw	1
   130  0413  3400               	retlw	0
   131  0414  3400               	retlw	0
   132  0415  3400               	retlw	0
   133  0416  340A               	retlw	10
   134  0417  3400               	retlw	0
   135  0418  3400               	retlw	0
   136  0419  3400               	retlw	0
   137  041A  3464               	retlw	100
   138  041B  3400               	retlw	0
   139  041C  3400               	retlw	0
   140  041D  3400               	retlw	0
   141  041E  34E8               	retlw	232
   142  041F  3403               	retlw	3
   143  0420  3400               	retlw	0
   144  0421  3400               	retlw	0
   145  0422  3410               	retlw	16
   146  0423  3427               	retlw	39
   147  0424  3400               	retlw	0
   148  0425  3400               	retlw	0
   149  0426  34A0               	retlw	160
   150  0427  3486               	retlw	134
   151  0428  3401               	retlw	1
   152  0429  3400               	retlw	0
   153  042A  3440               	retlw	64
   154  042B  3442               	retlw	66
   155  042C  340F               	retlw	15
   156  042D  3400               	retlw	0
   157  042E  3480               	retlw	128
   158  042F  3496               	retlw	150
   159  0430  3498               	retlw	152
   160  0431  3400               	retlw	0
   161  0432  3400               	retlw	0
   162  0433  34E1               	retlw	225
   163  0434  34F5               	retlw	245
   164  0435  3405               	retlw	5
   165  0436  3400               	retlw	0
   166  0437  34CA               	retlw	202
   167  0438  349A               	retlw	154
   168  0439  343B               	retlw	59
   169  043A                     __end_of_dpowers:	
   170  001F                     _ADCON0bits	set	31
   171  001E                     _ADRESH	set	30
   172  000B                     _INTCONbits	set	11
   173  000C                     _PIR1bits	set	12
   174  0005                     _PORTA	set	5
   175  0006                     _PORTB	set	6
   176  0007                     _PORTC	set	7
   177  0008                     _PORTD	set	8
   178  0009                     _PORTE	set	9
   179  001A                     _RCREG	set	26
   180  0018                     _RCSTAbits	set	24
   181  0019                     _TXREG	set	25
   182  00C1                     _OERR	set	193
   183  0034                     _RB4	set	52
   184  0035                     _RB5	set	53
   185  009F                     _ADCON1bits	set	159
   186  009E                     _ADRESL	set	158
   187  008C                     _PIE1bits	set	140
   188  0099                     _SPBRG	set	153
   189  0085                     _TRISA	set	133
   190  0086                     _TRISB	set	134
   191  0087                     _TRISC	set	135
   192  0088                     _TRISD	set	136
   193  0089                     _TRISE	set	137
   194  0098                     _TXSTAbits	set	152
   195  043A                     __stringdata:	
   196  043A                     STR_1:	
   197  043A  340A               	retlw	10
   198  043B  340D               	retlw	13
   199  043C  3420               	retlw	32	;' '
   200  043D  342D               	retlw	45	;'-'
   201  043E  342D               	retlw	45	;'-'
   202  043F  342D               	retlw	45	;'-'
   203  0440  342D               	retlw	45	;'-'
   204  0441  342D               	retlw	45	;'-'
   205  0442  342D               	retlw	45	;'-'
   206  0443  342D               	retlw	45	;'-'
   207  0444  3420               	retlw	32	;' '
   208  0445  3445               	retlw	69	;'E'
   209  0446  3453               	retlw	83	;'S'
   210  0447  3454               	retlw	84	;'T'
   211  0448  344F               	retlw	79	;'O'
   212  0449  3455               	retlw	85	;'U'
   213  044A  3452               	retlw	82	;'R'
   214  044B  344F               	retlw	79	;'O'
   215  044C  3420               	retlw	32	;' '
   216  044D  3444               	retlw	68	;'D'
   217  044E  3445               	retlw	69	;'E'
   218  044F  3420               	retlw	32	;' '
   219  0450  3450               	retlw	80	;'P'
   220  0451  3449               	retlw	73	;'I'
   221  0452  344C               	retlw	76	;'L'
   222  0453  3448               	retlw	72	;'H'
   223  0454  3441               	retlw	65	;'A'
   224  0455  3420               	retlw	32	;' '
   225  0456  342D               	retlw	45	;'-'
   226  0457  342D               	retlw	45	;'-'
   227  0458  342D               	retlw	45	;'-'
   228  0459  342D               	retlw	45	;'-'
   229  045A  342D               	retlw	45	;'-'
   230  045B  342D               	retlw	45	;'-'
   231  045C  342D               	retlw	45	;'-'
   232  045D  3420               	retlw	32	;' '
   233  045E  340A               	retlw	10
   234  045F  340D               	retlw	13
   235  0460  3420               	retlw	32	;' '
   236  0461  3400               	retlw	0
   237  0462                     STR_3:	
   238  0462  342D               	retlw	45	;'-'
   239  0463  342D               	retlw	45	;'-'
   240  0464  342D               	retlw	45	;'-'
   241  0465  342D               	retlw	45	;'-'
   242  0466  342D               	retlw	45	;'-'
   243  0467  342D               	retlw	45	;'-'
   244  0468  342D               	retlw	45	;'-'
   245  0469  342D               	retlw	45	;'-'
   246  046A  342D               	retlw	45	;'-'
   247  046B  342D               	retlw	45	;'-'
   248  046C  342D               	retlw	45	;'-'
   249  046D  342D               	retlw	45	;'-'
   250  046E  343E               	retlw	62	;'>'
   251  046F  3420               	retlw	32	;' '
   252  0470  3476               	retlw	118	;'v'
   253  0471  3461               	retlw	97	;'a'
   254  0472  346C               	retlw	108	;'l'
   255  0473  3476               	retlw	118	;'v'
   256  0474  3475               	retlw	117	;'u'
   257  0475  346C               	retlw	108	;'l'
   258  0476  3461               	retlw	97	;'a'
   259  0477  3420               	retlw	32	;' '
   260  0478  3431               	retlw	49	;'1'
   261  0479  3420               	retlw	32	;' '
   262  047A  3464               	retlw	100	;'d'
   263  047B  3465               	retlw	101	;'e'
   264  047C  3473               	retlw	115	;'s'
   265  047D  3461               	retlw	97	;'a'
   266  047E  3474               	retlw	116	;'t'
   267  047F  3469               	retlw	105	;'i'
   268  0480  3476               	retlw	118	;'v'
   269  0481  3461               	retlw	97	;'a'
   270  0482  3464               	retlw	100	;'d'
   271  0483  3461               	retlw	97	;'a'
   272  0484  3400               	retlw	0
   273  0485                     STR_5:	
   274  0485  342D               	retlw	45	;'-'
   275  0486  342D               	retlw	45	;'-'
   276  0487  342D               	retlw	45	;'-'
   277  0488  342D               	retlw	45	;'-'
   278  0489  342D               	retlw	45	;'-'
   279  048A  342D               	retlw	45	;'-'
   280  048B  342D               	retlw	45	;'-'
   281  048C  342D               	retlw	45	;'-'
   282  048D  342D               	retlw	45	;'-'
   283  048E  342D               	retlw	45	;'-'
   284  048F  342D               	retlw	45	;'-'
   285  0490  342D               	retlw	45	;'-'
   286  0491  343E               	retlw	62	;'>'
   287  0492  3420               	retlw	32	;' '
   288  0493  3476               	retlw	118	;'v'
   289  0494  3461               	retlw	97	;'a'
   290  0495  346C               	retlw	108	;'l'
   291  0496  3476               	retlw	118	;'v'
   292  0497  3475               	retlw	117	;'u'
   293  0498  346C               	retlw	108	;'l'
   294  0499  3461               	retlw	97	;'a'
   295  049A  3420               	retlw	32	;' '
   296  049B  3432               	retlw	50	;'2'
   297  049C  3420               	retlw	32	;' '
   298  049D  3464               	retlw	100	;'d'
   299  049E  3465               	retlw	101	;'e'
   300  049F  3473               	retlw	115	;'s'
   301  04A0  3461               	retlw	97	;'a'
   302  04A1  3474               	retlw	116	;'t'
   303  04A2  3469               	retlw	105	;'i'
   304  04A3  3476               	retlw	118	;'v'
   305  04A4  3461               	retlw	97	;'a'
   306  04A5  3464               	retlw	100	;'d'
   307  04A6  3461               	retlw	97	;'a'
   308  04A7  3400               	retlw	0
   309  04A8                     STR_2:	
   310  04A8  342D               	retlw	45	;'-'
   311  04A9  342D               	retlw	45	;'-'
   312  04AA  342D               	retlw	45	;'-'
   313  04AB  342D               	retlw	45	;'-'
   314  04AC  342D               	retlw	45	;'-'
   315  04AD  342D               	retlw	45	;'-'
   316  04AE  342D               	retlw	45	;'-'
   317  04AF  342D               	retlw	45	;'-'
   318  04B0  342D               	retlw	45	;'-'
   319  04B1  342D               	retlw	45	;'-'
   320  04B2  342D               	retlw	45	;'-'
   321  04B3  342D               	retlw	45	;'-'
   322  04B4  343E               	retlw	62	;'>'
   323  04B5  3420               	retlw	32	;' '
   324  04B6  3476               	retlw	118	;'v'
   325  04B7  3461               	retlw	97	;'a'
   326  04B8  346C               	retlw	108	;'l'
   327  04B9  3476               	retlw	118	;'v'
   328  04BA  3475               	retlw	117	;'u'
   329  04BB  346C               	retlw	108	;'l'
   330  04BC  3461               	retlw	97	;'a'
   331  04BD  3420               	retlw	32	;' '
   332  04BE  3431               	retlw	49	;'1'
   333  04BF  3420               	retlw	32	;' '
   334  04C0  3461               	retlw	97	;'a'
   335  04C1  3474               	retlw	116	;'t'
   336  04C2  3469               	retlw	105	;'i'
   337  04C3  3476               	retlw	118	;'v'
   338  04C4  3461               	retlw	97	;'a'
   339  04C5  3464               	retlw	100	;'d'
   340  04C6  3461               	retlw	97	;'a'
   341  04C7  3400               	retlw	0
   342  04C8                     STR_4:	
   343  04C8  342D               	retlw	45	;'-'
   344  04C9  342D               	retlw	45	;'-'
   345  04CA  342D               	retlw	45	;'-'
   346  04CB  342D               	retlw	45	;'-'
   347  04CC  342D               	retlw	45	;'-'
   348  04CD  342D               	retlw	45	;'-'
   349  04CE  342D               	retlw	45	;'-'
   350  04CF  342D               	retlw	45	;'-'
   351  04D0  342D               	retlw	45	;'-'
   352  04D1  342D               	retlw	45	;'-'
   353  04D2  342D               	retlw	45	;'-'
   354  04D3  342D               	retlw	45	;'-'
   355  04D4  343E               	retlw	62	;'>'
   356  04D5  3420               	retlw	32	;' '
   357  04D6  3476               	retlw	118	;'v'
   358  04D7  3461               	retlw	97	;'a'
   359  04D8  346C               	retlw	108	;'l'
   360  04D9  3476               	retlw	118	;'v'
   361  04DA  3475               	retlw	117	;'u'
   362  04DB  346C               	retlw	108	;'l'
   363  04DC  3461               	retlw	97	;'a'
   364  04DD  3420               	retlw	32	;' '
   365  04DE  3432               	retlw	50	;'2'
   366  04DF  3420               	retlw	32	;' '
   367  04E0  3461               	retlw	97	;'a'
   368  04E1  3474               	retlw	116	;'t'
   369  04E2  3469               	retlw	105	;'i'
   370  04E3  3476               	retlw	118	;'v'
   371  04E4  3461               	retlw	97	;'a'
   372  04E5  3464               	retlw	100	;'d'
   373  04E6  3461               	retlw	97	;'a'
   374  04E7  3400               	retlw	0
   375  04E8                     STR_6:	
   376  04E8  3449               	retlw	73	;'I'
   377  04E9  346E               	retlw	110	;'n'
   378  04EA  3469               	retlw	105	;'i'
   379  04EB  3463               	retlw	99	;'c'
   380  04EC  3469               	retlw	105	;'i'
   381  04ED  3461               	retlw	97	;'a'
   382  04EE  346C               	retlw	108	;'l'
   383  04EF  3469               	retlw	105	;'i'
   384  04F0  347A               	retlw	122	;'z'
   385  04F1  3461               	retlw	97	;'a'
   386  04F2  346E               	retlw	110	;'n'
   387  04F3  3464               	retlw	100	;'d'
   388  04F4  346F               	retlw	111	;'o'
   389  04F5  342E               	retlw	46	;'.'
   390  04F6  342E               	retlw	46	;'.'
   391  04F7  342E               	retlw	46	;'.'
   392  04F8  3400               	retlw	0
   393  04F9                     STR_7:	
   394  04F9  3425               	retlw	37	;'%'
   395  04FA  346C               	retlw	108	;'l'
   396  04FB  3475               	retlw	117	;'u'
   397  04FC  342E               	retlw	46	;'.'
   398  04FD  3425               	retlw	37	;'%'
   399  04FE  3436               	retlw	54	;'6'
   400  04FF  342E               	retlw	46	;'.'
   401  0500  3436               	retlw	54	;'6'
   402  0501  346C               	retlw	108	;'l'
   403  0502  3475               	retlw	117	;'u'
   404  0503  3400               	retlw	0
   405  0504                     __end_of__stringdata:	
   406                           
   407                           ; #config settings
   408  0000                     
   409                           	psect	cinit
   410  0015                     start_initialization:	
   411  0015                     __initialization:	
   412                           
   413                           ; Clear objects allocated to BANK0
   414  0015  1383               	bcf	3,7	;select IRP bank0
   415  0016  305C               	movlw	low __pbssBANK0
   416  0017  0084               	movwf	4
   417  0018  306D               	movlw	low (__pbssBANK0+17)
   418  0019  120A  158A  2482  120A  118A  	fcall	clear_ram0
   419                           
   420                           ; Clear objects allocated to BANK1
   421  001E  30BC               	movlw	low __pbssBANK1
   422  001F  0084               	movwf	4
   423  0020  30CD               	movlw	low (__pbssBANK1+17)
   424  0021  120A  158A  2482   	fcall	clear_ram0
   425  0024                     end_of_initialization:	
   426                           ;End of C runtime variable initialization code
   427                           
   428  0024                     __end_of__initialization:	
   429  0024  0183               	clrf	3
   430  0025  120A  158A  2E31   	ljmp	_main	;jump to C main() function
   431                           
   432                           	psect	bssBANK0
   433  005C                     __pbssBANK0:	
   434  005C                     _input:	
   435  005C                     	ds	3
   436  005F                     _ADCResult:	
   437  005F                     	ds	2
   438  0061                     _Display:	
   439  0061                     	ds	1
   440  0062                     _buffer:	
   441  0062                     	ds	9
   442  006B                     _status:	
   443  006B                     	ds	2
   444                           
   445                           	psect	bssBANK1
   446  00BC                     __pbssBANK1:	
   447  00BC                     ftoa@buf:	
   448  00BC                     	ds	17
   449                           
   450                           	psect	clrtext
   451  0C82                     clear_ram0:	
   452                           ;	Called with FSR containing the base address, and
   453                           ;	W with the last address+1
   454                           
   455  0C82  0064               	clrwdt	;clear the watchdog before getting into this loop
   456  0C83                     clrloop0:	
   457  0C83  0180               	clrf	0	;clear RAM location pointed to by FSR
   458  0C84  0A84               	incf	4,f	;increment pointer
   459  0C85  0604               	xorwf	4,w	;XOR with final address
   460  0C86  1903               	btfsc	3,2	;have we reached the end yet?
   461  0C87  3400               	retlw	0	;all done for this memory range, return
   462  0C88  0604               	xorwf	4,w	;XOR again to restore value
   463  0C89  2C83               	goto	clrloop0	;do the next byte
   464                           
   465                           	psect	cstackBANK1
   466  00A0                     __pcstackBANK1:	
   467  00A0                     ??_USART_WriteChar:	
   468  00A0                     ??_ADC_Init:	
   469                           ; 0 bytes @ 0x0
   470                           
   471  00A0                     ?___aldiv:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  00A0                     USART_WriteChar@USARTData:	
   475                           ; 4 bytes @ 0x0
   476                           
   477  00A0                     ___aldiv@divisor:	
   478                           ; 1 bytes @ 0x0
   479                           
   480                           
   481                           ; 4 bytes @ 0x0
   482  00A0                     	ds	1
   483  00A1                     ?_USART_WriteString:	
   484  00A1                     USART_WriteString@str:	
   485                           ; 0 bytes @ 0x1
   486                           
   487                           
   488                           ; 2 bytes @ 0x1
   489  00A1                     	ds	2
   490  00A3                     ??_USART_WriteString:	
   491                           
   492                           ; 0 bytes @ 0x3
   493  00A3                     	ds	1
   494  00A4                     ___aldiv@dividend:	
   495                           
   496                           ; 4 bytes @ 0x4
   497  00A4                     	ds	4
   498  00A8                     ??___aldiv:	
   499                           
   500                           ; 0 bytes @ 0x8
   501  00A8                     	ds	1
   502  00A9                     ___aldiv@counter:	
   503                           
   504                           ; 1 bytes @ 0x9
   505  00A9                     	ds	1
   506  00AA                     ___aldiv@sign:	
   507                           
   508                           ; 1 bytes @ 0xA
   509  00AA                     	ds	1
   510  00AB                     ___aldiv@quotient:	
   511                           
   512                           ; 4 bytes @ 0xB
   513  00AB                     	ds	4
   514  00AF                     ?_USART_Init:	
   515  00AF                     USART_Init@BaudRate:	
   516                           ; 0 bytes @ 0xF
   517                           
   518                           
   519                           ; 4 bytes @ 0xF
   520  00AF                     	ds	4
   521  00B3                     ??_USART_Init:	
   522                           
   523                           ; 0 bytes @ 0x13
   524  00B3                     	ds	5
   525  00B8                     USART_Init@BR:	
   526                           
   527                           ; 1 bytes @ 0x18
   528  00B8                     	ds	1
   529  00B9                     ??_main:	
   530                           
   531                           ; 0 bytes @ 0x19
   532  00B9                     	ds	3
   533                           
   534                           	psect	cstackCOMMON
   535  0070                     __pcstackCOMMON:	
   536  0070                     ?_isdigit:	
   537  0070                     ??_isdigit:	
   538                           ; 1 bit 
   539                           
   540  0070                     ?_USART_WriteChar:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  0070                     ?_ADC_Init:	
   544                           ; 0 bytes @ 0x0
   545                           
   546  0070                     ?_ADC_Read:	
   547                           ; 0 bytes @ 0x0
   548                           
   549  0070                     ?_ISR:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0070                     ?_main:	
   553                           ; 0 bytes @ 0x0
   554                           
   555  0070                     ?___ftge:	
   556                           ; 0 bytes @ 0x0
   557                           
   558  0070                     ?i1_USART_WriteChar:	
   559                           ; 1 bit 
   560                           
   561  0070                     ??i1_USART_WriteChar:	
   562                           ; 0 bytes @ 0x0
   563                           
   564  0070                     ?_USART_ReceiveChar:	
   565                           ; 0 bytes @ 0x0
   566                           
   567  0070                     ?___wmul:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?___ftpack:	
   571                           ; 2 bytes @ 0x0
   572                           
   573  0070                     ?___ftneg:	
   574                           ; 3 bytes @ 0x0
   575                           
   576  0070                     ?___lldiv:	
   577                           ; 3 bytes @ 0x0
   578                           
   579  0070                     _isdigit$602:	
   580                           ; 4 bytes @ 0x0
   581                           
   582  0070                     i1USART_WriteChar@USARTData:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ADC_Read@channel:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ___wmul@multiplier:	
   589                           ; 2 bytes @ 0x0
   590                           
   591  0070                     ___ftpack@arg:	
   592                           ; 2 bytes @ 0x0
   593                           
   594  0070                     ___ftge@ff1:	
   595                           ; 3 bytes @ 0x0
   596                           
   597  0070                     ___ftneg@f1:	
   598                           ; 3 bytes @ 0x0
   599                           
   600  0070                     ___lldiv@divisor:	
   601                           ; 3 bytes @ 0x0
   602                           
   603                           
   604                           ; 4 bytes @ 0x0
   605  0070                     	ds	1
   606  0071                     ?i1_USART_WriteString:	
   607  0071                     isdigit@c:	
   608                           ; 0 bytes @ 0x1
   609                           
   610  0071                     i1USART_WriteString@str:	
   611                           ; 1 bytes @ 0x1
   612                           
   613                           
   614                           ; 2 bytes @ 0x1
   615  0071                     	ds	1
   616  0072                     ??_ADC_Read:	
   617  0072                     ___wmul@multiplicand:	
   618                           ; 0 bytes @ 0x2
   619                           
   620                           
   621                           ; 2 bytes @ 0x2
   622  0072                     	ds	1
   623  0073                     ??_USART_ReceiveChar:	
   624  0073                     ??___ftneg:	
   625                           ; 0 bytes @ 0x3
   626                           
   627  0073                     ??i1_USART_WriteString:	
   628                           ; 0 bytes @ 0x3
   629                           
   630  0073                     ___ftpack@exp:	
   631                           ; 0 bytes @ 0x3
   632                           
   633  0073                     ___ftge@ff2:	
   634                           ; 1 bytes @ 0x3
   635                           
   636                           
   637                           ; 3 bytes @ 0x3
   638  0073                     	ds	1
   639  0074                     ??___wmul:	
   640  0074                     USART_ReceiveChar@USART_Data:	
   641                           ; 0 bytes @ 0x4
   642                           
   643  0074                     ___ftpack@sign:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0074                     ___wmul@product:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0074                     ___lldiv@dividend:	
   650                           ; 2 bytes @ 0x4
   651                           
   652                           
   653                           ; 4 bytes @ 0x4
   654  0074                     	ds	1
   655  0075                     ??___ftpack:	
   656                           
   657                           ; 0 bytes @ 0x5
   658  0075                     	ds	1
   659  0076                     ??___ftge:	
   660                           
   661                           ; 0 bytes @ 0x6
   662  0076                     	ds	2
   663  0078                     ??___lldiv:	
   664  0078                     ?___ftadd:	
   665                           ; 0 bytes @ 0x8
   666                           
   667  0078                     ?___lltoft:	
   668                           ; 3 bytes @ 0x8
   669                           
   670  0078                     ?___lwtoft:	
   671                           ; 3 bytes @ 0x8
   672                           
   673  0078                     ___lwtoft@c:	
   674                           ; 3 bytes @ 0x8
   675                           
   676  0078                     ___ftadd@f1:	
   677                           ; 2 bytes @ 0x8
   678                           
   679  0078                     ___lltoft@c:	
   680                           ; 3 bytes @ 0x8
   681                           
   682                           
   683                           ; 4 bytes @ 0x8
   684  0078                     	ds	1
   685  0079                     ___lldiv@quotient:	
   686                           
   687                           ; 4 bytes @ 0x9
   688  0079                     	ds	2
   689  007B                     ??___lwtoft:	
   690  007B                     ___ftadd@f2:	
   691                           ; 0 bytes @ 0xB
   692                           
   693                           
   694                           ; 3 bytes @ 0xB
   695  007B                     	ds	1
   696  007C                     ??___lltoft:	
   697                           
   698                           ; 0 bytes @ 0xC
   699  007C                     	ds	1
   700  007D                     ___lldiv@counter:	
   701  007D                     ___lltoft@exp:	
   702                           ; 1 bytes @ 0xD
   703                           
   704                           
   705                           ; 1 bytes @ 0xD
   706  007D                     	ds	1
   707  007E                     ??___ftsub:	
   708                           
   709                           	psect	cstackBANK0
   710  0020                     __pcstackBANK0:	
   711                           ; 0 bytes @ 0xE
   712                           
   713  0020                     ??___ftadd:	
   714  0020                     ?___ftmul:	
   715                           ; 0 bytes @ 0x0
   716                           
   717  0020                     ?___llmod:	
   718                           ; 3 bytes @ 0x0
   719                           
   720  0020                     ___ftmul@f1:	
   721                           ; 4 bytes @ 0x0
   722                           
   723  0020                     ___llmod@divisor:	
   724                           ; 3 bytes @ 0x0
   725                           
   726                           
   727                           ; 4 bytes @ 0x0
   728  0020                     	ds	3
   729  0023                     ___ftmul@f2:	
   730                           
   731                           ; 3 bytes @ 0x3
   732  0023                     	ds	1
   733  0024                     ___ftadd@sign:	
   734  0024                     ___llmod@dividend:	
   735                           ; 1 bytes @ 0x4
   736                           
   737                           
   738                           ; 4 bytes @ 0x4
   739  0024                     	ds	1
   740  0025                     ___ftadd@exp2:	
   741                           
   742                           ; 1 bytes @ 0x5
   743  0025                     	ds	1
   744  0026                     ??___ftmul:	
   745  0026                     ___ftadd@exp1:	
   746                           ; 0 bytes @ 0x6
   747                           
   748                           
   749                           ; 1 bytes @ 0x6
   750  0026                     	ds	1
   751  0027                     ?___ftsub:	
   752  0027                     ___ftsub@f2:	
   753                           ; 3 bytes @ 0x7
   754                           
   755                           
   756                           ; 3 bytes @ 0x7
   757  0027                     	ds	1
   758  0028                     ??___llmod:	
   759                           
   760                           ; 0 bytes @ 0x8
   761  0028                     	ds	1
   762  0029                     ___llmod@counter:	
   763                           
   764                           ; 1 bytes @ 0x9
   765  0029                     	ds	1
   766  002A                     ?_sprintf:	
   767  002A                     ___ftmul@exp:	
   768                           ; 2 bytes @ 0xA
   769                           
   770  002A                     sprintf@f:	
   771                           ; 1 bytes @ 0xA
   772                           
   773  002A                     ___ftsub@f1:	
   774                           ; 2 bytes @ 0xA
   775                           
   776                           
   777                           ; 3 bytes @ 0xA
   778  002A                     	ds	1
   779  002B                     ___ftmul@f3_as_product:	
   780                           
   781                           ; 3 bytes @ 0xB
   782  002B                     	ds	3
   783  002E                     ___ftmul@cntr:	
   784                           
   785                           ; 1 bytes @ 0xE
   786  002E                     	ds	1
   787  002F                     ___ftmul@sign:	
   788                           
   789                           ; 1 bytes @ 0xF
   790  002F                     	ds	1
   791  0030                     ?___fttol:	
   792  0030                     ___fttol@f1:	
   793                           ; 4 bytes @ 0x10
   794                           
   795                           
   796                           ; 3 bytes @ 0x10
   797  0030                     	ds	4
   798  0034                     ??_sprintf:	
   799  0034                     ??___fttol:	
   800                           ; 0 bytes @ 0x14
   801                           
   802                           
   803                           ; 0 bytes @ 0x14
   804  0034                     	ds	4
   805  0038                     ___fttol@sign1:	
   806                           
   807                           ; 1 bytes @ 0x18
   808  0038                     	ds	1
   809  0039                     sprintf@flag:	
   810  0039                     ___fttol@lval:	
   811                           ; 1 bytes @ 0x19
   812                           
   813                           
   814                           ; 4 bytes @ 0x19
   815  0039                     	ds	1
   816  003A                     sprintf@ap:	
   817                           
   818                           ; 1 bytes @ 0x1A
   819  003A                     	ds	1
   820  003B                     sprintf@_val:	
   821                           
   822                           ; 4 bytes @ 0x1B
   823  003B                     	ds	2
   824  003D                     ___fttol@exp1:	
   825                           
   826                           ; 1 bytes @ 0x1D
   827  003D                     	ds	2
   828  003F                     sprintf@sp:	
   829                           
   830                           ; 1 bytes @ 0x1F
   831  003F                     	ds	1
   832  0040                     sprintf@width:	
   833                           
   834                           ; 2 bytes @ 0x20
   835  0040                     	ds	2
   836  0042                     sprintf@prec:	
   837                           
   838                           ; 2 bytes @ 0x22
   839  0042                     	ds	2
   840  0044                     sprintf@c:	
   841                           
   842                           ; 1 bytes @ 0x24
   843  0044                     	ds	1
   844  0045                     ?_ftoa:	
   845  0045                     ftoa@f:	
   846                           ; 1 bytes @ 0x25
   847                           
   848                           
   849                           ; 3 bytes @ 0x25
   850  0045                     	ds	3
   851  0048                     ftoa@status:	
   852                           
   853                           ; 1 bytes @ 0x28
   854  0048                     	ds	1
   855  0049                     ??_ftoa:	
   856                           
   857                           ; 0 bytes @ 0x29
   858  0049                     	ds	1
   859  004A                     ftoa@rem:	
   860                           
   861                           ; 4 bytes @ 0x2A
   862  004A                     	ds	4
   863  004E                     ftoa@l:	
   864                           
   865                           ; 4 bytes @ 0x2E
   866  004E                     	ds	4
   867  0052                     ftoa@cp:	
   868                           
   869                           ; 1 bytes @ 0x32
   870  0052                     	ds	1
   871  0053                     ??_ISR:	
   872                           
   873                           ; 0 bytes @ 0x33
   874  0053                     	ds	6
   875  0059                     ISR@resp:	
   876                           
   877                           ; 1 bytes @ 0x39
   878  0059                     	ds	1
   879  005A                     ISR@byte2:	
   880                           
   881                           ; 1 bytes @ 0x3A
   882  005A                     	ds	1
   883  005B                     ISR@byte1:	
   884                           
   885                           ; 1 bytes @ 0x3B
   886  005B                     	ds	1
   887                           
   888                           	psect	maintext
   889  0E31                     __pmaintext:	
   890 ;;
   891 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   892 ;;
   893 ;; *************** function _main *****************
   894 ;; Defined at:
   895 ;;		line 218 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_sens
      +or_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;		None
   898 ;; Auto vars:     Size  Location     Type
   899 ;;		None
   900 ;; Return value:  Size  Location     Type
   901 ;;		None               void
   902 ;; Registers used:
   903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 17F/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   909 ;;      Params:         0       0       0       0       0
   910 ;;      Locals:         0       0       0       0       0
   911 ;;      Temps:          0       0       3       0       0
   912 ;;      Totals:         0       0       3       0       0
   913 ;;Total ram usage:        3 bytes
   914 ;; Hardware stack levels required when called:    7
   915 ;; This function calls:
   916 ;;		_ADC_Init
   917 ;;		_USART_Init
   918 ;;		_USART_WriteString
   919 ;; This function is called by:
   920 ;;		Startup code after reset
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _main
   926  0E31                     _main:	
   927                           
   928                           ;Supervisorio.c: 220: TRISA = 0b00011111;
   929                           
   930                           ;incstack = 0
   931                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   932  0E31  301F               	movlw	31
   933  0E32  1683               	bsf	3,5	;RP0=1, select bank1
   934  0E33  1303               	bcf	3,6	;RP1=0, select bank1
   935  0E34  0085               	movwf	5	;volatile
   936                           
   937                           ;Supervisorio.c: 221: PORTA = 0b00011111;
   938  0E35  301F               	movlw	31
   939  0E36  1283               	bcf	3,5	;RP0=0, select bank0
   940  0E37  1303               	bcf	3,6	;RP1=0, select bank0
   941  0E38  0085               	movwf	5	;volatile
   942                           
   943                           ;Supervisorio.c: 222: TRISB = 0b00000000;
   944  0E39  1683               	bsf	3,5	;RP0=1, select bank1
   945  0E3A  1303               	bcf	3,6	;RP1=0, select bank1
   946  0E3B  0186               	clrf	6	;volatile
   947                           
   948                           ;Supervisorio.c: 223: PORTB = 0b00000000;
   949  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
   950  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
   951  0E3E  0186               	clrf	6	;volatile
   952                           
   953                           ;Supervisorio.c: 224: TRISC = 0b10000000;
   954  0E3F  3080               	movlw	128
   955  0E40  1683               	bsf	3,5	;RP0=1, select bank1
   956  0E41  1303               	bcf	3,6	;RP1=0, select bank1
   957  0E42  0087               	movwf	7	;volatile
   958                           
   959                           ;Supervisorio.c: 225: PORTC = 0b11000000;
   960  0E43  30C0               	movlw	192
   961  0E44  1283               	bcf	3,5	;RP0=0, select bank0
   962  0E45  1303               	bcf	3,6	;RP1=0, select bank0
   963  0E46  0087               	movwf	7	;volatile
   964                           
   965                           ;Supervisorio.c: 226: TRISD = 0b00000000;
   966  0E47  1683               	bsf	3,5	;RP0=1, select bank1
   967  0E48  1303               	bcf	3,6	;RP1=0, select bank1
   968  0E49  0188               	clrf	8	;volatile
   969                           
   970                           ;Supervisorio.c: 227: PORTD = 0b00000000;
   971  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
   972  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
   973  0E4C  0188               	clrf	8	;volatile
   974                           
   975                           ;Supervisorio.c: 228: TRISE = 0b00000111;
   976  0E4D  3007               	movlw	7
   977  0E4E  1683               	bsf	3,5	;RP0=1, select bank1
   978  0E4F  1303               	bcf	3,6	;RP1=0, select bank1
   979  0E50  0089               	movwf	9	;volatile
   980                           
   981                           ;Supervisorio.c: 229: PORTE = 0b00000111;
   982  0E51  3007               	movlw	7
   983  0E52  1283               	bcf	3,5	;RP0=0, select bank0
   984  0E53  1303               	bcf	3,6	;RP1=0, select bank0
   985  0E54  0089               	movwf	9	;volatile
   986                           
   987                           ;Supervisorio.c: 231: USART_Init(115200);
   988  0E55  3000               	movlw	0
   989  0E56  1683               	bsf	3,5	;RP0=1, select bank1
   990  0E57  1303               	bcf	3,6	;RP1=0, select bank1
   991  0E58  00B2               	movwf	(USART_Init@BaudRate+3)^(0+128)
   992  0E59  3001               	movlw	1
   993  0E5A  00B1               	movwf	(USART_Init@BaudRate+2)^(0+128)
   994  0E5B  30C2               	movlw	194
   995  0E5C  00B0               	movwf	(USART_Init@BaudRate+1)^(0+128)
   996  0E5D  3000               	movlw	0
   997  0E5E  00AF               	movwf	USART_Init@BaudRate^(0+128)
   998  0E5F  120A  158A  259B  120A  158A  	fcall	_USART_Init
   999                           
  1000                           ;Supervisorio.c: 232: ADC_Init();
  1001  0E64  120A  158A  2498  120A  158A  	fcall	_ADC_Init
  1002                           
  1003                           ;Supervisorio.c: 234: INTCONbits.PEIE = 1;
  1004  0E69  170B               	bsf	11,6	;volatile
  1005                           
  1006                           ;Supervisorio.c: 235: INTCONbits.GIE = 1;
  1007  0E6A  178B               	bsf	11,7	;volatile
  1008                           
  1009                           ;Supervisorio.c: 238: USART_WriteString("Inicializando...");
  1010  0E6B  30E8               	movlw	low (STR_6| (0+32768))
  1011  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  1012  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  1013  0E6E  00A1               	movwf	USART_WriteString@str^(0+128)
  1014  0E6F  3084               	movlw	high (STR_6| (0+32768))
  1015  0E70  00A2               	movwf	(USART_WriteString@str^(0+128)+1)
  1016  0E71  120A  158A  256A  120A  158A  	fcall	_USART_WriteString
  1017                           
  1018                           ;Supervisorio.c: 240: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1019  0E76  3018               	movlw	24
  1020  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  1021  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  1022  0E79  00BB               	movwf	(??_main^(0+128)+2)
  1023  0E7A  3061               	movlw	97
  1024  0E7B  00BA               	movwf	(??_main^(0+128)+1)
  1025  0E7C  306E               	movlw	110
  1026  0E7D  00B9               	movwf	??_main^(0+128)
  1027  0E7E                     u2577:	
  1028  0E7E  0BB9               	decfsz	??_main^(0+128),f
  1029  0E7F  2E7E               	goto	u2577
  1030  0E80  0BBA               	decfsz	(??_main^(0+128)+1),f
  1031  0E81  2E7E               	goto	u2577
  1032  0E82  0BBB               	decfsz	(??_main^(0+128)+2),f
  1033  0E83  2E7E               	goto	u2577
  1034  0E84  0000               	nop
  1035  0E85                     l110:	
  1036                           ;Supervisorio.c: 242: while(1)
  1037                           
  1038                           
  1039                           ;Supervisorio.c: 243: {
  1040  0E85  2E85               	goto	l110
  1041  0E86                     __end_of_main:	
  1042                           
  1043                           	psect	text1
  1044  0D6A                     __ptext1:	
  1045 ;; *************** function _USART_WriteString *****************
  1046 ;; Defined at:
  1047 ;;		line 66 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  str             2    1[BANK1 ] PTR const unsigned char 
  1050 ;;		 -> NULL(0), ftoa@buf(17), STR_6(17), STR_5(35), 
  1051 ;;		 -> STR_4(32), STR_3(35), STR_2(32), buffer(9), 
  1052 ;;		 -> STR_1(40), 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;		None               void
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         0       0       2       0       0
  1065 ;;      Locals:         0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0
  1067 ;;      Totals:         0       0       2       0       0
  1068 ;;Total ram usage:        2 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    6
  1071 ;; This function calls:
  1072 ;;		_USART_WriteChar
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _USART_WriteString
  1080  0D6A                     _USART_WriteString:	
  1081  0D6A                     l1813:	
  1082                           ;Supervisorio.c: 69: while(*str != '\0')
  1083                           
  1084                           ;incstack = 0
  1085                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1086                           
  1087  0D6A  1683               	bsf	3,5	;RP0=1, select bank1
  1088  0D6B  1303               	bcf	3,6	;RP1=0, select bank1
  1089  0D6C  0822               	movf	(USART_WriteString@str+1)^(0+128),w
  1090  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0D6F  00FF               	movwf	127
  1093  0D70  1683               	bsf	3,5	;RP0=1, select bank1
  1094  0D71  1303               	bcf	3,6	;RP1=0, select bank1
  1095  0D72  0821               	movf	USART_WriteString@str^(0+128),w
  1096  0D73  0084               	movwf	4
  1097  0D74  1283               	bcf	3,5	;RP0=0, select bank0
  1098  0D75  1303               	bcf	3,6	;RP1=0, select bank0
  1099  0D76  120A  118A  2400  120A  158A  	fcall	stringtab
  1100  0D7B  3800               	iorlw	0
  1101  0D7C  1903               	btfsc	3,2
  1102  0D7D  0008               	return
  1103                           
  1104                           ;Supervisorio.c: 70: {
  1105                           ;Supervisorio.c: 72: USART_WriteChar(*str);
  1106  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  1107  0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  1108  0D80  0822               	movf	(USART_WriteString@str+1)^(0+128),w
  1109  0D81  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0D82  1303               	bcf	3,6	;RP1=0, select bank0
  1111  0D83  00FF               	movwf	127
  1112  0D84  1683               	bsf	3,5	;RP0=1, select bank1
  1113  0D85  1303               	bcf	3,6	;RP1=0, select bank1
  1114  0D86  0821               	movf	USART_WriteString@str^(0+128),w
  1115  0D87  0084               	movwf	4
  1116  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0D8A  120A  118A  2400  120A  158A  	fcall	stringtab
  1119  0D8F  120A  118A  27F3  120A  158A  	fcall	_USART_WriteChar
  1120                           
  1121                           ;Supervisorio.c: 73: str++;
  1122  0D94  3001               	movlw	1
  1123  0D95  1683               	bsf	3,5	;RP0=1, select bank1
  1124  0D96  1303               	bcf	3,6	;RP1=0, select bank1
  1125  0D97  07A1               	addwf	USART_WriteString@str^(0+128),f
  1126  0D98  1803               	skipnc
  1127  0D99  0AA2               	incf	(USART_WriteString@str+1)^(0+128),f
  1128  0D9A  2D6A               	goto	l1813
  1129  0D9B                     __end_of_USART_WriteString:	
  1130                           
  1131                           	psect	text2
  1132  07F3                     __ptext2:	
  1133 ;; *************** function _USART_WriteChar *****************
  1134 ;; Defined at:
  1135 ;;		line 59 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  USARTData       1    wreg     unsigned char 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  USARTData       1    0[BANK1 ] unsigned char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1149 ;;      Params:         0       0       0       0       0
  1150 ;;      Locals:         0       0       1       0       0
  1151 ;;      Temps:          0       0       0       0       0
  1152 ;;      Totals:         0       0       1       0       0
  1153 ;;Total ram usage:        1 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    5
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_USART_WriteString
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           
  1164                           ;psect for function _USART_WriteChar
  1165  07F3                     _USART_WriteChar:	
  1166                           
  1167                           ;incstack = 0
  1168                           ; Regs used in _USART_WriteChar: [wreg]
  1169                           ;USART_WriteChar@USARTData stored from wreg
  1170  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  1171  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  1172  07F5  00A0               	movwf	USART_WriteChar@USARTData^(0+128)
  1173  07F6                     l70:	
  1174                           ;Supervisorio.c: 61: while(!PIR1bits.TXIF);
  1175                           
  1176  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  1177  07F7  1E0C               	btfss	12,4	;volatile
  1178  07F8  2FF6               	goto	l70
  1179                           
  1180                           ;Supervisorio.c: 62: TXREG = USARTData;
  1181  07F9  1683               	bsf	3,5	;RP0=1, select bank1
  1182  07FA  1303               	bcf	3,6	;RP1=0, select bank1
  1183  07FB  0820               	movf	USART_WriteChar@USARTData^(0+128),w
  1184  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  1185  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  1186  07FE  0099               	movwf	25	;volatile
  1187  07FF  0008               	return
  1188  0800                     __end_of_USART_WriteChar:	
  1189                           
  1190                           	psect	text3
  1191  0D9B                     __ptext3:	
  1192 ;; *************** function _USART_Init *****************
  1193 ;; Defined at:
  1194 ;;		line 22 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  BaudRate        4   15[BANK1 ] long 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  BR              1   24[BANK1 ] unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       4       0       0
  1209 ;;      Locals:         0       0       1       0       0
  1210 ;;      Temps:          0       0       5       0       0
  1211 ;;      Totals:         0       0      10       0       0
  1212 ;;Total ram usage:       10 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    6
  1215 ;; This function calls:
  1216 ;;		___aldiv
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           
  1223                           ;psect for function _USART_Init
  1224  0D9B                     _USART_Init:	
  1225                           
  1226                           ;Supervisorio.c: 28: unsigned char BR = 0;
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  1230  0D9B  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0D9C  1303               	bcf	3,6	;RP1=0, select bank1
  1232  0D9D  01B8               	clrf	USART_Init@BR^(0+128)
  1233                           
  1234                           ;Supervisorio.c: 31: BR = (18432000 / (16 * BaudRate)) - 1;
  1235  0D9E  082F               	movf	USART_Init@BaudRate^(0+128),w
  1236  0D9F  00B3               	movwf	??_USART_Init^(0+128)
  1237  0DA0  0830               	movf	(USART_Init@BaudRate+1)^(0+128),w
  1238  0DA1  00B4               	movwf	(??_USART_Init^(0+128)+1)
  1239  0DA2  0831               	movf	(USART_Init@BaudRate+2)^(0+128),w
  1240  0DA3  00B5               	movwf	(??_USART_Init^(0+128)+2)
  1241  0DA4  0832               	movf	(USART_Init@BaudRate+3)^(0+128),w
  1242  0DA5  00B6               	movwf	(??_USART_Init^(0+128)+3)
  1243  0DA6  3004               	movlw	4
  1244  0DA7                     u2485:	
  1245  0DA7  1003               	clrc
  1246  0DA8  0DB3               	rlf	??_USART_Init^(0+128),f
  1247  0DA9  0DB4               	rlf	(??_USART_Init^(0+128)+1),f
  1248  0DAA  0DB5               	rlf	(??_USART_Init^(0+128)+2),f
  1249  0DAB  0DB6               	rlf	(??_USART_Init^(0+128)+3),f
  1250  0DAC  3EFF               	addlw	-1
  1251  0DAD  1D03               	skipz
  1252  0DAE  2DA7               	goto	u2485
  1253  0DAF  0836               	movf	(??_USART_Init+3)^(0+128),w
  1254  0DB0  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1255  0DB1  0835               	movf	(??_USART_Init+2)^(0+128),w
  1256  0DB2  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1257  0DB3  0834               	movf	(??_USART_Init+1)^(0+128),w
  1258  0DB4  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1259  0DB5  0833               	movf	??_USART_Init^(0+128),w
  1260  0DB6  00A0               	movwf	___aldiv@divisor^(0+128)
  1261  0DB7  3001               	movlw	1
  1262  0DB8  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1263  0DB9  3019               	movlw	25
  1264  0DBA  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1265  0DBB  3040               	movlw	64
  1266  0DBC  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1267  0DBD  3000               	movlw	0
  1268  0DBE  00A4               	movwf	___aldiv@dividend^(0+128)
  1269  0DBF  120A  158A  2771   	fcall	___aldiv
  1270  0DC2  1683               	bsf	3,5	;RP0=1, select bank1
  1271  0DC3  1303               	bcf	3,6	;RP1=0, select bank1
  1272  0DC4  0820               	movf	?___aldiv^(0+128),w
  1273  0DC5  3EFF               	addlw	255
  1274  0DC6  00B7               	movwf	(??_USART_Init+4)^(0+128)
  1275  0DC7  0837               	movf	(??_USART_Init+4)^(0+128),w
  1276  0DC8  00B8               	movwf	USART_Init@BR^(0+128)
  1277                           
  1278                           ;Supervisorio.c: 32: SPBRG = BR;
  1279  0DC9  0838               	movf	USART_Init@BR^(0+128),w
  1280  0DCA  0099               	movwf	25	;volatile
  1281                           
  1282                           ;Supervisorio.c: 35: TXSTAbits.CSRC = 0;
  1283  0DCB  1398               	bcf	24,7	;volatile
  1284                           
  1285                           ;Supervisorio.c: 36: TXSTAbits.TX9 = 0;
  1286  0DCC  1318               	bcf	24,6	;volatile
  1287                           
  1288                           ;Supervisorio.c: 37: TXSTAbits.TXEN = 1;
  1289  0DCD  1698               	bsf	24,5	;volatile
  1290                           
  1291                           ;Supervisorio.c: 38: TXSTAbits.SYNC = 0;
  1292  0DCE  1218               	bcf	24,4	;volatile
  1293                           
  1294                           ;Supervisorio.c: 39: TXSTAbits.BRGH = 1;
  1295  0DCF  1518               	bsf	24,2	;volatile
  1296                           
  1297                           ;Supervisorio.c: 40: TXSTAbits.TRMT = 1;
  1298  0DD0  1498               	bsf	24,1	;volatile
  1299                           
  1300                           ;Supervisorio.c: 41: TXSTAbits.TX9D = 0;
  1301  0DD1  1018               	bcf	24,0	;volatile
  1302                           
  1303                           ;Supervisorio.c: 44: RCSTAbits.SPEN = 1;
  1304  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0DD4  1798               	bsf	24,7	;volatile
  1307                           
  1308                           ;Supervisorio.c: 45: RCSTAbits.RX9 = 0;
  1309  0DD5  1318               	bcf	24,6	;volatile
  1310                           
  1311                           ;Supervisorio.c: 46: RCSTAbits.SREN = 0;
  1312  0DD6  1298               	bcf	24,5	;volatile
  1313                           
  1314                           ;Supervisorio.c: 47: RCSTAbits.CREN = 1;
  1315  0DD7  1618               	bsf	24,4	;volatile
  1316                           
  1317                           ;Supervisorio.c: 48: RCSTAbits.ADDEN = 0;
  1318  0DD8  1198               	bcf	24,3	;volatile
  1319                           
  1320                           ;Supervisorio.c: 49: RCSTAbits.FERR = 0;
  1321  0DD9  1118               	bcf	24,2	;volatile
  1322                           
  1323                           ;Supervisorio.c: 50: RCSTAbits.OERR = 0;
  1324  0DDA  1098               	bcf	24,1	;volatile
  1325                           
  1326                           ;Supervisorio.c: 51: RCSTAbits.RX9D = 0;
  1327  0DDB  1018               	bcf	24,0	;volatile
  1328                           
  1329                           ;Supervisorio.c: 54: PIE1bits.RCIE = 1;
  1330  0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0DDD  1303               	bcf	3,6	;RP1=0, select bank1
  1332  0DDE  168C               	bsf	12,5	;volatile
  1333                           
  1334                           ;Supervisorio.c: 55: PIR1bits.RCIF = 0;
  1335  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0DE1  128C               	bcf	12,5	;volatile
  1338  0DE2  0008               	return
  1339  0DE3                     __end_of_USART_Init:	
  1340                           
  1341                           	psect	text4
  1342  0F71                     __ptext4:	
  1343 ;; *************** function ___aldiv *****************
  1344 ;; Defined at:
  1345 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  divisor         4    0[BANK1 ] long 
  1348 ;;  dividend        4    4[BANK1 ] long 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  quotient        4   11[BANK1 ] long 
  1351 ;;  sign            1   10[BANK1 ] unsigned char 
  1352 ;;  counter         1    9[BANK1 ] unsigned char 
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  4    0[BANK1 ] long 
  1355 ;; Registers used:
  1356 ;;		wreg, status,2, status,0
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1362 ;;      Params:         0       0       8       0       0
  1363 ;;      Locals:         0       0       6       0       0
  1364 ;;      Temps:          0       0       1       0       0
  1365 ;;      Totals:         0       0      15       0       0
  1366 ;;Total ram usage:       15 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    5
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_USART_Init
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           
  1377                           ;psect for function ___aldiv
  1378  0F71                     ___aldiv:	
  1379                           
  1380                           ;incstack = 0
  1381                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1382  0F71  1683               	bsf	3,5	;RP0=1, select bank1
  1383  0F72  1303               	bcf	3,6	;RP1=0, select bank1
  1384  0F73  01AA               	clrf	___aldiv@sign^(0+128)
  1385  0F74  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1386  0F75  2F83               	goto	l300
  1387  0F76  09A0               	comf	___aldiv@divisor^(0+128),f
  1388  0F77  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  1389  0F78  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  1390  0F79  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  1391  0F7A  0AA0               	incf	___aldiv@divisor^(0+128),f
  1392  0F7B  1903               	skipnz
  1393  0F7C  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  1394  0F7D  1903               	skipnz
  1395  0F7E  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  1396  0F7F  1903               	skipnz
  1397  0F80  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  1398  0F81  01AA               	clrf	___aldiv@sign^(0+128)
  1399  0F82  0AAA               	incf	___aldiv@sign^(0+128),f
  1400  0F83                     l300:	
  1401  0F83  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  1402  0F84  2F94               	goto	l1591
  1403  0F85  09A4               	comf	___aldiv@dividend^(0+128),f
  1404  0F86  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  1405  0F87  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  1406  0F88  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  1407  0F89  0AA4               	incf	___aldiv@dividend^(0+128),f
  1408  0F8A  1903               	skipnz
  1409  0F8B  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  1410  0F8C  1903               	skipnz
  1411  0F8D  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  1412  0F8E  1903               	skipnz
  1413  0F8F  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  1414  0F90  3001               	movlw	1
  1415  0F91  00A8               	movwf	??___aldiv^(0+128)
  1416  0F92  0828               	movf	??___aldiv^(0+128),w
  1417  0F93  06AA               	xorwf	___aldiv@sign^(0+128),f
  1418  0F94                     l1591:	
  1419  0F94  3000               	movlw	0
  1420  0F95  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  1421  0F96  3000               	movlw	0
  1422  0F97  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  1423  0F98  3000               	movlw	0
  1424  0F99  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  1425  0F9A  3000               	movlw	0
  1426  0F9B  00AB               	movwf	___aldiv@quotient^(0+128)
  1427  0F9C  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1428  0F9D  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1429  0F9E  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1430  0F9F  0420               	iorwf	___aldiv@divisor^(0+128),w
  1431  0FA0  1903               	skipnz
  1432  0FA1  2FE9               	goto	l1613
  1433  0FA2  01A9               	clrf	___aldiv@counter^(0+128)
  1434  0FA3  0AA9               	incf	___aldiv@counter^(0+128),f
  1435  0FA4                     l1599:	
  1436  0FA4  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  1437  0FA5  2FB4               	goto	l1601
  1438  0FA6  3001               	movlw	1
  1439  0FA7  00A8               	movwf	??___aldiv^(0+128)
  1440  0FA8                     u2085:	
  1441  0FA8  1003               	clrc
  1442  0FA9  0DA0               	rlf	___aldiv@divisor^(0+128),f
  1443  0FAA  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  1444  0FAB  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  1445  0FAC  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  1446  0FAD  0BA8               	decfsz	??___aldiv^(0+128),f
  1447  0FAE  2FA8               	goto	u2085
  1448  0FAF  3001               	movlw	1
  1449  0FB0  00A8               	movwf	??___aldiv^(0+128)
  1450  0FB1  0828               	movf	??___aldiv^(0+128),w
  1451  0FB2  07A9               	addwf	___aldiv@counter^(0+128),f
  1452  0FB3  2FA4               	goto	l1599
  1453  0FB4                     l1601:	
  1454  0FB4  3001               	movlw	1
  1455  0FB5  00A8               	movwf	??___aldiv^(0+128)
  1456  0FB6                     u2105:	
  1457  0FB6  1003               	clrc
  1458  0FB7  0DAB               	rlf	___aldiv@quotient^(0+128),f
  1459  0FB8  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  1460  0FB9  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  1461  0FBA  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  1462  0FBB  0BA8               	decfsz	??___aldiv^(0+128),f
  1463  0FBC  2FB6               	goto	u2105
  1464  0FBD  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1465  0FBE  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  1466  0FBF  1D03               	skipz
  1467  0FC0  2FCB               	goto	u2115
  1468  0FC1  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1469  0FC2  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  1470  0FC3  1D03               	skipz
  1471  0FC4  2FCB               	goto	u2115
  1472  0FC5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1473  0FC6  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  1474  0FC7  1D03               	skipz
  1475  0FC8  2FCB               	goto	u2115
  1476  0FC9  0820               	movf	___aldiv@divisor^(0+128),w
  1477  0FCA  0224               	subwf	___aldiv@dividend^(0+128),w
  1478  0FCB                     u2115:	
  1479  0FCB  1C03               	skipc
  1480  0FCC  2FDC               	goto	l1609
  1481  0FCD  0820               	movf	___aldiv@divisor^(0+128),w
  1482  0FCE  02A4               	subwf	___aldiv@dividend^(0+128),f
  1483  0FCF  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1484  0FD0  1C03               	skipc
  1485  0FD1  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1486  0FD2  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  1487  0FD3  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1488  0FD4  1C03               	skipc
  1489  0FD5  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1490  0FD6  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  1491  0FD7  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1492  0FD8  1C03               	skipc
  1493  0FD9  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1494  0FDA  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  1495  0FDB  142B               	bsf	___aldiv@quotient^(0+128),0
  1496  0FDC                     l1609:	
  1497  0FDC  3001               	movlw	1
  1498  0FDD                     u2125:	
  1499  0FDD  1003               	clrc
  1500  0FDE  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  1501  0FDF  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  1502  0FE0  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  1503  0FE1  0CA0               	rrf	___aldiv@divisor^(0+128),f
  1504  0FE2  3EFF               	addlw	-1
  1505  0FE3  1D03               	skipz
  1506  0FE4  2FDD               	goto	u2125
  1507  0FE5  3001               	movlw	1
  1508  0FE6  02A9               	subwf	___aldiv@counter^(0+128),f
  1509  0FE7  1D03               	btfss	3,2
  1510  0FE8  2FB4               	goto	l1601
  1511  0FE9                     l1613:	
  1512  0FE9  082A               	movf	___aldiv@sign^(0+128),w
  1513  0FEA  1903               	btfsc	3,2
  1514  0FEB  2FF7               	goto	l1617
  1515  0FEC  09AB               	comf	___aldiv@quotient^(0+128),f
  1516  0FED  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  1517  0FEE  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  1518  0FEF  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  1519  0FF0  0AAB               	incf	___aldiv@quotient^(0+128),f
  1520  0FF1  1903               	skipnz
  1521  0FF2  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  1522  0FF3  1903               	skipnz
  1523  0FF4  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  1524  0FF5  1903               	skipnz
  1525  0FF6  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  1526  0FF7                     l1617:	
  1527  0FF7  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  1528  0FF8  00A3               	movwf	(?___aldiv+3)^(0+128)
  1529  0FF9  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  1530  0FFA  00A2               	movwf	(?___aldiv+2)^(0+128)
  1531  0FFB  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  1532  0FFC  00A1               	movwf	(?___aldiv+1)^(0+128)
  1533  0FFD  082B               	movf	___aldiv@quotient^(0+128),w
  1534  0FFE  00A0               	movwf	?___aldiv^(0+128)
  1535  0FFF  0008               	return
  1536  1000                     __end_of___aldiv:	
  1537                           
  1538                           	psect	text5
  1539  0C98                     __ptext5:	
  1540 ;; *************** function _ADC_Init *****************
  1541 ;; Defined at:
  1542 ;;		line 100 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_sens
      +or_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;		None               void
  1549 ;; Registers used:
  1550 ;;		None
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1556 ;;      Params:         0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; Hardware stack levels required when called:    5
  1563 ;; This function calls:
  1564 ;;		Nothing
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           
  1571                           ;psect for function _ADC_Init
  1572  0C98                     _ADC_Init:	
  1573                           
  1574                           ;Supervisorio.c: 103: ADCON1bits.ADFM = 1;
  1575                           
  1576                           ;incstack = 0
  1577                           ; Regs used in _ADC_Init: []
  1578  0C98  1683               	bsf	3,5	;RP0=1, select bank1
  1579  0C99  1303               	bcf	3,6	;RP1=0, select bank1
  1580  0C9A  179F               	bsf	31,7	;volatile
  1581                           
  1582                           ;Supervisorio.c: 104: ADCON1bits.PCFG3 = 1;
  1583  0C9B  159F               	bsf	31,3	;volatile
  1584                           
  1585                           ;Supervisorio.c: 105: ADCON1bits.PCFG2 = 1;
  1586  0C9C  151F               	bsf	31,2	;volatile
  1587                           
  1588                           ;Supervisorio.c: 106: ADCON1bits.PCFG1 = 1;
  1589  0C9D  149F               	bsf	31,1	;volatile
  1590                           
  1591                           ;Supervisorio.c: 107: ADCON1bits.PCFG0 = 0;
  1592  0C9E  101F               	bcf	31,0	;volatile
  1593                           
  1594                           ;Supervisorio.c: 111: ADCON0bits.ADCS1 = 1;
  1595  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  1596  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  1597  0CA1  179F               	bsf	31,7	;volatile
  1598                           
  1599                           ;Supervisorio.c: 112: ADCON0bits.ADCS0 = 0;
  1600  0CA2  131F               	bcf	31,6	;volatile
  1601                           
  1602                           ;Supervisorio.c: 115: PIE1bits.ADIE = 0;
  1603  0CA3  1683               	bsf	3,5	;RP0=1, select bank1
  1604  0CA4  1303               	bcf	3,6	;RP1=0, select bank1
  1605  0CA5  130C               	bcf	12,6	;volatile
  1606                           
  1607                           ;Supervisorio.c: 116: PIR1bits.ADIF = 0;
  1608  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  1609  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  1610  0CA8  130C               	bcf	12,6	;volatile
  1611  0CA9  0008               	return
  1612  0CAA                     __end_of_ADC_Init:	
  1613                           
  1614                           	psect	text6
  1615  0504                     __ptext6:	
  1616 ;; *************** function _ISR *****************
  1617 ;; Defined at:
  1618 ;;		line 132 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_sens
      +or_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  byte1           1   59[BANK0 ] unsigned char 
  1623 ;;  byte2           1   58[BANK0 ] unsigned char 
  1624 ;;  resp            1   57[BANK0 ] unsigned char 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;		None               void
  1627 ;; Registers used:
  1628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         0       3       0       0       0
  1636 ;;      Temps:          0       6       0       0       0
  1637 ;;      Totals:         0       9       0       0       0
  1638 ;;Total ram usage:        9 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    4
  1641 ;; This function calls:
  1642 ;;		_ADC_Read
  1643 ;;		_USART_ReceiveChar
  1644 ;;		___ftmul
  1645 ;;		___lwtoft
  1646 ;;		_ftoa
  1647 ;;		i1_USART_WriteString
  1648 ;; This function is called by:
  1649 ;;		Interrupt level 1
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _ISR
  1655  0504                     _ISR:	
  1656                           
  1657                           ;Supervisorio.c: 135: if (PIR1bits.ADIF)
  1658  0504  1F0C               	btfss	12,6	;volatile
  1659  0505  2D68               	goto	i1l1887
  1660                           
  1661                           ;Supervisorio.c: 136: {
  1662                           ;Supervisorio.c: 137: ADC_Read(0);
  1663  0506  3000               	movlw	0
  1664  0507  00F0               	movwf	ADC_Read@channel
  1665  0508  3000               	movlw	0
  1666  0509  00F1               	movwf	ADC_Read@channel+1
  1667  050A  120A  158A  24AA  120A  118A  	fcall	_ADC_Read
  1668                           
  1669                           ;Supervisorio.c: 138: ADCResult = ((ADRESH << 8) + ADRESL);
  1670  050F  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0510  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0511  081E               	movf	30,w	;volatile
  1673  0512  01E0               	clrf	_ADCResult+1
  1674  0513  07E0               	addwf	_ADCResult+1,f
  1675  0514  1683               	bsf	3,5	;RP0=1, select bank1
  1676  0515  1303               	bcf	3,6	;RP1=0, select bank1
  1677  0516  081E               	movf	30,w	;volatile
  1678  0517  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0518  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0519  01DF               	clrf	_ADCResult
  1681  051A  07DF               	addwf	_ADCResult,f
  1682                           
  1683                           ;Supervisorio.c: 139: input = ADCResult * 0.004887585533;
  1684  051B  3028               	movlw	40
  1685  051C  00A0               	movwf	___ftmul@f1
  1686  051D  30A0               	movlw	160
  1687  051E  00A1               	movwf	___ftmul@f1+1
  1688  051F  303B               	movlw	59
  1689  0520  00A2               	movwf	___ftmul@f1+2
  1690  0521  0860               	movf	_ADCResult+1,w
  1691  0522  01F9               	clrf	___lwtoft@c+1
  1692  0523  07F9               	addwf	___lwtoft@c+1,f
  1693  0524  085F               	movf	_ADCResult,w
  1694  0525  01F8               	clrf	___lwtoft@c
  1695  0526  07F8               	addwf	___lwtoft@c,f
  1696  0527  120A  118A  23E9  120A  118A  	fcall	___lwtoft
  1697  052C  0878               	movf	?___lwtoft,w
  1698  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1699  052E  1303               	bcf	3,6	;RP1=0, select bank0
  1700  052F  00A3               	movwf	___ftmul@f2
  1701  0530  0879               	movf	?___lwtoft+1,w
  1702  0531  00A4               	movwf	___ftmul@f2+1
  1703  0532  087A               	movf	?___lwtoft+2,w
  1704  0533  00A5               	movwf	___ftmul@f2+2
  1705  0534  120A  118A  25FE  120A  118A  	fcall	___ftmul
  1706  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1707  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1708  053B  0820               	movf	?___ftmul,w
  1709  053C  00DC               	movwf	_input
  1710  053D  0821               	movf	?___ftmul+1,w
  1711  053E  00DD               	movwf	_input+1
  1712  053F  0822               	movf	?___ftmul+2,w
  1713  0540  00DE               	movwf	_input+2
  1714                           
  1715                           ;Supervisorio.c: 140: Display = ftoa(input, &status);
  1716  0541  085C               	movf	_input,w
  1717  0542  00C5               	movwf	ftoa@f
  1718  0543  085D               	movf	_input+1,w
  1719  0544  00C6               	movwf	ftoa@f+1
  1720  0545  085E               	movf	_input+2,w
  1721  0546  00C7               	movwf	ftoa@f+2
  1722  0547  306B               	movlw	_status& (0+255)
  1723  0548  00D3               	movwf	??_ISR
  1724  0549  0853               	movf	??_ISR,w
  1725  054A  00C8               	movwf	ftoa@status
  1726  054B  120A  118A  26D1  120A  118A  	fcall	_ftoa
  1727  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0552  00D4               	movwf	??_ISR+1
  1730  0553  0854               	movf	??_ISR+1,w
  1731  0554  00E1               	movwf	_Display
  1732                           
  1733                           ;Supervisorio.c: 142: USART_WriteString(Display);
  1734  0555  0861               	movf	_Display,w
  1735  0556  00F1               	movwf	i1USART_WriteString@str
  1736  0557  3000               	movlw	0
  1737  0558  00F2               	movwf	i1USART_WriteString@str+1
  1738  0559  120A  158A  24F9  120A  118A  	fcall	i1_USART_WriteString
  1739                           
  1740                           ;Supervisorio.c: 144: _delay((unsigned long)((2)*(18432000/4000000.0)));
  1741  055E  3002               	movlw	2
  1742  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0561  00D3               	movwf	??_ISR
  1745  0562                     u258_27:	
  1746  0562  0BD3               	decfsz	??_ISR,f
  1747  0563  2D62               	goto	u258_27
  1748  0564  2D65               	nop2	;nop
  1749                           
  1750                           ;Supervisorio.c: 146: PIR1bits.ADIF = 0;
  1751  0565  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0567  130C               	bcf	12,6	;volatile
  1754  0568                     i1l1887:	
  1755                           
  1756                           ;Supervisorio.c: 147: }
  1757                           ;Supervisorio.c: 150: if (PIR1bits.RCIF)
  1758  0568  1E8C               	btfss	12,5	;volatile
  1759  0569  2DF3               	goto	i1l107
  1760                           
  1761                           ;Supervisorio.c: 151: {
  1762                           ;Supervisorio.c: 152: char resp;
  1763                           ;Supervisorio.c: 153: unsigned char byte2;
  1764                           ;Supervisorio.c: 154: unsigned char byte1;
  1765                           ;Supervisorio.c: 156: resp = USART_ReceiveChar();
  1766  056A  120A  158A  24C2  120A  118A  	fcall	_USART_ReceiveChar
  1767  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0571  00D3               	movwf	??_ISR
  1770  0572  0853               	movf	??_ISR,w
  1771  0573  00D9               	movwf	ISR@resp
  1772                           
  1773                           ;Supervisorio.c: 159: switch(resp)
  1774  0574  2DE2               	goto	i1l1929
  1775  0575                     i1l1891:	
  1776                           ;Supervisorio.c: 160: {
  1777                           ;Supervisorio.c: 161: case 'A' :
  1778                           
  1779                           
  1780                           ;Supervisorio.c: 163: buffer[0] = '#';
  1781  0575  3023               	movlw	35
  1782  0576  00D3               	movwf	??_ISR
  1783  0577  0853               	movf	??_ISR,w
  1784  0578  00E2               	movwf	_buffer
  1785                           
  1786                           ;Supervisorio.c: 164: buffer[1] = ':';
  1787  0579  303A               	movlw	58
  1788  057A  00D3               	movwf	??_ISR
  1789  057B  0853               	movf	??_ISR,w
  1790  057C  00E3               	movwf	_buffer+1
  1791                           
  1792                           ;Supervisorio.c: 167: ADC_Read(0);
  1793  057D  3000               	movlw	0
  1794  057E  00F0               	movwf	ADC_Read@channel
  1795  057F  3000               	movlw	0
  1796  0580  00F1               	movwf	ADC_Read@channel+1
  1797  0581  120A  158A  24AA  120A  118A  	fcall	_ADC_Read
  1798                           
  1799                           ;Supervisorio.c: 168: byte2 = ADRESH;
  1800  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0588  081E               	movf	30,w	;volatile
  1803  0589  00D3               	movwf	??_ISR
  1804  058A  0853               	movf	??_ISR,w
  1805  058B  00DA               	movwf	ISR@byte2
  1806                           
  1807                           ;Supervisorio.c: 169: byte1 = ADRESL;
  1808  058C  1683               	bsf	3,5	;RP0=1, select bank1
  1809  058D  1303               	bcf	3,6	;RP1=0, select bank1
  1810  058E  081E               	movf	30,w	;volatile
  1811  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0591  00D3               	movwf	??_ISR
  1814  0592  0853               	movf	??_ISR,w
  1815  0593  00DB               	movwf	ISR@byte1
  1816                           
  1817                           ;Supervisorio.c: 172: if (byte2 == '\0') byte2 = '0';
  1818  0594  08DA               	movf	ISR@byte2,f
  1819  0595  1D03               	skipz
  1820  0596  2D9B               	goto	i1l1903
  1821  0597  3030               	movlw	48
  1822  0598  00D3               	movwf	??_ISR
  1823  0599  0853               	movf	??_ISR,w
  1824  059A  00DA               	movwf	ISR@byte2
  1825  059B                     i1l1903:	
  1826                           
  1827                           ;Supervisorio.c: 173: if (byte1 == '\0') byte1 = '0';
  1828  059B  08DB               	movf	ISR@byte1,f
  1829  059C  1D03               	skipz
  1830  059D  2DA2               	goto	i1l101
  1831  059E  3030               	movlw	48
  1832  059F  00D3               	movwf	??_ISR
  1833  05A0  0853               	movf	??_ISR,w
  1834  05A1  00DB               	movwf	ISR@byte1
  1835  05A2                     i1l101:	
  1836                           
  1837                           ;Supervisorio.c: 175: buffer[2] = byte2;
  1838  05A2  085A               	movf	ISR@byte2,w
  1839  05A3  00D3               	movwf	??_ISR
  1840  05A4  0853               	movf	??_ISR,w
  1841  05A5  00E4               	movwf	_buffer+2
  1842                           
  1843                           ;Supervisorio.c: 176: buffer[3] = byte1;
  1844  05A6  085B               	movf	ISR@byte1,w
  1845  05A7  00D3               	movwf	??_ISR
  1846  05A8  0853               	movf	??_ISR,w
  1847  05A9  00E5               	movwf	_buffer+3
  1848                           
  1849                           ;Supervisorio.c: 178: buffer[4] = '0';
  1850  05AA  3030               	movlw	48
  1851  05AB  00D3               	movwf	??_ISR
  1852  05AC  0853               	movf	??_ISR,w
  1853  05AD  00E6               	movwf	_buffer+4
  1854                           
  1855                           ;Supervisorio.c: 179: buffer[5] = '0';
  1856  05AE  3030               	movlw	48
  1857  05AF  00D3               	movwf	??_ISR
  1858  05B0  0853               	movf	??_ISR,w
  1859  05B1  00E7               	movwf	_buffer+5
  1860                           
  1861                           ;Supervisorio.c: 181: buffer[6] = '0';
  1862  05B2  3030               	movlw	48
  1863  05B3  00D3               	movwf	??_ISR
  1864  05B4  0853               	movf	??_ISR,w
  1865  05B5  00E8               	movwf	_buffer+6
  1866                           
  1867                           ;Supervisorio.c: 182: buffer[7] = '0';
  1868  05B6  3030               	movlw	48
  1869  05B7  00D3               	movwf	??_ISR
  1870  05B8  0853               	movf	??_ISR,w
  1871  05B9  00E9               	movwf	_buffer+7
  1872                           
  1873                           ;Supervisorio.c: 183: buffer[8] = ';';
  1874  05BA  303B               	movlw	59
  1875  05BB  00D3               	movwf	??_ISR
  1876  05BC  0853               	movf	??_ISR,w
  1877  05BD  00EA               	movwf	_buffer+8
  1878                           
  1879                           ;Supervisorio.c: 185: USART_WriteString(buffer);
  1880  05BE  3062               	movlw	_buffer& (0+255)
  1881  05BF  00F1               	movwf	i1USART_WriteString@str
  1882  05C0  3000               	movlw	0
  1883  05C1  2DD5               	goto	L1
  1884  05C2                     i1l103:	
  1885                           ;Supervisorio.c: 190: case 'B' :
  1886                           
  1887                           ;Supervisorio.c: 189: break;
  1888                           
  1889                           ;Supervisorio.c: 187: resp = '#';
  1890                           
  1891                           
  1892                           ;Supervisorio.c: 191: RB4 = 1;
  1893  05C2  1606               	bsf	6,4	;volatile
  1894                           
  1895                           ;Supervisorio.c: 192: USART_WriteString("------------> valvula 1 ativada");
  1896  05C3  30A8               	movlw	low (STR_2| (0+32768))
  1897  05C4  00F1               	movwf	i1USART_WriteString@str
  1898  05C5  3084               	movlw	high (STR_2| (0+32768))
  1899  05C6  2DD5               	goto	L1
  1900  05C7                     i1l104:	
  1901                           ;Supervisorio.c: 196: case 'C' :
  1902                           
  1903                           ;Supervisorio.c: 194: break;
  1904                           
  1905                           ;Supervisorio.c: 193: resp = '#';
  1906                           
  1907                           
  1908                           ;Supervisorio.c: 197: RB4 = 0;
  1909  05C7  1206               	bcf	6,4	;volatile
  1910                           
  1911                           ;Supervisorio.c: 198: USART_WriteString("------------> valvula 1 desativada");
  1912  05C8  3062               	movlw	low (STR_3| (0+32768))
  1913  05C9  00F1               	movwf	i1USART_WriteString@str
  1914  05CA  3084               	movlw	high (STR_3| (0+32768))
  1915  05CB  2DD5               	goto	L1
  1916  05CC                     i1l105:	
  1917                           ;Supervisorio.c: 202: case 'D' :
  1918                           
  1919                           ;Supervisorio.c: 200: break;
  1920                           
  1921                           ;Supervisorio.c: 199: resp = '#';
  1922                           
  1923                           
  1924                           ;Supervisorio.c: 203: RB5 = 1;
  1925  05CC  1686               	bsf	6,5	;volatile
  1926                           
  1927                           ;Supervisorio.c: 204: USART_WriteString("------------> valvula 2 ativada");
  1928  05CD  30C8               	movlw	low (STR_4| (0+32768))
  1929  05CE  00F1               	movwf	i1USART_WriteString@str
  1930  05CF  3084               	movlw	high (STR_4| (0+32768))
  1931  05D0  2DD5               	goto	L1
  1932  05D1                     i1l106:	
  1933                           ;Supervisorio.c: 208: case 'E' :
  1934                           
  1935                           ;Supervisorio.c: 206: break;
  1936                           
  1937                           ;Supervisorio.c: 205: resp = '#';
  1938                           
  1939                           
  1940                           ;Supervisorio.c: 209: RB5 = 0;
  1941  05D1  1286               	bcf	6,5	;volatile
  1942                           
  1943                           ;Supervisorio.c: 210: USART_WriteString("------------> valvula 2 desativada");
  1944  05D2  3085               	movlw	low (STR_5| (0+32768))
  1945  05D3  00F1               	movwf	i1USART_WriteString@str
  1946  05D4  3084               	movlw	high (STR_5| (0+32768))
  1947  05D5                     L1:	
  1948  05D5  00F2               	movwf	i1USART_WriteString@str+1
  1949  05D6  120A  158A  24F9  120A  118A  	fcall	i1_USART_WriteString
  1950                           
  1951                           ;Supervisorio.c: 211: resp = '#';
  1952  05DB  3023               	movlw	35
  1953  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  1954  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  1955  05DE  00D3               	movwf	??_ISR
  1956  05DF  0853               	movf	??_ISR,w
  1957  05E0  00D9               	movwf	ISR@resp
  1958                           
  1959                           ;Supervisorio.c: 213: }
  1960                           
  1961                           ;Supervisorio.c: 212: break;
  1962  05E1  2DF3               	goto	i1l107
  1963  05E2                     i1l1929:	
  1964  05E2  0859               	movf	ISR@resp,w
  1965                           
  1966                           ; Switch size 1, requested type "space"
  1967                           ; Number of cases is 5, Range of values is 65 to 69
  1968                           ; switch strategies available:
  1969                           ; Name         Instructions Cycles
  1970                           ; simple_byte           16     9 (average)
  1971                           ; direct_byte           26    11 (fixed)
  1972                           ; jumptable            263     9 (fixed)
  1973                           ;	Chosen strategy is simple_byte
  1974  05E3  3A41               	xorlw	65	; case 65
  1975  05E4  1903               	skipnz
  1976  05E5  2D75               	goto	i1l1891
  1977  05E6  3A03               	xorlw	3	; case 66
  1978  05E7  1903               	skipnz
  1979  05E8  2DC2               	goto	i1l103
  1980  05E9  3A01               	xorlw	1	; case 67
  1981  05EA  1903               	skipnz
  1982  05EB  2DC7               	goto	i1l104
  1983  05EC  3A07               	xorlw	7	; case 68
  1984  05ED  1903               	skipnz
  1985  05EE  2DCC               	goto	i1l105
  1986  05EF  3A01               	xorlw	1	; case 69
  1987  05F0  1903               	skipnz
  1988  05F1  2DD1               	goto	i1l106
  1989  05F2  2DF3               	goto	i1l107
  1990  05F3                     i1l107:	
  1991  05F3  0858               	movf	??_ISR+5,w
  1992  05F4  00FF               	movwf	127
  1993  05F5  0857               	movf	??_ISR+4,w
  1994  05F6  008A               	movwf	10
  1995  05F7  0856               	movf	??_ISR+3,w
  1996  05F8  0084               	movwf	4
  1997  05F9  0E55               	swapf	(??_ISR+2)^0,w
  1998  05FA  0083               	movwf	3
  1999  05FB  0EFE               	swapf	126,f
  2000  05FC  0E7E               	swapf	126,w
  2001  05FD  0009               	retfie
  2002  05FE                     __end_of_ISR:	
  2003                           
  2004                           	psect	intentry
  2005  0004                     __pintentry:	
  2006                           ;incstack = 0
  2007                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2008                           
  2009  0004                     interrupt_function:	
  2010  007E                     saved_w	set	btemp
  2011  0004  00FE               	movwf	btemp
  2012  0005  0E03               	swapf	3,w
  2013  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2014  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0008  00D5               	movwf	??_ISR+2
  2016  0009  0804               	movf	4,w
  2017  000A  00D6               	movwf	??_ISR+3
  2018  000B  080A               	movf	10,w
  2019  000C  00D7               	movwf	??_ISR+4
  2020  000D  087F               	movf	btemp+1,w
  2021  000E  00D8               	movwf	??_ISR+5
  2022  000F  120A  118A  2D04   	ljmp	_ISR
  2023                           
  2024                           	psect	text7
  2025  06D1                     __ptext7:	
  2026 ;; *************** function _ftoa *****************
  2027 ;; Defined at:
  2028 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftoa.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  f               3   37[BANK0 ] float 
  2031 ;;  status          1   40[BANK0 ] PTR int 
  2032 ;;		 -> status(2), 
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  l               4   46[BANK0 ] unsigned long 
  2035 ;;  rem             4   42[BANK0 ] unsigned long 
  2036 ;;  cp              1   50[BANK0 ] PTR unsigned char 
  2037 ;;		 -> ftoa@buf(17), 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      PTR unsigned char 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2047 ;;      Params:         0       4       0       0       0
  2048 ;;      Locals:         0       9       0       0       0
  2049 ;;      Temps:          0       1       0       0       0
  2050 ;;      Totals:         0      14       0       0       0
  2051 ;;Total ram usage:       14 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    3
  2054 ;; This function calls:
  2055 ;;		___ftge
  2056 ;;		___ftmul
  2057 ;;		___ftneg
  2058 ;;		___ftsub
  2059 ;;		___fttol
  2060 ;;		___lltoft
  2061 ;;		_sprintf
  2062 ;; This function is called by:
  2063 ;;		_ISR
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           
  2068                           ;psect for function _ftoa
  2069  06D1                     _ftoa:	
  2070                           
  2071                           ;incstack = 0
  2072                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2073  06D1  30BC               	movlw	ftoa@buf& (0+255)
  2074  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  2075  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  2076  06D4  00C9               	movwf	??_ftoa
  2077  06D5  0849               	movf	??_ftoa,w
  2078  06D6  00D2               	movwf	ftoa@cp
  2079  06D7  0845               	movf	ftoa@f,w
  2080  06D8  00F0               	movwf	___ftge@ff1
  2081  06D9  0846               	movf	ftoa@f+1,w
  2082  06DA  00F1               	movwf	___ftge@ff1+1
  2083  06DB  0847               	movf	ftoa@f+2,w
  2084  06DC  00F2               	movwf	___ftge@ff1+2
  2085  06DD  3000               	movlw	0
  2086  06DE  00F3               	movwf	___ftge@ff2
  2087  06DF  3000               	movlw	0
  2088  06E0  00F4               	movwf	___ftge@ff2+1
  2089  06E1  3000               	movlw	0
  2090  06E2  00F5               	movwf	___ftge@ff2+2
  2091  06E3  120A  158A  2686  120A  118A  	fcall	___ftge
  2092  06E8  1803               	btfsc	3,0
  2093  06E9  2F0A               	goto	i1l1855
  2094  06EA  302D               	movlw	45
  2095  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  2096  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  2097  06ED  00C9               	movwf	??_ftoa
  2098  06EE  0852               	movf	ftoa@cp,w
  2099  06EF  0084               	movwf	4
  2100  06F0  0849               	movf	??_ftoa,w
  2101  06F1  1383               	bcf	3,7	;select IRP bank0
  2102  06F2  0080               	movwf	0
  2103  06F3  3001               	movlw	1
  2104  06F4  00C9               	movwf	??_ftoa
  2105  06F5  0849               	movf	??_ftoa,w
  2106  06F6  07D2               	addwf	ftoa@cp,f
  2107  06F7  0845               	movf	ftoa@f,w
  2108  06F8  00F0               	movwf	___ftneg@f1
  2109  06F9  0846               	movf	ftoa@f+1,w
  2110  06FA  00F1               	movwf	___ftneg@f1+1
  2111  06FB  0847               	movf	ftoa@f+2,w
  2112  06FC  00F2               	movwf	___ftneg@f1+2
  2113  06FD  120A  158A  247A  120A  118A  	fcall	___ftneg
  2114  0702  0870               	movf	?___ftneg,w
  2115  0703  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0704  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0705  00C5               	movwf	ftoa@f
  2118  0706  0871               	movf	?___ftneg+1,w
  2119  0707  00C6               	movwf	ftoa@f+1
  2120  0708  0872               	movf	?___ftneg+2,w
  2121  0709  00C7               	movwf	ftoa@f+2
  2122  070A                     i1l1855:	
  2123  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2124  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2125  070C  0845               	movf	ftoa@f,w
  2126  070D  00B0               	movwf	___fttol@f1
  2127  070E  0846               	movf	ftoa@f+1,w
  2128  070F  00B1               	movwf	___fttol@f1+1
  2129  0710  0847               	movf	ftoa@f+2,w
  2130  0711  00B2               	movwf	___fttol@f1+2
  2131  0712  120A  158A  26E3  120A  118A  	fcall	___fttol
  2132  0717  1283               	bcf	3,5	;RP0=0, select bank0
  2133  0718  1303               	bcf	3,6	;RP1=0, select bank0
  2134  0719  0833               	movf	?___fttol+3,w
  2135  071A  00D1               	movwf	ftoa@l+3
  2136  071B  0832               	movf	?___fttol+2,w
  2137  071C  00D0               	movwf	ftoa@l+2
  2138  071D  0831               	movf	?___fttol+1,w
  2139  071E  00CF               	movwf	ftoa@l+1
  2140  071F  0830               	movf	?___fttol,w
  2141  0720  00CE               	movwf	ftoa@l
  2142  0721  0851               	movf	ftoa@l+3,w
  2143  0722  00FB               	movwf	___lltoft@c+3
  2144  0723  0850               	movf	ftoa@l+2,w
  2145  0724  00FA               	movwf	___lltoft@c+2
  2146  0725  084F               	movf	ftoa@l+1,w
  2147  0726  00F9               	movwf	___lltoft@c+1
  2148  0727  084E               	movf	ftoa@l,w
  2149  0728  00F8               	movwf	___lltoft@c
  2150  0729  120A  158A  253F  120A  118A  	fcall	___lltoft
  2151  072E  0878               	movf	?___lltoft,w
  2152  072F  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0730  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0731  00A7               	movwf	___ftsub@f2
  2155  0732  0879               	movf	?___lltoft+1,w
  2156  0733  00A8               	movwf	___ftsub@f2+1
  2157  0734  087A               	movf	?___lltoft+2,w
  2158  0735  00A9               	movwf	___ftsub@f2+2
  2159  0736  0845               	movf	ftoa@f,w
  2160  0737  00AA               	movwf	___ftsub@f1
  2161  0738  0846               	movf	ftoa@f+1,w
  2162  0739  00AB               	movwf	___ftsub@f1+1
  2163  073A  0847               	movf	ftoa@f+2,w
  2164  073B  00AC               	movwf	___ftsub@f1+2
  2165  073C  120A  158A  24DD  120A  118A  	fcall	___ftsub
  2166  0741  1283               	bcf	3,5	;RP0=0, select bank0
  2167  0742  1303               	bcf	3,6	;RP1=0, select bank0
  2168  0743  0827               	movf	?___ftsub,w
  2169  0744  00C5               	movwf	ftoa@f
  2170  0745  0828               	movf	?___ftsub+1,w
  2171  0746  00C6               	movwf	ftoa@f+1
  2172  0747  0829               	movf	?___ftsub+2,w
  2173  0748  00C7               	movwf	ftoa@f+2
  2174  0749  0845               	movf	ftoa@f,w
  2175  074A  00A3               	movwf	___ftmul@f2
  2176  074B  0846               	movf	ftoa@f+1,w
  2177  074C  00A4               	movwf	___ftmul@f2+1
  2178  074D  0847               	movf	ftoa@f+2,w
  2179  074E  00A5               	movwf	___ftmul@f2+2
  2180  074F  3024               	movlw	36
  2181  0750  00A0               	movwf	___ftmul@f1
  2182  0751  3074               	movlw	116
  2183  0752  00A1               	movwf	___ftmul@f1+1
  2184  0753  3049               	movlw	73
  2185  0754  00A2               	movwf	___ftmul@f1+2
  2186  0755  120A  118A  25FE  120A  118A  	fcall	___ftmul
  2187  075A  1283               	bcf	3,5	;RP0=0, select bank0
  2188  075B  1303               	bcf	3,6	;RP1=0, select bank0
  2189  075C  0820               	movf	?___ftmul,w
  2190  075D  00B0               	movwf	___fttol@f1
  2191  075E  0821               	movf	?___ftmul+1,w
  2192  075F  00B1               	movwf	___fttol@f1+1
  2193  0760  0822               	movf	?___ftmul+2,w
  2194  0761  00B2               	movwf	___fttol@f1+2
  2195  0762  120A  158A  26E3  120A  118A  	fcall	___fttol
  2196  0767  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0768  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0769  0833               	movf	?___fttol+3,w
  2199  076A  00CD               	movwf	ftoa@rem+3
  2200  076B  0832               	movf	?___fttol+2,w
  2201  076C  00CC               	movwf	ftoa@rem+2
  2202  076D  0831               	movf	?___fttol+1,w
  2203  076E  00CB               	movwf	ftoa@rem+1
  2204  076F  0830               	movf	?___fttol,w
  2205  0770  00CA               	movwf	ftoa@rem
  2206  0771  30F9               	movlw	low (STR_7| (0+32768))
  2207  0772  00AA               	movwf	sprintf@f
  2208  0773  3084               	movlw	high (STR_7| (0+32768))
  2209  0774  00AB               	movwf	sprintf@f+1
  2210  0775  0851               	movf	ftoa@l+3,w
  2211  0776  00AF               	movwf	?_sprintf+5
  2212  0777  0850               	movf	ftoa@l+2,w
  2213  0778  00AE               	movwf	?_sprintf+4
  2214  0779  084F               	movf	ftoa@l+1,w
  2215  077A  00AD               	movwf	?_sprintf+3
  2216  077B  084E               	movf	ftoa@l,w
  2217  077C  00AC               	movwf	?_sprintf+2
  2218  077D  084D               	movf	ftoa@rem+3,w
  2219  077E  00B3               	movwf	?_sprintf+9
  2220  077F  084C               	movf	ftoa@rem+2,w
  2221  0780  00B2               	movwf	?_sprintf+8
  2222  0781  084B               	movf	ftoa@rem+1,w
  2223  0782  00B1               	movwf	?_sprintf+7
  2224  0783  084A               	movf	ftoa@rem,w
  2225  0784  00B0               	movwf	?_sprintf+6
  2226  0785  0852               	movf	ftoa@cp,w
  2227  0786  120A  118A  2028   	fcall	_sprintf
  2228  0789  30BC               	movlw	ftoa@buf& (0+255)
  2229  078A  0008               	return
  2230  078B                     __end_of_ftoa:	
  2231                           
  2232                           	psect	text8
  2233  0028                     __ptext8:	
  2234 ;; *************** function _sprintf *****************
  2235 ;; Defined at:
  2236 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  sp              1    wreg     PTR unsigned char 
  2239 ;;		 -> ftoa@buf(17), 
  2240 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  2241 ;;		 -> STR_7(11), 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  sp              1   31[BANK0 ] PTR unsigned char 
  2244 ;;		 -> ftoa@buf(17), 
  2245 ;;  _val            4   27[BANK0 ] struct .
  2246 ;;  prec            2   34[BANK0 ] int 
  2247 ;;  width           2   32[BANK0 ] int 
  2248 ;;  c               1   36[BANK0 ] char 
  2249 ;;  ap              1   26[BANK0 ] PTR void [1]
  2250 ;;		 -> ?_sprintf(2), 
  2251 ;;  flag            1   25[BANK0 ] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  2   10[BANK0 ] int 
  2254 ;; Registers used:
  2255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2261 ;;      Params:         0      10       0       0       0
  2262 ;;      Locals:         0      12       0       0       0
  2263 ;;      Temps:          0       5       0       0       0
  2264 ;;      Totals:         0      27       0       0       0
  2265 ;;Total ram usage:       27 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    1
  2268 ;; This function calls:
  2269 ;;		___lldiv
  2270 ;;		___llmod
  2271 ;;		___wmul
  2272 ;;		_isdigit
  2273 ;; This function is called by:
  2274 ;;		_ftoa
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           
  2279                           ;psect for function _sprintf
  2280  0028                     _sprintf:	
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2284                           ;sprintf@sp stored from wreg
  2285  0028  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0029  1303               	bcf	3,6	;RP1=0, select bank0
  2287  002A  00BF               	movwf	sprintf@sp
  2288                           
  2289                           ;doprnt.c: 494: va_list ap;
  2290                           ;doprnt.c: 499: signed char c;
  2291                           ;doprnt.c: 501: int width;
  2292                           ;doprnt.c: 504: int prec;
  2293                           ;doprnt.c: 508: unsigned char flag;
  2294                           ;doprnt.c: 527: union {
  2295                           ;doprnt.c: 528: unsigned long _val;
  2296                           ;doprnt.c: 529: struct {
  2297                           ;doprnt.c: 530: const char * _cp;
  2298                           ;doprnt.c: 531: unsigned _len;
  2299                           ;doprnt.c: 532: } _str;
  2300                           ;doprnt.c: 533: } _val;
  2301                           ;doprnt.c: 542: *ap = __va_start();
  2302  002B  302C               	movlw	(?_sprintf+2)& (0+255)
  2303  002C  00B4               	movwf	??_sprintf
  2304  002D  0834               	movf	??_sprintf,w
  2305  002E  00BA               	movwf	sprintf@ap
  2306  002F                     i1l1575:	
  2307                           ;doprnt.c: 545: while(c = *f++) {
  2308                           
  2309  002F  082B               	movf	sprintf@f+1,w
  2310  0030  00B5               	movwf	??_sprintf+1
  2311  0031  082A               	movf	sprintf@f,w
  2312  0032  00B4               	movwf	??_sprintf
  2313  0033  0AAA               	incf	sprintf@f,f
  2314  0034  1903               	skipnz
  2315  0035  0AAB               	incf	sprintf@f+1,f
  2316  0036  0835               	movf	??_sprintf+1,w
  2317  0037  00FF               	movwf	127
  2318  0038  0834               	movf	??_sprintf,w
  2319  0039  0084               	movwf	4
  2320  003A  120A  118A  2400  120A  118A  	fcall	stringtab
  2321  003F  00B6               	movwf	??_sprintf+2
  2322  0040  0836               	movf	??_sprintf+2,w
  2323  0041  00C4               	movwf	sprintf@c
  2324  0042  08C4               	movf	sprintf@c,f
  2325  0043  1903               	btfsc	3,2
  2326  0044  2A7F               	goto	i1l1577
  2327                           
  2328                           ;doprnt.c: 547: if(c != '%')
  2329  0045  0844               	movf	sprintf@c,w
  2330  0046  3A25               	xorlw	37
  2331  0047  1903               	skipnz
  2332  0048  2855               	goto	i1l1487
  2333                           
  2334                           ;doprnt.c: 549: {
  2335                           ;doprnt.c: 550: ((*sp++ = (c)));
  2336  0049  0844               	movf	sprintf@c,w
  2337  004A  00B4               	movwf	??_sprintf
  2338  004B  083F               	movf	sprintf@sp,w
  2339  004C  0084               	movwf	4
  2340  004D  0834               	movf	??_sprintf,w
  2341  004E  1383               	bcf	3,7	;select IRP bank0
  2342  004F  0080               	movwf	0
  2343  0050  3001               	movlw	1
  2344  0051  00B4               	movwf	??_sprintf
  2345  0052  0834               	movf	??_sprintf,w
  2346  0053  07BF               	addwf	sprintf@sp,f
  2347                           
  2348                           ;doprnt.c: 551: continue;
  2349  0054  282F               	goto	i1l1575
  2350  0055                     i1l1487:	
  2351                           
  2352                           ;doprnt.c: 552: }
  2353                           ;doprnt.c: 555: width = 0;
  2354  0055  01C0               	clrf	sprintf@width
  2355  0056  01C1               	clrf	sprintf@width+1
  2356                           
  2357                           ;doprnt.c: 557: flag = 0;
  2358  0057  01B9               	clrf	sprintf@flag
  2359                           
  2360                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2361  0058  082B               	movf	sprintf@f+1,w
  2362  0059  00FF               	movwf	127
  2363  005A  082A               	movf	sprintf@f,w
  2364  005B  0084               	movwf	4
  2365  005C  120A  118A  2400  120A  118A  	fcall	stringtab
  2366  0061  120A  158A  248A  120A  118A  	fcall	_isdigit
  2367  0066  1C03               	btfss	3,0
  2368  0067  28AE               	goto	i1l1501
  2369                           
  2370                           ;doprnt.c: 607: width = 0;
  2371  0068  1283               	bcf	3,5	;RP0=0, select bank0
  2372  0069  1303               	bcf	3,6	;RP1=0, select bank0
  2373  006A  01C0               	clrf	sprintf@width
  2374  006B  01C1               	clrf	sprintf@width+1
  2375  006C                     i1l1493:	
  2376                           ;doprnt.c: 608: do {
  2377                           
  2378                           
  2379                           ;doprnt.c: 609: width *= 10;
  2380  006C  300A               	movlw	10
  2381  006D  00F0               	movwf	___wmul@multiplier
  2382  006E  3000               	movlw	0
  2383  006F  00F1               	movwf	___wmul@multiplier+1
  2384  0070  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0071  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0072  0841               	movf	sprintf@width+1,w
  2387  0073  01F3               	clrf	___wmul@multiplicand+1
  2388  0074  07F3               	addwf	___wmul@multiplicand+1,f
  2389  0075  0840               	movf	sprintf@width,w
  2390  0076  01F2               	clrf	___wmul@multiplicand
  2391  0077  07F2               	addwf	___wmul@multiplicand,f
  2392  0078  120A  158A  251C  120A  118A  	fcall	___wmul
  2393  007D  0871               	movf	?___wmul+1,w
  2394  007E  1283               	bcf	3,5	;RP0=0, select bank0
  2395  007F  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0080  01C1               	clrf	sprintf@width+1
  2397  0081  07C1               	addwf	sprintf@width+1,f
  2398  0082  0870               	movf	?___wmul,w
  2399  0083  01C0               	clrf	sprintf@width
  2400  0084  07C0               	addwf	sprintf@width,f
  2401                           
  2402                           ;doprnt.c: 610: width += *f++ - '0';
  2403  0085  082B               	movf	sprintf@f+1,w
  2404  0086  00FF               	movwf	127
  2405  0087  082A               	movf	sprintf@f,w
  2406  0088  0084               	movwf	4
  2407  0089  120A  118A  2400  120A  118A  	fcall	stringtab
  2408  008E  3ED0               	addlw	208
  2409  008F  00B4               	movwf	??_sprintf
  2410  0090  30FF               	movlw	255
  2411  0091  1803               	skipnc
  2412  0092  3000               	movlw	0
  2413  0093  00B5               	movwf	??_sprintf+1
  2414  0094  0834               	movf	??_sprintf,w
  2415  0095  07C0               	addwf	sprintf@width,f
  2416  0096  1803               	skipnc
  2417  0097  0AC1               	incf	sprintf@width+1,f
  2418  0098  0835               	movf	??_sprintf+1,w
  2419  0099  07C1               	addwf	sprintf@width+1,f
  2420  009A  3001               	movlw	1
  2421  009B  07AA               	addwf	sprintf@f,f
  2422  009C  1803               	skipnc
  2423  009D  0AAB               	incf	sprintf@f+1,f
  2424                           
  2425                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2426  009E  082B               	movf	sprintf@f+1,w
  2427  009F  00FF               	movwf	127
  2428  00A0  082A               	movf	sprintf@f,w
  2429  00A1  0084               	movwf	4
  2430  00A2  120A  118A  2400  120A  118A  	fcall	stringtab
  2431  00A7  120A  158A  248A  120A  118A  	fcall	_isdigit
  2432  00AC  1803               	btfsc	3,0
  2433  00AD  286C               	goto	i1l1493
  2434  00AE                     i1l1501:	
  2435                           
  2436                           ;doprnt.c: 617: }
  2437                           ;doprnt.c: 620: if(*f == '.') {
  2438  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  2439  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  2440  00B0  082B               	movf	sprintf@f+1,w
  2441  00B1  00FF               	movwf	127
  2442  00B2  082A               	movf	sprintf@f,w
  2443  00B3  0084               	movwf	4
  2444  00B4  120A  118A  2400  120A  118A  	fcall	stringtab
  2445  00B9  3A2E               	xorlw	46
  2446  00BA  1D03               	skipz
  2447  00BB  2902               	goto	i1l1511
  2448                           
  2449                           ;doprnt.c: 622: f++;
  2450  00BC  3001               	movlw	1
  2451  00BD  07AA               	addwf	sprintf@f,f
  2452  00BE  1803               	skipnc
  2453  00BF  0AAB               	incf	sprintf@f+1,f
  2454                           
  2455                           ;doprnt.c: 629: {
  2456                           ;doprnt.c: 630: prec = 0;
  2457  00C0  01C2               	clrf	sprintf@prec
  2458  00C1  01C3               	clrf	sprintf@prec+1
  2459  00C2                     i1l131:	
  2460                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2461                           
  2462  00C2  082B               	movf	sprintf@f+1,w
  2463  00C3  00FF               	movwf	127
  2464  00C4  082A               	movf	sprintf@f,w
  2465  00C5  0084               	movwf	4
  2466  00C6  120A  118A  2400  120A  118A  	fcall	stringtab
  2467  00CB  120A  158A  248A  120A  118A  	fcall	_isdigit
  2468  00D0  1C03               	btfss	3,0
  2469  00D1  290E               	goto	i1l1517
  2470                           
  2471                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2472  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  2473  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  2474  00D4  0843               	movf	sprintf@prec+1,w
  2475  00D5  01F1               	clrf	___wmul@multiplier+1
  2476  00D6  07F1               	addwf	___wmul@multiplier+1,f
  2477  00D7  0842               	movf	sprintf@prec,w
  2478  00D8  01F0               	clrf	___wmul@multiplier
  2479  00D9  07F0               	addwf	___wmul@multiplier,f
  2480  00DA  300A               	movlw	10
  2481  00DB  00F2               	movwf	___wmul@multiplicand
  2482  00DC  3000               	movlw	0
  2483  00DD  00F3               	movwf	___wmul@multiplicand+1
  2484  00DE  120A  158A  251C  120A  118A  	fcall	___wmul
  2485  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2486  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  2487  00E5  082B               	movf	sprintf@f+1,w
  2488  00E6  00FF               	movwf	127
  2489  00E7  082A               	movf	sprintf@f,w
  2490  00E8  0084               	movwf	4
  2491  00E9  120A  118A  2400  120A  118A  	fcall	stringtab
  2492  00EE  0770               	addwf	?___wmul,w
  2493  00EF  00B4               	movwf	??_sprintf
  2494  00F0  3000               	movlw	0
  2495  00F1  1803               	skipnc
  2496  00F2  3001               	movlw	1
  2497  00F3  0771               	addwf	?___wmul+1,w
  2498  00F4  00B5               	movwf	??_sprintf+1
  2499  00F5  0834               	movf	??_sprintf,w
  2500  00F6  3ED0               	addlw	208
  2501  00F7  00C2               	movwf	sprintf@prec
  2502  00F8  0835               	movf	??_sprintf+1,w
  2503  00F9  1803               	skipnc
  2504  00FA  3E01               	addlw	1
  2505  00FB  3EFF               	addlw	255
  2506  00FC  00C3               	movwf	sprintf@prec+1
  2507  00FD  3001               	movlw	1
  2508  00FE  07AA               	addwf	sprintf@f,f
  2509  00FF  1803               	skipnc
  2510  0100  0AAB               	incf	sprintf@f+1,f
  2511  0101  28C2               	goto	i1l131
  2512  0102                     i1l1511:	
  2513                           ;doprnt.c: 633: }
  2514                           ;doprnt.c: 634: } else {
  2515                           
  2516                           
  2517                           ;doprnt.c: 635: prec = 0;
  2518  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2519  0103  1303               	bcf	3,6	;RP1=0, select bank0
  2520  0104  01C2               	clrf	sprintf@prec
  2521  0105  01C3               	clrf	sprintf@prec+1
  2522                           
  2523                           ;doprnt.c: 644: switch(c = *f++) {
  2524                           
  2525                           ;doprnt.c: 639: }
  2526                           ;doprnt.c: 642: loop:
  2527  0106  290E               	goto	i1l1517
  2528  0107                     i1l139:	
  2529                           ;doprnt.c: 650: case 'l':
  2530                           
  2531                           ;doprnt.c: 647: goto alldone;
  2532                           
  2533                           ;doprnt.c: 646: case 0:
  2534                           
  2535                           
  2536                           ;doprnt.c: 652: flag |= 0x10;
  2537  0107  1639               	bsf	sprintf@flag,4
  2538                           
  2539                           ;doprnt.c: 653: goto loop;
  2540  0108  290E               	goto	i1l1517
  2541  0109                     i1l1513:	
  2542                           ;doprnt.c: 826: case 'u':
  2543                           
  2544                           ;doprnt.c: 822: continue;
  2545                           
  2546                           ;doprnt.c: 811: default:
  2547                           
  2548                           
  2549                           ;doprnt.c: 827: flag |= 0xC0;
  2550  0109  30C0               	movlw	192
  2551  010A  00B4               	movwf	??_sprintf
  2552  010B  0834               	movf	??_sprintf,w
  2553  010C  04B9               	iorwf	sprintf@flag,f
  2554                           
  2555                           ;doprnt.c: 831: }
  2556                           
  2557                           ;doprnt.c: 828: break;
  2558  010D  292B               	goto	i1l142
  2559  010E                     i1l1517:	
  2560  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2561  010F  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0110  082B               	movf	sprintf@f+1,w
  2563  0111  00B5               	movwf	??_sprintf+1
  2564  0112  082A               	movf	sprintf@f,w
  2565  0113  00B4               	movwf	??_sprintf
  2566  0114  0AAA               	incf	sprintf@f,f
  2567  0115  1903               	skipnz
  2568  0116  0AAB               	incf	sprintf@f+1,f
  2569  0117  0835               	movf	??_sprintf+1,w
  2570  0118  00FF               	movwf	127
  2571  0119  0834               	movf	??_sprintf,w
  2572  011A  0084               	movwf	4
  2573  011B  120A  118A  2400  120A  118A  	fcall	stringtab
  2574  0120  00C4               	movwf	sprintf@c
  2575                           
  2576                           ; Switch size 1, requested type "space"
  2577                           ; Number of cases is 3, Range of values is 0 to 117
  2578                           ; switch strategies available:
  2579                           ; Name         Instructions Cycles
  2580                           ; simple_byte           10     6 (average)
  2581                           ; jumptable            260     6 (fixed)
  2582                           ;	Chosen strategy is simple_byte
  2583  0121  3A00               	xorlw	0	; case 0
  2584  0122  1903               	skipnz
  2585  0123  2A7F               	goto	i1l1577
  2586  0124  3A6C               	xorlw	108	; case 108
  2587  0125  1903               	skipnz
  2588  0126  2907               	goto	i1l139
  2589  0127  3A19               	xorlw	25	; case 117
  2590  0128  1903               	skipnz
  2591  0129  2909               	goto	i1l1513
  2592  012A  282F               	goto	i1l1575
  2593  012B                     i1l142:	
  2594                           
  2595                           ;doprnt.c: 1282: {
  2596                           ;doprnt.c: 1290: if(flag & 0x10)
  2597  012B  1E39               	btfss	sprintf@flag,4
  2598  012C  293D               	goto	i1l1523
  2599                           
  2600                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  2601  012D  083A               	movf	sprintf@ap,w
  2602  012E  0084               	movwf	4
  2603  012F  1383               	bcf	3,7	;select IRP bank0
  2604  0130  0800               	movf	0,w
  2605  0131  00BB               	movwf	sprintf@_val
  2606  0132  0A84               	incf	4,f
  2607  0133  0800               	movf	0,w
  2608  0134  00BC               	movwf	sprintf@_val+1
  2609  0135  0A84               	incf	4,f
  2610  0136  0800               	movf	0,w
  2611  0137  00BD               	movwf	sprintf@_val+2
  2612  0138  0A84               	incf	4,f
  2613  0139  0800               	movf	0,w
  2614  013A  00BE               	movwf	sprintf@_val+3
  2615  013B  3004               	movlw	4
  2616  013C  294C               	goto	L2
  2617  013D                     i1l1523:	
  2618                           
  2619                           ;doprnt.c: 1292: else
  2620                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2621  013D  083A               	movf	sprintf@ap,w
  2622  013E  0084               	movwf	4
  2623  013F  1383               	bcf	3,7	;select IRP bank0
  2624  0140  0800               	movf	0,w
  2625  0141  00B4               	movwf	??_sprintf
  2626  0142  0A84               	incf	4,f
  2627  0143  0800               	movf	0,w
  2628  0144  00B5               	movwf	??_sprintf+1
  2629  0145  0834               	movf	??_sprintf,w
  2630  0146  00BB               	movwf	sprintf@_val
  2631  0147  0835               	movf	??_sprintf+1,w
  2632  0148  00BC               	movwf	sprintf@_val+1
  2633  0149  01BD               	clrf	sprintf@_val+2
  2634  014A  01BE               	clrf	sprintf@_val+3
  2635  014B  3002               	movlw	2
  2636  014C                     L2:	
  2637  014C  00B4               	movwf	??_sprintf
  2638  014D  0834               	movf	??_sprintf,w
  2639  014E  07BA               	addwf	sprintf@ap,f
  2640                           
  2641                           ;doprnt.c: 1296: }
  2642                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  2643  014F  0843               	movf	sprintf@prec+1,w
  2644  0150  0442               	iorwf	sprintf@prec,w
  2645  0151  1D03               	skipz
  2646  0152  295F               	goto	i1l1533
  2647  0153  083E               	movf	sprintf@_val+3,w
  2648  0154  043D               	iorwf	sprintf@_val+2,w
  2649  0155  043C               	iorwf	sprintf@_val+1,w
  2650  0156  043B               	iorwf	sprintf@_val,w
  2651  0157  1D03               	skipz
  2652  0158  295F               	goto	i1l1533
  2653                           
  2654                           ;doprnt.c: 1300: prec++;
  2655  0159  3001               	movlw	1
  2656  015A  07C2               	addwf	sprintf@prec,f
  2657  015B  1803               	skipnc
  2658  015C  0AC3               	incf	sprintf@prec+1,f
  2659  015D  3000               	movlw	0
  2660  015E  07C3               	addwf	sprintf@prec+1,f
  2661  015F                     i1l1533:	
  2662                           
  2663                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2664  015F  01C4               	clrf	sprintf@c
  2665  0160  0AC4               	incf	sprintf@c,f
  2666  0161  0844               	movf	sprintf@c,w
  2667  0162  3A0A               	xorlw	10
  2668  0163  1903               	btfsc	3,2
  2669  0164  29A5               	goto	i1l1545
  2670  0165                     i1l1537:	
  2671                           
  2672                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2673  0165  0844               	movf	sprintf@c,w
  2674  0166  00B4               	movwf	??_sprintf
  2675  0167  3001               	movlw	1
  2676  0168                     u194_25:	
  2677  0168  1003               	clrc
  2678  0169  0DB4               	rlf	??_sprintf,f
  2679  016A  3EFF               	addlw	-1
  2680  016B  1D03               	skipz
  2681  016C  2968               	goto	u194_25
  2682  016D  1003               	clrc
  2683  016E  0D34               	rlf	??_sprintf,w
  2684  016F  3E12               	addlw	low (_dpowers| (0+32768))
  2685  0170  0084               	movwf	4
  2686  0171  3084               	movlw	high (_dpowers| (0+32768))
  2687  0172  1803               	skipnc
  2688  0173  3E01               	addlw	1
  2689  0174  00FF               	movwf	127
  2690  0175  120A  118A  2400  120A  118A  	fcall	stringtab
  2691  017A  00B5               	movwf	??_sprintf+1
  2692  017B  120A  118A  2400  120A  118A  	fcall	stringtab
  2693  0180  00B6               	movwf	??_sprintf+2
  2694  0181  120A  118A  2400  120A  118A  	fcall	stringtab
  2695  0186  00B7               	movwf	??_sprintf+3
  2696  0187  120A  118A  2400  120A  118A  	fcall	stringtab
  2697  018C  00B8               	movwf	??_sprintf+4
  2698  018D  0838               	movf	??_sprintf+4,w
  2699  018E  023E               	subwf	sprintf@_val+3,w
  2700  018F  1D03               	skipz
  2701  0190  299B               	goto	u195_25
  2702  0191  0837               	movf	??_sprintf+3,w
  2703  0192  023D               	subwf	sprintf@_val+2,w
  2704  0193  1D03               	skipz
  2705  0194  299B               	goto	u195_25
  2706  0195  0836               	movf	??_sprintf+2,w
  2707  0196  023C               	subwf	sprintf@_val+1,w
  2708  0197  1D03               	skipz
  2709  0198  299B               	goto	u195_25
  2710  0199  0835               	movf	??_sprintf+1,w
  2711  019A  023B               	subwf	sprintf@_val,w
  2712  019B                     u195_25:	
  2713  019B  1C03               	btfss	3,0
  2714  019C  29A5               	goto	i1l1545
  2715                           
  2716                           ;doprnt.c: 1316: break;
  2717  019D  3001               	movlw	1
  2718  019E  00B4               	movwf	??_sprintf
  2719  019F  0834               	movf	??_sprintf,w
  2720  01A0  07C4               	addwf	sprintf@c,f
  2721  01A1  0844               	movf	sprintf@c,w
  2722  01A2  3A0A               	xorlw	10
  2723  01A3  1D03               	skipz
  2724  01A4  2965               	goto	i1l1537
  2725  01A5                     i1l1545:	
  2726                           
  2727                           ;doprnt.c: 1348: if(c < prec)
  2728  01A5  0844               	movf	sprintf@c,w
  2729  01A6  00B4               	movwf	??_sprintf
  2730  01A7  01B5               	clrf	??_sprintf+1
  2731  01A8  1BB4               	btfsc	??_sprintf,7
  2732  01A9  03B5               	decf	??_sprintf+1,f
  2733  01AA  0835               	movf	??_sprintf+1,w
  2734  01AB  3A80               	xorlw	128
  2735  01AC  00B6               	movwf	??_sprintf+2
  2736  01AD  0843               	movf	sprintf@prec+1,w
  2737  01AE  3A80               	xorlw	128
  2738  01AF  0236               	subwf	??_sprintf+2,w
  2739  01B0  1D03               	skipz
  2740  01B1  29B4               	goto	u197_25
  2741  01B2  0842               	movf	sprintf@prec,w
  2742  01B3  0234               	subwf	??_sprintf,w
  2743  01B4                     u197_25:	
  2744  01B4  1803               	skipnc
  2745  01B5  29BD               	goto	i1l1549
  2746                           
  2747                           ;doprnt.c: 1349: c = prec;
  2748  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  2749  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  2750  01B8  0842               	movf	sprintf@prec,w
  2751  01B9  00B4               	movwf	??_sprintf
  2752  01BA  0834               	movf	??_sprintf,w
  2753  01BB  00C4               	movwf	sprintf@c
  2754  01BC  29D7               	goto	i1l1553
  2755  01BD                     i1l1549:	
  2756                           
  2757                           ;doprnt.c: 1350: else if(prec < c)
  2758  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  2759  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  2760  01BF  0844               	movf	sprintf@c,w
  2761  01C0  00B4               	movwf	??_sprintf
  2762  01C1  01B5               	clrf	??_sprintf+1
  2763  01C2  1BB4               	btfsc	??_sprintf,7
  2764  01C3  03B5               	decf	??_sprintf+1,f
  2765  01C4  0843               	movf	sprintf@prec+1,w
  2766  01C5  3A80               	xorlw	128
  2767  01C6  00B6               	movwf	??_sprintf+2
  2768  01C7  0835               	movf	??_sprintf+1,w
  2769  01C8  3A80               	xorlw	128
  2770  01C9  0236               	subwf	??_sprintf+2,w
  2771  01CA  1D03               	skipz
  2772  01CB  29CE               	goto	u198_25
  2773  01CC  0834               	movf	??_sprintf,w
  2774  01CD  0242               	subwf	sprintf@prec,w
  2775  01CE                     u198_25:	
  2776  01CE  1803               	skipnc
  2777  01CF  29D7               	goto	i1l1553
  2778                           
  2779                           ;doprnt.c: 1351: prec = c;
  2780  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  2781  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  2782  01D2  0844               	movf	sprintf@c,w
  2783  01D3  00C2               	movwf	sprintf@prec
  2784  01D4  01C3               	clrf	sprintf@prec+1
  2785  01D5  1BC2               	btfsc	sprintf@prec,7
  2786  01D6  03C3               	decf	sprintf@prec+1,f
  2787  01D7                     i1l1553:	
  2788                           
  2789                           ;doprnt.c: 1390: if(width > c)
  2790  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  2791  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  2792  01D9  0844               	movf	sprintf@c,w
  2793  01DA  00B4               	movwf	??_sprintf
  2794  01DB  01B5               	clrf	??_sprintf+1
  2795  01DC  1BB4               	btfsc	??_sprintf,7
  2796  01DD  03B5               	decf	??_sprintf+1,f
  2797  01DE  0835               	movf	??_sprintf+1,w
  2798  01DF  3A80               	xorlw	128
  2799  01E0  00B6               	movwf	??_sprintf+2
  2800  01E1  0841               	movf	sprintf@width+1,w
  2801  01E2  3A80               	xorlw	128
  2802  01E3  0236               	subwf	??_sprintf+2,w
  2803  01E4  1D03               	skipz
  2804  01E5  29E8               	goto	u199_25
  2805  01E6  0840               	movf	sprintf@width,w
  2806  01E7  0234               	subwf	??_sprintf,w
  2807  01E8                     u199_25:	
  2808  01E8  1803               	skipnc
  2809  01E9  29F8               	goto	i1l1557
  2810                           
  2811                           ;doprnt.c: 1391: width -= c;
  2812  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2813  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2814  01EC  0844               	movf	sprintf@c,w
  2815  01ED  00B4               	movwf	??_sprintf
  2816  01EE  01B5               	clrf	??_sprintf+1
  2817  01EF  1BB4               	btfsc	??_sprintf,7
  2818  01F0  03B5               	decf	??_sprintf+1,f
  2819  01F1  0834               	movf	??_sprintf,w
  2820  01F2  02C0               	subwf	sprintf@width,f
  2821  01F3  0835               	movf	??_sprintf+1,w
  2822  01F4  1C03               	skipc
  2823  01F5  03C1               	decf	sprintf@width+1,f
  2824  01F6  02C1               	subwf	sprintf@width+1,f
  2825  01F7  29FC               	goto	i1l1559
  2826  01F8                     i1l1557:	
  2827                           
  2828                           ;doprnt.c: 1392: else
  2829                           ;doprnt.c: 1393: width = 0;
  2830  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  2831  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  2832  01FA  01C0               	clrf	sprintf@width
  2833  01FB  01C1               	clrf	sprintf@width+1
  2834  01FC                     i1l1559:	
  2835                           
  2836                           ;doprnt.c: 1431: {
  2837                           ;doprnt.c: 1433: if(width
  2838                           ;doprnt.c: 1437: )
  2839  01FC  0841               	movf	sprintf@width+1,w
  2840  01FD  0440               	iorwf	sprintf@width,w
  2841  01FE  1903               	skipnz
  2842  01FF  2A70               	goto	i1l1573
  2843                           
  2844                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2845                           
  2846                           ;doprnt.c: 1438: do
  2847  0200  3020               	movlw	32
  2848  0201  00B4               	movwf	??_sprintf
  2849  0202  083F               	movf	sprintf@sp,w
  2850  0203  0084               	movwf	4
  2851  0204  0834               	movf	??_sprintf,w
  2852  0205  1383               	bcf	3,7	;select IRP bank0
  2853  0206  0080               	movwf	0
  2854  0207  3001               	movlw	1
  2855  0208  00B4               	movwf	??_sprintf
  2856  0209  0834               	movf	??_sprintf,w
  2857  020A  07BF               	addwf	sprintf@sp,f
  2858                           
  2859                           ;doprnt.c: 1440: while(--width);
  2860  020B  30FF               	movlw	255
  2861  020C  07C0               	addwf	sprintf@width,f
  2862  020D  1803               	skipnc
  2863  020E  0AC1               	incf	sprintf@width+1,f
  2864  020F  30FF               	movlw	255
  2865  0210  07C1               	addwf	sprintf@width+1,f
  2866  0211  29FC               	goto	i1l1559
  2867  0212                     i1l1567:	
  2868                           ;doprnt.c: 1478: }
  2869                           ;doprnt.c: 1483: while(prec--) {
  2870                           
  2871                           
  2872                           ;doprnt.c: 1487: {
  2873                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2874  0212  3000               	movlw	0
  2875  0213  00A3               	movwf	___llmod@divisor+3
  2876  0214  3000               	movlw	0
  2877  0215  00A2               	movwf	___llmod@divisor+2
  2878  0216  3000               	movlw	0
  2879  0217  00A1               	movwf	___llmod@divisor+1
  2880  0218  300A               	movlw	10
  2881  0219  00A0               	movwf	___llmod@divisor
  2882  021A  0842               	movf	sprintf@prec,w
  2883  021B  00B4               	movwf	??_sprintf
  2884  021C  3001               	movlw	1
  2885  021D                     u202_25:	
  2886  021D  1003               	clrc
  2887  021E  0DB4               	rlf	??_sprintf,f
  2888  021F  3EFF               	addlw	-1
  2889  0220  1D03               	skipz
  2890  0221  2A1D               	goto	u202_25
  2891  0222  1003               	clrc
  2892  0223  0D34               	rlf	??_sprintf,w
  2893  0224  3E12               	addlw	low (_dpowers| (0+32768))
  2894  0225  0084               	movwf	4
  2895  0226  3084               	movlw	high (_dpowers| (0+32768))
  2896  0227  1803               	skipnc
  2897  0228  3E01               	addlw	1
  2898  0229  00FF               	movwf	127
  2899  022A  120A  118A  2400  120A  118A  	fcall	stringtab
  2900  022F  00F0               	movwf	___lldiv@divisor
  2901  0230  120A  118A  2400  120A  118A  	fcall	stringtab
  2902  0235  00F1               	movwf	___lldiv@divisor+1
  2903  0236  120A  118A  2400  120A  118A  	fcall	stringtab
  2904  023B  00F2               	movwf	___lldiv@divisor+2
  2905  023C  120A  118A  2400  120A  118A  	fcall	stringtab
  2906  0241  00F3               	movwf	___lldiv@divisor+3
  2907  0242  083E               	movf	sprintf@_val+3,w
  2908  0243  00F7               	movwf	___lldiv@dividend+3
  2909  0244  083D               	movf	sprintf@_val+2,w
  2910  0245  00F6               	movwf	___lldiv@dividend+2
  2911  0246  083C               	movf	sprintf@_val+1,w
  2912  0247  00F5               	movwf	___lldiv@dividend+1
  2913  0248  083B               	movf	sprintf@_val,w
  2914  0249  00F4               	movwf	___lldiv@dividend
  2915  024A  120A  118A  238B  120A  118A  	fcall	___lldiv
  2916  024F  0873               	movf	?___lldiv+3,w
  2917  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0252  00A7               	movwf	___llmod@dividend+3
  2920  0253  0872               	movf	?___lldiv+2,w
  2921  0254  00A6               	movwf	___llmod@dividend+2
  2922  0255  0871               	movf	?___lldiv+1,w
  2923  0256  00A5               	movwf	___llmod@dividend+1
  2924  0257  0870               	movf	?___lldiv,w
  2925  0258  00A4               	movwf	___llmod@dividend
  2926  0259  120A  158A  25E3  120A  118A  	fcall	___llmod
  2927  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2928  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2929  0260  0820               	movf	?___llmod,w
  2930  0261  3E30               	addlw	48
  2931  0262  00B5               	movwf	??_sprintf+1
  2932  0263  0835               	movf	??_sprintf+1,w
  2933  0264  00C4               	movwf	sprintf@c
  2934                           
  2935                           ;doprnt.c: 1532: }
  2936                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2937  0265  0844               	movf	sprintf@c,w
  2938  0266  00B4               	movwf	??_sprintf
  2939  0267  083F               	movf	sprintf@sp,w
  2940  0268  0084               	movwf	4
  2941  0269  0834               	movf	??_sprintf,w
  2942  026A  1383               	bcf	3,7	;select IRP bank0
  2943  026B  0080               	movwf	0
  2944  026C  3001               	movlw	1
  2945  026D  00B4               	movwf	??_sprintf
  2946  026E  0834               	movf	??_sprintf,w
  2947  026F  07BF               	addwf	sprintf@sp,f
  2948  0270                     i1l1573:	
  2949  0270  30FF               	movlw	255
  2950  0271  07C2               	addwf	sprintf@prec,f
  2951  0272  1803               	skipnc
  2952  0273  0AC3               	incf	sprintf@prec+1,f
  2953  0274  30FF               	movlw	255
  2954  0275  07C3               	addwf	sprintf@prec+1,f
  2955  0276  30FF               	movlw	255
  2956  0277  0643               	xorwf	sprintf@prec+1,w
  2957  0278  1D03               	skipz
  2958  0279  2A7C               	goto	u203_25
  2959  027A  30FF               	movlw	255
  2960  027B  0642               	xorwf	sprintf@prec,w
  2961  027C                     u203_25:	
  2962  027C  1903               	btfsc	3,2
  2963  027D  282F               	goto	i1l1575
  2964  027E  2A12               	goto	i1l1567
  2965  027F                     i1l1577:	
  2966                           ;doprnt.c: 1534: }
  2967                           ;doprnt.c: 1542: }
  2968                           ;doprnt.c: 1544: alldone:
  2969                           
  2970                           
  2971                           ;doprnt.c: 1547: *sp = 0;
  2972  027F  083F               	movf	sprintf@sp,w
  2973  0280  0084               	movwf	4
  2974  0281  1383               	bcf	3,7	;select IRP bank0
  2975  0282  0180               	clrf	0
  2976  0283  0008               	return
  2977  0284                     __end_of_sprintf:	
  2978                           ;doprnt.c: 1549: return 0;
  2979                           ;	Return value of _sprintf is never used
  2980                           
  2981                           
  2982                           	psect	text9
  2983  0C8A                     __ptext9:	
  2984 ;; *************** function _isdigit *****************
  2985 ;; Defined at:
  2986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  c               1    wreg     unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  c               1    1[COMMON] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;		None               void
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3000 ;;      Params:         0       0       0       0       0
  3001 ;;      Locals:         2       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0
  3003 ;;      Totals:         2       0       0       0       0
  3004 ;;Total ram usage:        2 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_sprintf
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           
  3014                           ;psect for function _isdigit
  3015  0C8A                     _isdigit:	
  3016                           
  3017                           ;incstack = 0
  3018                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3019                           ;isdigit@c stored from wreg
  3020  0C8A  00F1               	movwf	isdigit@c
  3021  0C8B  01F0               	clrf	_isdigit$602
  3022  0C8C  303A               	movlw	58
  3023  0C8D  0271               	subwf	isdigit@c,w
  3024  0C8E  1803               	skipnc
  3025  0C8F  2C96               	goto	i1l1339
  3026  0C90  3030               	movlw	48
  3027  0C91  0271               	subwf	isdigit@c,w
  3028  0C92  1C03               	skipc
  3029  0C93  2C96               	goto	i1l1339
  3030  0C94  01F0               	clrf	_isdigit$602
  3031  0C95  0AF0               	incf	_isdigit$602,f
  3032  0C96                     i1l1339:	
  3033  0C96  0C70               	rrf	_isdigit$602,w
  3034  0C97  0008               	return
  3035  0C98                     __end_of_isdigit:	
  3036                           
  3037                           	psect	text10
  3038  0D1C                     __ptext10:	
  3039 ;; *************** function ___wmul *****************
  3040 ;; Defined at:
  3041 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  multiplier      2    0[COMMON] unsigned int 
  3044 ;;  multiplicand    2    2[COMMON] unsigned int 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  product         2    4[COMMON] unsigned int 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  2    0[COMMON] unsigned int 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3056 ;;      Params:         4       0       0       0       0
  3057 ;;      Locals:         2       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0
  3059 ;;      Totals:         6       0       0       0       0
  3060 ;;Total ram usage:        6 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_sprintf
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function ___wmul
  3071  0D1C                     ___wmul:	
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3075  0D1C  01F4               	clrf	___wmul@product
  3076  0D1D  01F5               	clrf	___wmul@product+1
  3077  0D1E                     i1l1345:	
  3078  0D1E  1C70               	btfss	___wmul@multiplier,0
  3079  0D1F  2D26               	goto	i1l245
  3080  0D20  0872               	movf	___wmul@multiplicand,w
  3081  0D21  07F4               	addwf	___wmul@product,f
  3082  0D22  1803               	skipnc
  3083  0D23  0AF5               	incf	___wmul@product+1,f
  3084  0D24  0873               	movf	___wmul@multiplicand+1,w
  3085  0D25  07F5               	addwf	___wmul@product+1,f
  3086  0D26                     i1l245:	
  3087  0D26  3001               	movlw	1
  3088  0D27                     u143_25:	
  3089  0D27  1003               	clrc
  3090  0D28  0DF2               	rlf	___wmul@multiplicand,f
  3091  0D29  0DF3               	rlf	___wmul@multiplicand+1,f
  3092  0D2A  3EFF               	addlw	-1
  3093  0D2B  1D03               	skipz
  3094  0D2C  2D27               	goto	u143_25
  3095  0D2D  3001               	movlw	1
  3096  0D2E                     u144_25:	
  3097  0D2E  1003               	clrc
  3098  0D2F  0CF1               	rrf	___wmul@multiplier+1,f
  3099  0D30  0CF0               	rrf	___wmul@multiplier,f
  3100  0D31  3EFF               	addlw	-1
  3101  0D32  1D03               	skipz
  3102  0D33  2D2E               	goto	u144_25
  3103  0D34  0871               	movf	___wmul@multiplier+1,w
  3104  0D35  0470               	iorwf	___wmul@multiplier,w
  3105  0D36  1D03               	skipz
  3106  0D37  2D1E               	goto	i1l1345
  3107  0D38  0875               	movf	___wmul@product+1,w
  3108  0D39  01F1               	clrf	?___wmul+1
  3109  0D3A  07F1               	addwf	?___wmul+1,f
  3110  0D3B  0874               	movf	___wmul@product,w
  3111  0D3C  01F0               	clrf	?___wmul
  3112  0D3D  07F0               	addwf	?___wmul,f
  3113  0D3E  0008               	return
  3114  0D3F                     __end_of___wmul:	
  3115                           
  3116                           	psect	text11
  3117  0DE3                     __ptext11:	
  3118 ;; *************** function ___llmod *****************
  3119 ;; Defined at:
  3120 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  divisor         4    0[BANK0 ] unsigned long 
  3123 ;;  dividend        4    4[BANK0 ] unsigned long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  counter         1    9[BANK0 ] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  4    0[BANK0 ] unsigned long 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3135 ;;      Params:         0       8       0       0       0
  3136 ;;      Locals:         0       1       0       0       0
  3137 ;;      Temps:          0       1       0       0       0
  3138 ;;      Totals:         0      10       0       0       0
  3139 ;;Total ram usage:       10 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_sprintf
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function ___llmod
  3150  0DE3                     ___llmod:	
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3154  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  3156  0DE5  0823               	movf	___llmod@divisor+3,w
  3157  0DE6  0422               	iorwf	___llmod@divisor+2,w
  3158  0DE7  0421               	iorwf	___llmod@divisor+1,w
  3159  0DE8  0420               	iorwf	___llmod@divisor,w
  3160  0DE9  1903               	skipnz
  3161  0DEA  2E28               	goto	i1l1467
  3162  0DEB  01A9               	clrf	___llmod@counter
  3163  0DEC  0AA9               	incf	___llmod@counter,f
  3164  0DED                     i1l1457:	
  3165  0DED  1BA3               	btfsc	___llmod@divisor+3,7
  3166  0DEE  2DFD               	goto	i1l1459
  3167  0DEF  3001               	movlw	1
  3168  0DF0  00A8               	movwf	??___llmod
  3169  0DF1                     u178_25:	
  3170  0DF1  1003               	clrc
  3171  0DF2  0DA0               	rlf	___llmod@divisor,f
  3172  0DF3  0DA1               	rlf	___llmod@divisor+1,f
  3173  0DF4  0DA2               	rlf	___llmod@divisor+2,f
  3174  0DF5  0DA3               	rlf	___llmod@divisor+3,f
  3175  0DF6  0BA8               	decfsz	??___llmod,f
  3176  0DF7  2DF1               	goto	u178_25
  3177  0DF8  3001               	movlw	1
  3178  0DF9  00A8               	movwf	??___llmod
  3179  0DFA  0828               	movf	??___llmod,w
  3180  0DFB  07A9               	addwf	___llmod@counter,f
  3181  0DFC  2DED               	goto	i1l1457
  3182  0DFD                     i1l1459:	
  3183  0DFD  0823               	movf	___llmod@divisor+3,w
  3184  0DFE  0227               	subwf	___llmod@dividend+3,w
  3185  0DFF  1D03               	skipz
  3186  0E00  2E0B               	goto	u180_25
  3187  0E01  0822               	movf	___llmod@divisor+2,w
  3188  0E02  0226               	subwf	___llmod@dividend+2,w
  3189  0E03  1D03               	skipz
  3190  0E04  2E0B               	goto	u180_25
  3191  0E05  0821               	movf	___llmod@divisor+1,w
  3192  0E06  0225               	subwf	___llmod@dividend+1,w
  3193  0E07  1D03               	skipz
  3194  0E08  2E0B               	goto	u180_25
  3195  0E09  0820               	movf	___llmod@divisor,w
  3196  0E0A  0224               	subwf	___llmod@dividend,w
  3197  0E0B                     u180_25:	
  3198  0E0B  1C03               	skipc
  3199  0E0C  2E1B               	goto	i1l1463
  3200  0E0D  0820               	movf	___llmod@divisor,w
  3201  0E0E  02A4               	subwf	___llmod@dividend,f
  3202  0E0F  0821               	movf	___llmod@divisor+1,w
  3203  0E10  1C03               	skipc
  3204  0E11  0F21               	incfsz	___llmod@divisor+1,w
  3205  0E12  02A5               	subwf	___llmod@dividend+1,f
  3206  0E13  0822               	movf	___llmod@divisor+2,w
  3207  0E14  1C03               	skipc
  3208  0E15  0F22               	incfsz	___llmod@divisor+2,w
  3209  0E16  02A6               	subwf	___llmod@dividend+2,f
  3210  0E17  0823               	movf	___llmod@divisor+3,w
  3211  0E18  1C03               	skipc
  3212  0E19  0F23               	incfsz	___llmod@divisor+3,w
  3213  0E1A  02A7               	subwf	___llmod@dividend+3,f
  3214  0E1B                     i1l1463:	
  3215  0E1B  3001               	movlw	1
  3216  0E1C                     u181_25:	
  3217  0E1C  1003               	clrc
  3218  0E1D  0CA3               	rrf	___llmod@divisor+3,f
  3219  0E1E  0CA2               	rrf	___llmod@divisor+2,f
  3220  0E1F  0CA1               	rrf	___llmod@divisor+1,f
  3221  0E20  0CA0               	rrf	___llmod@divisor,f
  3222  0E21  3EFF               	addlw	-1
  3223  0E22  1D03               	skipz
  3224  0E23  2E1C               	goto	u181_25
  3225  0E24  3001               	movlw	1
  3226  0E25  02A9               	subwf	___llmod@counter,f
  3227  0E26  1D03               	btfss	3,2
  3228  0E27  2DFD               	goto	i1l1459
  3229  0E28                     i1l1467:	
  3230  0E28  0827               	movf	___llmod@dividend+3,w
  3231  0E29  00A3               	movwf	?___llmod+3
  3232  0E2A  0826               	movf	___llmod@dividend+2,w
  3233  0E2B  00A2               	movwf	?___llmod+2
  3234  0E2C  0825               	movf	___llmod@dividend+1,w
  3235  0E2D  00A1               	movwf	?___llmod+1
  3236  0E2E  0824               	movf	___llmod@dividend,w
  3237  0E2F  00A0               	movwf	?___llmod
  3238  0E30  0008               	return
  3239  0E31                     __end_of___llmod:	
  3240                           
  3241                           	psect	text12
  3242  038B                     __ptext12:	
  3243 ;; *************** function ___lldiv *****************
  3244 ;; Defined at:
  3245 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  divisor         4    0[COMMON] unsigned long 
  3248 ;;  dividend        4    4[COMMON] unsigned long 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  quotient        4    9[COMMON] unsigned long 
  3251 ;;  counter         1   13[COMMON] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  4    0[COMMON] unsigned long 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         8       0       0       0       0
  3262 ;;      Locals:         5       0       0       0       0
  3263 ;;      Temps:          1       0       0       0       0
  3264 ;;      Totals:        14       0       0       0       0
  3265 ;;Total ram usage:       14 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_sprintf
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function ___lldiv
  3276  038B                     ___lldiv:	
  3277                           
  3278                           ;incstack = 0
  3279                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3280  038B  3000               	movlw	0
  3281  038C  00FC               	movwf	___lldiv@quotient+3
  3282  038D  3000               	movlw	0
  3283  038E  00FB               	movwf	___lldiv@quotient+2
  3284  038F  3000               	movlw	0
  3285  0390  00FA               	movwf	___lldiv@quotient+1
  3286  0391  3000               	movlw	0
  3287  0392  00F9               	movwf	___lldiv@quotient
  3288  0393  0873               	movf	___lldiv@divisor+3,w
  3289  0394  0472               	iorwf	___lldiv@divisor+2,w
  3290  0395  0471               	iorwf	___lldiv@divisor+1,w
  3291  0396  0470               	iorwf	___lldiv@divisor,w
  3292  0397  1903               	skipnz
  3293  0398  2BE0               	goto	i1l1447
  3294  0399  01FD               	clrf	___lldiv@counter
  3295  039A  0AFD               	incf	___lldiv@counter,f
  3296  039B                     i1l1433:	
  3297  039B  1BF3               	btfsc	___lldiv@divisor+3,7
  3298  039C  2BAB               	goto	i1l1435
  3299  039D  3001               	movlw	1
  3300  039E  00F8               	movwf	??___lldiv
  3301  039F                     u171_25:	
  3302  039F  1003               	clrc
  3303  03A0  0DF0               	rlf	___lldiv@divisor,f
  3304  03A1  0DF1               	rlf	___lldiv@divisor+1,f
  3305  03A2  0DF2               	rlf	___lldiv@divisor+2,f
  3306  03A3  0DF3               	rlf	___lldiv@divisor+3,f
  3307  03A4  0BF8               	decfsz	??___lldiv,f
  3308  03A5  2B9F               	goto	u171_25
  3309  03A6  3001               	movlw	1
  3310  03A7  00F8               	movwf	??___lldiv
  3311  03A8  0878               	movf	??___lldiv,w
  3312  03A9  07FD               	addwf	___lldiv@counter,f
  3313  03AA  2B9B               	goto	i1l1433
  3314  03AB                     i1l1435:	
  3315  03AB  3001               	movlw	1
  3316  03AC  00F8               	movwf	??___lldiv
  3317  03AD                     u173_25:	
  3318  03AD  1003               	clrc
  3319  03AE  0DF9               	rlf	___lldiv@quotient,f
  3320  03AF  0DFA               	rlf	___lldiv@quotient+1,f
  3321  03B0  0DFB               	rlf	___lldiv@quotient+2,f
  3322  03B1  0DFC               	rlf	___lldiv@quotient+3,f
  3323  03B2  0BF8               	decfsz	??___lldiv,f
  3324  03B3  2BAD               	goto	u173_25
  3325  03B4  0873               	movf	___lldiv@divisor+3,w
  3326  03B5  0277               	subwf	___lldiv@dividend+3,w
  3327  03B6  1D03               	skipz
  3328  03B7  2BC2               	goto	u174_25
  3329  03B8  0872               	movf	___lldiv@divisor+2,w
  3330  03B9  0276               	subwf	___lldiv@dividend+2,w
  3331  03BA  1D03               	skipz
  3332  03BB  2BC2               	goto	u174_25
  3333  03BC  0871               	movf	___lldiv@divisor+1,w
  3334  03BD  0275               	subwf	___lldiv@dividend+1,w
  3335  03BE  1D03               	skipz
  3336  03BF  2BC2               	goto	u174_25
  3337  03C0  0870               	movf	___lldiv@divisor,w
  3338  03C1  0274               	subwf	___lldiv@dividend,w
  3339  03C2                     u174_25:	
  3340  03C2  1C03               	skipc
  3341  03C3  2BD3               	goto	i1l1443
  3342  03C4  0870               	movf	___lldiv@divisor,w
  3343  03C5  02F4               	subwf	___lldiv@dividend,f
  3344  03C6  0871               	movf	___lldiv@divisor+1,w
  3345  03C7  1C03               	skipc
  3346  03C8  0F71               	incfsz	___lldiv@divisor+1,w
  3347  03C9  02F5               	subwf	___lldiv@dividend+1,f
  3348  03CA  0872               	movf	___lldiv@divisor+2,w
  3349  03CB  1C03               	skipc
  3350  03CC  0F72               	incfsz	___lldiv@divisor+2,w
  3351  03CD  02F6               	subwf	___lldiv@dividend+2,f
  3352  03CE  0873               	movf	___lldiv@divisor+3,w
  3353  03CF  1C03               	skipc
  3354  03D0  0F73               	incfsz	___lldiv@divisor+3,w
  3355  03D1  02F7               	subwf	___lldiv@dividend+3,f
  3356  03D2  1479               	bsf	___lldiv@quotient,0
  3357  03D3                     i1l1443:	
  3358  03D3  3001               	movlw	1
  3359  03D4                     u175_25:	
  3360  03D4  1003               	clrc
  3361  03D5  0CF3               	rrf	___lldiv@divisor+3,f
  3362  03D6  0CF2               	rrf	___lldiv@divisor+2,f
  3363  03D7  0CF1               	rrf	___lldiv@divisor+1,f
  3364  03D8  0CF0               	rrf	___lldiv@divisor,f
  3365  03D9  3EFF               	addlw	-1
  3366  03DA  1D03               	skipz
  3367  03DB  2BD4               	goto	u175_25
  3368  03DC  3001               	movlw	1
  3369  03DD  02FD               	subwf	___lldiv@counter,f
  3370  03DE  1D03               	btfss	3,2
  3371  03DF  2BAB               	goto	i1l1435
  3372  03E0                     i1l1447:	
  3373  03E0  087C               	movf	___lldiv@quotient+3,w
  3374  03E1  00F3               	movwf	?___lldiv+3
  3375  03E2  087B               	movf	___lldiv@quotient+2,w
  3376  03E3  00F2               	movwf	?___lldiv+2
  3377  03E4  087A               	movf	___lldiv@quotient+1,w
  3378  03E5  00F1               	movwf	?___lldiv+1
  3379  03E6  0879               	movf	___lldiv@quotient,w
  3380  03E7  00F0               	movwf	?___lldiv
  3381  03E8  0008               	return
  3382  03E9                     __end_of___lldiv:	
  3383                           
  3384                           	psect	text13
  3385  0D3F                     __ptext13:	
  3386 ;; *************** function ___lltoft *****************
  3387 ;; Defined at:
  3388 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  c               4    8[COMMON] unsigned long 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  exp             1   13[COMMON] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  3    8[COMMON] float 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, pclath, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3402 ;;      Params:         4       0       0       0       0
  3403 ;;      Locals:         1       0       0       0       0
  3404 ;;      Temps:          1       0       0       0       0
  3405 ;;      Totals:         6       0       0       0       0
  3406 ;;Total ram usage:        6 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    1
  3409 ;; This function calls:
  3410 ;;		___ftpack
  3411 ;; This function is called by:
  3412 ;;		_ftoa
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function ___lltoft
  3418  0D3F                     ___lltoft:	
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  3422  0D3F  308E               	movlw	142
  3423  0D40  00FC               	movwf	??___lltoft
  3424  0D41  087C               	movf	??___lltoft,w
  3425  0D42  00FD               	movwf	___lltoft@exp
  3426  0D43                     i1l1753:	
  3427  0D43  30FF               	movlw	255
  3428  0D44  057B               	andwf	___lltoft@c+3,w
  3429  0D45  1903               	btfsc	3,2
  3430  0D46  2D55               	goto	i1l1755
  3431  0D47  3001               	movlw	1
  3432  0D48                     u245_25:	
  3433  0D48  1003               	clrc
  3434  0D49  0CFB               	rrf	___lltoft@c+3,f
  3435  0D4A  0CFA               	rrf	___lltoft@c+2,f
  3436  0D4B  0CF9               	rrf	___lltoft@c+1,f
  3437  0D4C  0CF8               	rrf	___lltoft@c,f
  3438  0D4D  3EFF               	addlw	-1
  3439  0D4E  1D03               	skipz
  3440  0D4F  2D48               	goto	u245_25
  3441  0D50  3001               	movlw	1
  3442  0D51  00FC               	movwf	??___lltoft
  3443  0D52  087C               	movf	??___lltoft,w
  3444  0D53  07FD               	addwf	___lltoft@exp,f
  3445  0D54  2D43               	goto	i1l1753
  3446  0D55                     i1l1755:	
  3447  0D55  0878               	movf	___lltoft@c,w
  3448  0D56  00F0               	movwf	___ftpack@arg
  3449  0D57  0879               	movf	___lltoft@c+1,w
  3450  0D58  00F1               	movwf	___ftpack@arg+1
  3451  0D59  087A               	movf	___lltoft@c+2,w
  3452  0D5A  00F2               	movwf	___ftpack@arg+2
  3453  0D5B  087D               	movf	___lltoft@exp,w
  3454  0D5C  00FC               	movwf	??___lltoft
  3455  0D5D  087C               	movf	??___lltoft,w
  3456  0D5E  00F3               	movwf	___ftpack@exp
  3457  0D5F  01F4               	clrf	___ftpack@sign
  3458  0D60  120A  118A  278B   	fcall	___ftpack
  3459  0D63  0870               	movf	?___ftpack,w
  3460  0D64  00F8               	movwf	?___lltoft
  3461  0D65  0871               	movf	?___ftpack+1,w
  3462  0D66  00F9               	movwf	?___lltoft+1
  3463  0D67  0872               	movf	?___ftpack+2,w
  3464  0D68  00FA               	movwf	?___lltoft+2
  3465  0D69  0008               	return
  3466  0D6A                     __end_of___lltoft:	
  3467                           
  3468                           	psect	text14
  3469  0EE3                     __ptext14:	
  3470 ;; *************** function ___fttol *****************
  3471 ;; Defined at:
  3472 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  f1              3   16[BANK0 ] float 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  lval            4   25[BANK0 ] unsigned long 
  3477 ;;  exp1            1   29[BANK0 ] unsigned char 
  3478 ;;  sign1           1   24[BANK0 ] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  4   16[BANK0 ] long 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3488 ;;      Params:         0       4       0       0       0
  3489 ;;      Locals:         0       6       0       0       0
  3490 ;;      Temps:          0       4       0       0       0
  3491 ;;      Totals:         0      14       0       0       0
  3492 ;;Total ram usage:       14 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_ftoa
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function ___fttol
  3503  0EE3                     ___fttol:	
  3504                           
  3505                           ;incstack = 0
  3506                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3507  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0EE5  0830               	movf	___fttol@f1,w
  3510  0EE6  00B4               	movwf	??___fttol
  3511  0EE7  0831               	movf	___fttol@f1+1,w
  3512  0EE8  00B5               	movwf	??___fttol+1
  3513  0EE9  0832               	movf	___fttol@f1+2,w
  3514  0EEA  00B6               	movwf	??___fttol+2
  3515  0EEB  1003               	clrc
  3516  0EEC  0D35               	rlf	??___fttol+1,w
  3517  0EED  0D36               	rlf	??___fttol+2,w
  3518  0EEE  00B7               	movwf	??___fttol+3
  3519  0EEF  0837               	movf	??___fttol+3,w
  3520  0EF0  00BD               	movwf	___fttol@exp1
  3521  0EF1  08BD               	movf	___fttol@exp1,f
  3522  0EF2  1D03               	skipz
  3523  0EF3  2EFD               	goto	i1l1711
  3524  0EF4  3000               	movlw	0
  3525  0EF5  00B3               	movwf	?___fttol+3
  3526  0EF6  3000               	movlw	0
  3527  0EF7  00B2               	movwf	?___fttol+2
  3528  0EF8  3000               	movlw	0
  3529  0EF9  00B1               	movwf	?___fttol+1
  3530  0EFA  3000               	movlw	0
  3531  0EFB  00B0               	movwf	?___fttol
  3532  0EFC  0008               	return
  3533  0EFD                     i1l1711:	
  3534  0EFD  0830               	movf	___fttol@f1,w
  3535  0EFE  00B4               	movwf	??___fttol
  3536  0EFF  0831               	movf	___fttol@f1+1,w
  3537  0F00  00B5               	movwf	??___fttol+1
  3538  0F01  0832               	movf	___fttol@f1+2,w
  3539  0F02  00B6               	movwf	??___fttol+2
  3540  0F03  3017               	movlw	23
  3541  0F04                     u236_25:	
  3542  0F04  1003               	clrc
  3543  0F05  0CB6               	rrf	??___fttol+2,f
  3544  0F06  0CB5               	rrf	??___fttol+1,f
  3545  0F07  0CB4               	rrf	??___fttol,f
  3546  0F08  3EFF               	addlw	-1
  3547  0F09  1D03               	skipz
  3548  0F0A  2F04               	goto	u236_25
  3549  0F0B  0834               	movf	??___fttol,w
  3550  0F0C  00B7               	movwf	??___fttol+3
  3551  0F0D  0837               	movf	??___fttol+3,w
  3552  0F0E  00B8               	movwf	___fttol@sign1
  3553  0F0F  17B1               	bsf	___fttol@f1+1,7
  3554  0F10  30FF               	movlw	255
  3555  0F11  05B0               	andwf	___fttol@f1,f
  3556  0F12  30FF               	movlw	255
  3557  0F13  05B1               	andwf	___fttol@f1+1,f
  3558  0F14  3000               	movlw	0
  3559  0F15  05B2               	andwf	___fttol@f1+2,f
  3560  0F16  0830               	movf	___fttol@f1,w
  3561  0F17  00B9               	movwf	___fttol@lval
  3562  0F18  0831               	movf	___fttol@f1+1,w
  3563  0F19  00BA               	movwf	___fttol@lval+1
  3564  0F1A  0832               	movf	___fttol@f1+2,w
  3565  0F1B  00BB               	movwf	___fttol@lval+2
  3566  0F1C  01BC               	clrf	___fttol@lval+3
  3567  0F1D  308E               	movlw	142
  3568  0F1E  02BD               	subwf	___fttol@exp1,f
  3569  0F1F  1FBD               	btfss	___fttol@exp1,7
  3570  0F20  2F3F               	goto	i1l1731
  3571  0F21  083D               	movf	___fttol@exp1,w
  3572  0F22  3A80               	xorlw	128
  3573  0F23  3E8F               	addlw	143
  3574  0F24  1803               	skipnc
  3575  0F25  2F2F               	goto	i1l1729
  3576  0F26  3000               	movlw	0
  3577  0F27  00B3               	movwf	?___fttol+3
  3578  0F28  3000               	movlw	0
  3579  0F29  00B2               	movwf	?___fttol+2
  3580  0F2A  3000               	movlw	0
  3581  0F2B  00B1               	movwf	?___fttol+1
  3582  0F2C  3000               	movlw	0
  3583  0F2D  00B0               	movwf	?___fttol
  3584  0F2E  0008               	return
  3585  0F2F                     i1l1729:	
  3586  0F2F  3001               	movlw	1
  3587  0F30                     u239_25:	
  3588  0F30  1003               	clrc
  3589  0F31  0CBC               	rrf	___fttol@lval+3,f
  3590  0F32  0CBB               	rrf	___fttol@lval+2,f
  3591  0F33  0CBA               	rrf	___fttol@lval+1,f
  3592  0F34  0CB9               	rrf	___fttol@lval,f
  3593  0F35  3EFF               	addlw	-1
  3594  0F36  1D03               	skipz
  3595  0F37  2F30               	goto	u239_25
  3596  0F38  3001               	movlw	1
  3597  0F39  00B4               	movwf	??___fttol
  3598  0F3A  0834               	movf	??___fttol,w
  3599  0F3B  07BD               	addwf	___fttol@exp1,f
  3600  0F3C  1903               	btfsc	3,2
  3601  0F3D  2F5A               	goto	i1l1741
  3602  0F3E  2F2F               	goto	i1l1729
  3603  0F3F                     i1l1731:	
  3604  0F3F  3018               	movlw	24
  3605  0F40  023D               	subwf	___fttol@exp1,w
  3606  0F41  1C03               	skipc
  3607  0F42  2F57               	goto	i1l1739
  3608  0F43  3000               	movlw	0
  3609  0F44  00B3               	movwf	?___fttol+3
  3610  0F45  3000               	movlw	0
  3611  0F46  00B2               	movwf	?___fttol+2
  3612  0F47  3000               	movlw	0
  3613  0F48  00B1               	movwf	?___fttol+1
  3614  0F49  3000               	movlw	0
  3615  0F4A  00B0               	movwf	?___fttol
  3616  0F4B  0008               	return
  3617  0F4C                     i1l1737:	
  3618  0F4C  3001               	movlw	1
  3619  0F4D  00B4               	movwf	??___fttol
  3620  0F4E                     u242_25:	
  3621  0F4E  1003               	clrc
  3622  0F4F  0DB9               	rlf	___fttol@lval,f
  3623  0F50  0DBA               	rlf	___fttol@lval+1,f
  3624  0F51  0DBB               	rlf	___fttol@lval+2,f
  3625  0F52  0DBC               	rlf	___fttol@lval+3,f
  3626  0F53  0BB4               	decfsz	??___fttol,f
  3627  0F54  2F4E               	goto	u242_25
  3628  0F55  3001               	movlw	1
  3629  0F56  02BD               	subwf	___fttol@exp1,f
  3630  0F57                     i1l1739:	
  3631  0F57  08BD               	movf	___fttol@exp1,f
  3632  0F58  1D03               	skipz
  3633  0F59  2F4C               	goto	i1l1737
  3634  0F5A                     i1l1741:	
  3635  0F5A  0838               	movf	___fttol@sign1,w
  3636  0F5B  1903               	btfsc	3,2
  3637  0F5C  2F68               	goto	i1l1745
  3638  0F5D  09B9               	comf	___fttol@lval,f
  3639  0F5E  09BA               	comf	___fttol@lval+1,f
  3640  0F5F  09BB               	comf	___fttol@lval+2,f
  3641  0F60  09BC               	comf	___fttol@lval+3,f
  3642  0F61  0AB9               	incf	___fttol@lval,f
  3643  0F62  1903               	skipnz
  3644  0F63  0ABA               	incf	___fttol@lval+1,f
  3645  0F64  1903               	skipnz
  3646  0F65  0ABB               	incf	___fttol@lval+2,f
  3647  0F66  1903               	skipnz
  3648  0F67  0ABC               	incf	___fttol@lval+3,f
  3649  0F68                     i1l1745:	
  3650  0F68  083C               	movf	___fttol@lval+3,w
  3651  0F69  00B3               	movwf	?___fttol+3
  3652  0F6A  083B               	movf	___fttol@lval+2,w
  3653  0F6B  00B2               	movwf	?___fttol+2
  3654  0F6C  083A               	movf	___fttol@lval+1,w
  3655  0F6D  00B1               	movwf	?___fttol+1
  3656  0F6E  0839               	movf	___fttol@lval,w
  3657  0F6F  00B0               	movwf	?___fttol
  3658  0F70  0008               	return
  3659  0F71                     __end_of___fttol:	
  3660                           
  3661                           	psect	text15
  3662  0CDD                     __ptext15:	
  3663 ;; *************** function ___ftsub *****************
  3664 ;; Defined at:
  3665 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  f2              3    7[BANK0 ] float 
  3668 ;;  f1              3   10[BANK0 ] float 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  3    7[BANK0 ] float 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0, pclath, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3680 ;;      Params:         0       6       0       0       0
  3681 ;;      Locals:         0       0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0
  3683 ;;      Totals:         0       6       0       0       0
  3684 ;;Total ram usage:        6 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    2
  3687 ;; This function calls:
  3688 ;;		___ftadd
  3689 ;; This function is called by:
  3690 ;;		_ftoa
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           
  3695                           ;psect for function ___ftsub
  3696  0CDD                     ___ftsub:	
  3697                           
  3698                           ;incstack = 0
  3699                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3700  0CDD  3080               	movlw	128
  3701  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  3702  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  3703  0CE0  06A9               	xorwf	___ftsub@f2+2,f
  3704  0CE1  082A               	movf	___ftsub@f1,w
  3705  0CE2  00F8               	movwf	___ftadd@f1
  3706  0CE3  082B               	movf	___ftsub@f1+1,w
  3707  0CE4  00F9               	movwf	___ftadd@f1+1
  3708  0CE5  082C               	movf	___ftsub@f1+2,w
  3709  0CE6  00FA               	movwf	___ftadd@f1+2
  3710  0CE7  0827               	movf	___ftsub@f2,w
  3711  0CE8  00FB               	movwf	___ftadd@f2
  3712  0CE9  0828               	movf	___ftsub@f2+1,w
  3713  0CEA  00FC               	movwf	___ftadd@f2+1
  3714  0CEB  0829               	movf	___ftsub@f2+2,w
  3715  0CEC  00FD               	movwf	___ftadd@f2+2
  3716  0CED  120A  118A  2284   	fcall	___ftadd
  3717  0CF0  0878               	movf	?___ftadd,w
  3718  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  3719  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  3720  0CF3  00A7               	movwf	?___ftsub
  3721  0CF4  0879               	movf	?___ftadd+1,w
  3722  0CF5  00A8               	movwf	?___ftsub+1
  3723  0CF6  087A               	movf	?___ftadd+2,w
  3724  0CF7  00A9               	movwf	?___ftsub+2
  3725  0CF8  0008               	return
  3726  0CF9                     __end_of___ftsub:	
  3727                           
  3728                           	psect	text16
  3729  0284                     __ptext16:	
  3730 ;; *************** function ___ftadd *****************
  3731 ;; Defined at:
  3732 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  f1              3    8[COMMON] float 
  3735 ;;  f2              3   11[COMMON] float 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  exp1            1    6[BANK0 ] unsigned char 
  3738 ;;  exp2            1    5[BANK0 ] unsigned char 
  3739 ;;  sign            1    4[BANK0 ] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  3    8[COMMON] float 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, pclath, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3749 ;;      Params:         6       0       0       0       0
  3750 ;;      Locals:         0       3       0       0       0
  3751 ;;      Temps:          0       4       0       0       0
  3752 ;;      Totals:         6       7       0       0       0
  3753 ;;Total ram usage:       13 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    1
  3756 ;; This function calls:
  3757 ;;		___ftpack
  3758 ;; This function is called by:
  3759 ;;		___ftsub
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           
  3764                           ;psect for function ___ftadd
  3765  0284                     ___ftadd:	
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3769  0284  0878               	movf	___ftadd@f1,w
  3770  0285  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0286  1303               	bcf	3,6	;RP1=0, select bank0
  3772  0287  00A0               	movwf	??___ftadd
  3773  0288  0879               	movf	___ftadd@f1+1,w
  3774  0289  00A1               	movwf	??___ftadd+1
  3775  028A  087A               	movf	___ftadd@f1+2,w
  3776  028B  00A2               	movwf	??___ftadd+2
  3777  028C  1003               	clrc
  3778  028D  0D21               	rlf	??___ftadd+1,w
  3779  028E  0D22               	rlf	??___ftadd+2,w
  3780  028F  00A3               	movwf	??___ftadd+3
  3781  0290  0823               	movf	??___ftadd+3,w
  3782  0291  00A6               	movwf	___ftadd@exp1
  3783  0292  087B               	movf	___ftadd@f2,w
  3784  0293  00A0               	movwf	??___ftadd
  3785  0294  087C               	movf	___ftadd@f2+1,w
  3786  0295  00A1               	movwf	??___ftadd+1
  3787  0296  087D               	movf	___ftadd@f2+2,w
  3788  0297  00A2               	movwf	??___ftadd+2
  3789  0298  1003               	clrc
  3790  0299  0D21               	rlf	??___ftadd+1,w
  3791  029A  0D22               	rlf	??___ftadd+2,w
  3792  029B  00A3               	movwf	??___ftadd+3
  3793  029C  0823               	movf	??___ftadd+3,w
  3794  029D  00A5               	movwf	___ftadd@exp2
  3795  029E  0826               	movf	___ftadd@exp1,w
  3796  029F  1903               	btfsc	3,2
  3797  02A0  2AAD               	goto	i1l1363
  3798  02A1  0825               	movf	___ftadd@exp2,w
  3799  02A2  0226               	subwf	___ftadd@exp1,w
  3800  02A3  1803               	skipnc
  3801  02A4  2AB4               	goto	i1l1367
  3802  02A5  0326               	decf	___ftadd@exp1,w
  3803  02A6  3AFF               	xorlw	255
  3804  02A7  0725               	addwf	___ftadd@exp2,w
  3805  02A8  00A0               	movwf	??___ftadd
  3806  02A9  3019               	movlw	25
  3807  02AA  0220               	subwf	??___ftadd,w
  3808  02AB  1C03               	skipc
  3809  02AC  2AB4               	goto	i1l1367
  3810  02AD                     i1l1363:	
  3811  02AD  087B               	movf	___ftadd@f2,w
  3812  02AE  00F8               	movwf	?___ftadd
  3813  02AF  087C               	movf	___ftadd@f2+1,w
  3814  02B0  00F9               	movwf	?___ftadd+1
  3815  02B1  087D               	movf	___ftadd@f2+2,w
  3816  02B2  00FA               	movwf	?___ftadd+2
  3817  02B3  0008               	return
  3818  02B4                     i1l1367:	
  3819  02B4  0825               	movf	___ftadd@exp2,w
  3820  02B5  1903               	btfsc	3,2
  3821  02B6  0008               	return
  3822  02B7  0826               	movf	___ftadd@exp1,w
  3823  02B8  0225               	subwf	___ftadd@exp2,w
  3824  02B9  1803               	skipnc
  3825  02BA  2AC3               	goto	i1l1373
  3826  02BB  0325               	decf	___ftadd@exp2,w
  3827  02BC  3AFF               	xorlw	255
  3828  02BD  0726               	addwf	___ftadd@exp1,w
  3829  02BE  00A0               	movwf	??___ftadd
  3830  02BF  3019               	movlw	25
  3831  02C0  0220               	subwf	??___ftadd,w
  3832  02C1  1803               	btfsc	3,0
  3833  02C2  0008               	return
  3834  02C3                     i1l1373:	
  3835  02C3  3006               	movlw	6
  3836  02C4  00A0               	movwf	??___ftadd
  3837  02C5  0820               	movf	??___ftadd,w
  3838  02C6  00A4               	movwf	___ftadd@sign
  3839  02C7  1BFA               	btfsc	___ftadd@f1+2,7
  3840  02C8  17A4               	bsf	___ftadd@sign,7
  3841  02C9  1BFD               	btfsc	___ftadd@f2+2,7
  3842  02CA  1724               	bsf	___ftadd@sign,6
  3843  02CB  17F9               	bsf	___ftadd@f1+1,7
  3844  02CC  30FF               	movlw	255
  3845  02CD  05F8               	andwf	___ftadd@f1,f
  3846  02CE  30FF               	movlw	255
  3847  02CF  05F9               	andwf	___ftadd@f1+1,f
  3848  02D0  3000               	movlw	0
  3849  02D1  05FA               	andwf	___ftadd@f1+2,f
  3850  02D2  17FC               	bsf	___ftadd@f2+1,7
  3851  02D3  30FF               	movlw	255
  3852  02D4  05FB               	andwf	___ftadd@f2,f
  3853  02D5  30FF               	movlw	255
  3854  02D6  05FC               	andwf	___ftadd@f2+1,f
  3855  02D7  3000               	movlw	0
  3856  02D8  05FD               	andwf	___ftadd@f2+2,f
  3857  02D9  0825               	movf	___ftadd@exp2,w
  3858  02DA  0226               	subwf	___ftadd@exp1,w
  3859  02DB  1803               	skipnc
  3860  02DC  2B03               	goto	i1l1395
  3861  02DD                     i1l1385:	
  3862  02DD  3001               	movlw	1
  3863  02DE                     u155_25:	
  3864  02DE  1003               	clrc
  3865  02DF  0DFB               	rlf	___ftadd@f2,f
  3866  02E0  0DFC               	rlf	___ftadd@f2+1,f
  3867  02E1  0DFD               	rlf	___ftadd@f2+2,f
  3868  02E2  3EFF               	addlw	-1
  3869  02E3  1D03               	skipz
  3870  02E4  2ADE               	goto	u155_25
  3871  02E5  3001               	movlw	1
  3872  02E6  02A5               	subwf	___ftadd@exp2,f
  3873  02E7  0825               	movf	___ftadd@exp2,w
  3874  02E8  0626               	xorwf	___ftadd@exp1,w
  3875  02E9  1903               	skipnz
  3876  02EA  2AFE               	goto	i1l1393
  3877  02EB  3001               	movlw	1
  3878  02EC  02A4               	subwf	___ftadd@sign,f
  3879  02ED  0824               	movf	___ftadd@sign,w
  3880  02EE  3907               	andlw	7
  3881  02EF  1903               	btfsc	3,2
  3882  02F0  2AFE               	goto	i1l1393
  3883  02F1  2ADD               	goto	i1l1385
  3884  02F2                     i1l1391:	
  3885  02F2  3001               	movlw	1
  3886  02F3                     u158_25:	
  3887  02F3  1003               	clrc
  3888  02F4  0CFA               	rrf	___ftadd@f1+2,f
  3889  02F5  0CF9               	rrf	___ftadd@f1+1,f
  3890  02F6  0CF8               	rrf	___ftadd@f1,f
  3891  02F7  3EFF               	addlw	-1
  3892  02F8  1D03               	skipz
  3893  02F9  2AF3               	goto	u158_25
  3894  02FA  3001               	movlw	1
  3895  02FB  00A0               	movwf	??___ftadd
  3896  02FC  0820               	movf	??___ftadd,w
  3897  02FD  07A6               	addwf	___ftadd@exp1,f
  3898  02FE                     i1l1393:	
  3899  02FE  0826               	movf	___ftadd@exp1,w
  3900  02FF  0625               	xorwf	___ftadd@exp2,w
  3901  0300  1903               	btfsc	3,2
  3902  0301  2B2C               	goto	i1l435
  3903  0302  2AF2               	goto	i1l1391
  3904  0303                     i1l1395:	
  3905  0303  0826               	movf	___ftadd@exp1,w
  3906  0304  0225               	subwf	___ftadd@exp2,w
  3907  0305  1803               	skipnc
  3908  0306  2B2C               	goto	i1l435
  3909  0307                     i1l1397:	
  3910  0307  3001               	movlw	1
  3911  0308                     u161_25:	
  3912  0308  1003               	clrc
  3913  0309  0DF8               	rlf	___ftadd@f1,f
  3914  030A  0DF9               	rlf	___ftadd@f1+1,f
  3915  030B  0DFA               	rlf	___ftadd@f1+2,f
  3916  030C  3EFF               	addlw	-1
  3917  030D  1D03               	skipz
  3918  030E  2B08               	goto	u161_25
  3919  030F  3001               	movlw	1
  3920  0310  02A6               	subwf	___ftadd@exp1,f
  3921  0311  0825               	movf	___ftadd@exp2,w
  3922  0312  0626               	xorwf	___ftadd@exp1,w
  3923  0313  1903               	skipnz
  3924  0314  2B28               	goto	i1l1405
  3925  0315  3001               	movlw	1
  3926  0316  02A4               	subwf	___ftadd@sign,f
  3927  0317  0824               	movf	___ftadd@sign,w
  3928  0318  3907               	andlw	7
  3929  0319  1903               	btfsc	3,2
  3930  031A  2B28               	goto	i1l1405
  3931  031B  2B07               	goto	i1l1397
  3932  031C                     i1l1403:	
  3933  031C  3001               	movlw	1
  3934  031D                     u164_25:	
  3935  031D  1003               	clrc
  3936  031E  0CFD               	rrf	___ftadd@f2+2,f
  3937  031F  0CFC               	rrf	___ftadd@f2+1,f
  3938  0320  0CFB               	rrf	___ftadd@f2,f
  3939  0321  3EFF               	addlw	-1
  3940  0322  1D03               	skipz
  3941  0323  2B1D               	goto	u164_25
  3942  0324  3001               	movlw	1
  3943  0325  00A0               	movwf	??___ftadd
  3944  0326  0820               	movf	??___ftadd,w
  3945  0327  07A5               	addwf	___ftadd@exp2,f
  3946  0328                     i1l1405:	
  3947  0328  0826               	movf	___ftadd@exp1,w
  3948  0329  0625               	xorwf	___ftadd@exp2,w
  3949  032A  1D03               	skipz
  3950  032B  2B1C               	goto	i1l1403
  3951  032C                     i1l435:	
  3952  032C  1FA4               	btfss	___ftadd@sign,7
  3953  032D  2B3E               	goto	i1l1409
  3954  032E  30FF               	movlw	255
  3955  032F  06F8               	xorwf	___ftadd@f1,f
  3956  0330  30FF               	movlw	255
  3957  0331  06F9               	xorwf	___ftadd@f1+1,f
  3958  0332  30FF               	movlw	255
  3959  0333  06FA               	xorwf	___ftadd@f1+2,f
  3960  0334  3001               	movlw	1
  3961  0335  07F8               	addwf	___ftadd@f1,f
  3962  0336  3000               	movlw	0
  3963  0337  1803               	skipnc
  3964  0338  3001               	movlw	1
  3965  0339  07F9               	addwf	___ftadd@f1+1,f
  3966  033A  3000               	movlw	0
  3967  033B  1803               	skipnc
  3968  033C  3001               	movlw	1
  3969  033D  07FA               	addwf	___ftadd@f1+2,f
  3970  033E                     i1l1409:	
  3971  033E  1F24               	btfss	___ftadd@sign,6
  3972  033F  2B50               	goto	i1l1413
  3973  0340  30FF               	movlw	255
  3974  0341  06FB               	xorwf	___ftadd@f2,f
  3975  0342  30FF               	movlw	255
  3976  0343  06FC               	xorwf	___ftadd@f2+1,f
  3977  0344  30FF               	movlw	255
  3978  0345  06FD               	xorwf	___ftadd@f2+2,f
  3979  0346  3001               	movlw	1
  3980  0347  07FB               	addwf	___ftadd@f2,f
  3981  0348  3000               	movlw	0
  3982  0349  1803               	skipnc
  3983  034A  3001               	movlw	1
  3984  034B  07FC               	addwf	___ftadd@f2+1,f
  3985  034C  3000               	movlw	0
  3986  034D  1803               	skipnc
  3987  034E  3001               	movlw	1
  3988  034F  07FD               	addwf	___ftadd@f2+2,f
  3989  0350                     i1l1413:	
  3990  0350  01A4               	clrf	___ftadd@sign
  3991  0351  0878               	movf	___ftadd@f1,w
  3992  0352  07FB               	addwf	___ftadd@f2,f
  3993  0353  0879               	movf	___ftadd@f1+1,w
  3994  0354  1103               	clrz
  3995  0355  1803               	skipnc
  3996  0356  0A79               	incf	___ftadd@f1+1,w
  3997  0357  1D03               	btfss	3,2
  3998  0358  07FC               	addwf	___ftadd@f2+1,f
  3999  0359  087A               	movf	___ftadd@f1+2,w
  4000  035A  1103               	clrz
  4001  035B  1803               	skipnc
  4002  035C  0A7A               	incf	___ftadd@f1+2,w
  4003  035D  1D03               	btfss	3,2
  4004  035E  07FD               	addwf	___ftadd@f2+2,f
  4005  035F  1FFD               	btfss	___ftadd@f2+2,7
  4006  0360  2B73               	goto	i1l1423
  4007  0361  30FF               	movlw	255
  4008  0362  06FB               	xorwf	___ftadd@f2,f
  4009  0363  30FF               	movlw	255
  4010  0364  06FC               	xorwf	___ftadd@f2+1,f
  4011  0365  30FF               	movlw	255
  4012  0366  06FD               	xorwf	___ftadd@f2+2,f
  4013  0367  3001               	movlw	1
  4014  0368  07FB               	addwf	___ftadd@f2,f
  4015  0369  3000               	movlw	0
  4016  036A  1803               	skipnc
  4017  036B  3001               	movlw	1
  4018  036C  07FC               	addwf	___ftadd@f2+1,f
  4019  036D  3000               	movlw	0
  4020  036E  1803               	skipnc
  4021  036F  3001               	movlw	1
  4022  0370  07FD               	addwf	___ftadd@f2+2,f
  4023  0371  01A4               	clrf	___ftadd@sign
  4024  0372  0AA4               	incf	___ftadd@sign,f
  4025  0373                     i1l1423:	
  4026  0373  087B               	movf	___ftadd@f2,w
  4027  0374  00F0               	movwf	___ftpack@arg
  4028  0375  087C               	movf	___ftadd@f2+1,w
  4029  0376  00F1               	movwf	___ftpack@arg+1
  4030  0377  087D               	movf	___ftadd@f2+2,w
  4031  0378  00F2               	movwf	___ftpack@arg+2
  4032  0379  0826               	movf	___ftadd@exp1,w
  4033  037A  00A0               	movwf	??___ftadd
  4034  037B  0820               	movf	??___ftadd,w
  4035  037C  00F3               	movwf	___ftpack@exp
  4036  037D  0824               	movf	___ftadd@sign,w
  4037  037E  00A1               	movwf	??___ftadd+1
  4038  037F  0821               	movf	??___ftadd+1,w
  4039  0380  00F4               	movwf	___ftpack@sign
  4040  0381  120A  118A  278B   	fcall	___ftpack
  4041  0384  0870               	movf	?___ftpack,w
  4042  0385  00F8               	movwf	?___ftadd
  4043  0386  0871               	movf	?___ftpack+1,w
  4044  0387  00F9               	movwf	?___ftadd+1
  4045  0388  0872               	movf	?___ftpack+2,w
  4046  0389  00FA               	movwf	?___ftadd+2
  4047  038A  0008               	return
  4048  038B                     __end_of___ftadd:	
  4049                           
  4050                           	psect	text17
  4051  0C7A                     __ptext17:	
  4052 ;; *************** function ___ftneg *****************
  4053 ;; Defined at:
  4054 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  f1              3    0[COMMON] float 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  3    0[COMMON] float 
  4061 ;; Registers used:
  4062 ;;		wreg
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4068 ;;      Params:         3       0       0       0       0
  4069 ;;      Locals:         0       0       0       0       0
  4070 ;;      Temps:          0       0       0       0       0
  4071 ;;      Totals:         3       0       0       0       0
  4072 ;;Total ram usage:        3 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_ftoa
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function ___ftneg
  4083  0C7A                     ___ftneg:	
  4084                           
  4085                           ;incstack = 0
  4086                           ; Regs used in ___ftneg: [wreg]
  4087  0C7A  0872               	movf	___ftneg@f1+2,w
  4088  0C7B  0471               	iorwf	___ftneg@f1+1,w
  4089  0C7C  0470               	iorwf	___ftneg@f1,w
  4090  0C7D  1903               	skipnz
  4091  0C7E  0008               	return
  4092  0C7F  3080               	movlw	128
  4093  0C80  06F2               	xorwf	___ftneg@f1+2,f
  4094  0C81  0008               	return
  4095  0C82                     __end_of___ftneg:	
  4096                           
  4097                           	psect	text18
  4098  05FE                     __ptext18:	
  4099 ;; *************** function ___ftmul *****************
  4100 ;; Defined at:
  4101 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  f1              3    0[BANK0 ] float 
  4104 ;;  f2              3    3[BANK0 ] float 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  4107 ;;  sign            1   15[BANK0 ] unsigned char 
  4108 ;;  cntr            1   14[BANK0 ] unsigned char 
  4109 ;;  exp             1   10[BANK0 ] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  3    0[BANK0 ] float 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       6       0       0       0
  4120 ;;      Locals:         0       6       0       0       0
  4121 ;;      Temps:          0       4       0       0       0
  4122 ;;      Totals:         0      16       0       0       0
  4123 ;;Total ram usage:       16 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    1
  4126 ;; This function calls:
  4127 ;;		___ftpack
  4128 ;; This function is called by:
  4129 ;;		_ISR
  4130 ;;		_ftoa
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function ___ftmul
  4136  05FE                     ___ftmul:	
  4137                           
  4138                           ;incstack = 0
  4139                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4140  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  4141  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  4142  0600  0820               	movf	___ftmul@f1,w
  4143  0601  00A6               	movwf	??___ftmul
  4144  0602  0821               	movf	___ftmul@f1+1,w
  4145  0603  00A7               	movwf	??___ftmul+1
  4146  0604  0822               	movf	___ftmul@f1+2,w
  4147  0605  00A8               	movwf	??___ftmul+2
  4148  0606  1003               	clrc
  4149  0607  0D27               	rlf	??___ftmul+1,w
  4150  0608  0D28               	rlf	??___ftmul+2,w
  4151  0609  00A9               	movwf	??___ftmul+3
  4152  060A  0829               	movf	??___ftmul+3,w
  4153  060B  00AA               	movwf	___ftmul@exp
  4154  060C  08AA               	movf	___ftmul@exp,f
  4155  060D  1D03               	skipz
  4156  060E  2E16               	goto	i1l1647
  4157  060F  3000               	movlw	0
  4158  0610  00A0               	movwf	?___ftmul
  4159  0611  3000               	movlw	0
  4160  0612  00A1               	movwf	?___ftmul+1
  4161  0613  3000               	movlw	0
  4162  0614  00A2               	movwf	?___ftmul+2
  4163  0615  0008               	return
  4164  0616                     i1l1647:	
  4165  0616  0823               	movf	___ftmul@f2,w
  4166  0617  00A6               	movwf	??___ftmul
  4167  0618  0824               	movf	___ftmul@f2+1,w
  4168  0619  00A7               	movwf	??___ftmul+1
  4169  061A  0825               	movf	___ftmul@f2+2,w
  4170  061B  00A8               	movwf	??___ftmul+2
  4171  061C  1003               	clrc
  4172  061D  0D27               	rlf	??___ftmul+1,w
  4173  061E  0D28               	rlf	??___ftmul+2,w
  4174  061F  00A9               	movwf	??___ftmul+3
  4175  0620  0829               	movf	??___ftmul+3,w
  4176  0621  00AF               	movwf	___ftmul@sign
  4177  0622  08AF               	movf	___ftmul@sign,f
  4178  0623  1D03               	skipz
  4179  0624  2E2C               	goto	i1l1653
  4180  0625  3000               	movlw	0
  4181  0626  00A0               	movwf	?___ftmul
  4182  0627  3000               	movlw	0
  4183  0628  00A1               	movwf	?___ftmul+1
  4184  0629  3000               	movlw	0
  4185  062A  00A2               	movwf	?___ftmul+2
  4186  062B  0008               	return
  4187  062C                     i1l1653:	
  4188  062C  082F               	movf	___ftmul@sign,w
  4189  062D  3E7B               	addlw	123
  4190  062E  00A6               	movwf	??___ftmul
  4191  062F  0826               	movf	??___ftmul,w
  4192  0630  07AA               	addwf	___ftmul@exp,f
  4193  0631  0820               	movf	___ftmul@f1,w
  4194  0632  00A6               	movwf	??___ftmul
  4195  0633  0821               	movf	___ftmul@f1+1,w
  4196  0634  00A7               	movwf	??___ftmul+1
  4197  0635  0822               	movf	___ftmul@f1+2,w
  4198  0636  00A8               	movwf	??___ftmul+2
  4199  0637  3010               	movlw	16
  4200  0638                     u222_25:	
  4201  0638  1003               	clrc
  4202  0639  0CA8               	rrf	??___ftmul+2,f
  4203  063A  0CA7               	rrf	??___ftmul+1,f
  4204  063B  0CA6               	rrf	??___ftmul,f
  4205  063C  3EFF               	addlw	-1
  4206  063D  1D03               	skipz
  4207  063E  2E38               	goto	u222_25
  4208  063F  0826               	movf	??___ftmul,w
  4209  0640  00A9               	movwf	??___ftmul+3
  4210  0641  0829               	movf	??___ftmul+3,w
  4211  0642  00AF               	movwf	___ftmul@sign
  4212  0643  0823               	movf	___ftmul@f2,w
  4213  0644  00A6               	movwf	??___ftmul
  4214  0645  0824               	movf	___ftmul@f2+1,w
  4215  0646  00A7               	movwf	??___ftmul+1
  4216  0647  0825               	movf	___ftmul@f2+2,w
  4217  0648  00A8               	movwf	??___ftmul+2
  4218  0649  3010               	movlw	16
  4219  064A                     u223_25:	
  4220  064A  1003               	clrc
  4221  064B  0CA8               	rrf	??___ftmul+2,f
  4222  064C  0CA7               	rrf	??___ftmul+1,f
  4223  064D  0CA6               	rrf	??___ftmul,f
  4224  064E  3EFF               	addlw	-1
  4225  064F  1D03               	skipz
  4226  0650  2E4A               	goto	u223_25
  4227  0651  0826               	movf	??___ftmul,w
  4228  0652  00A9               	movwf	??___ftmul+3
  4229  0653  0829               	movf	??___ftmul+3,w
  4230  0654  06AF               	xorwf	___ftmul@sign,f
  4231  0655  3080               	movlw	128
  4232  0656  00A6               	movwf	??___ftmul
  4233  0657  0826               	movf	??___ftmul,w
  4234  0658  05AF               	andwf	___ftmul@sign,f
  4235  0659  17A1               	bsf	___ftmul@f1+1,7
  4236  065A  17A4               	bsf	___ftmul@f2+1,7
  4237  065B  30FF               	movlw	255
  4238  065C  05A3               	andwf	___ftmul@f2,f
  4239  065D  30FF               	movlw	255
  4240  065E  05A4               	andwf	___ftmul@f2+1,f
  4241  065F  3000               	movlw	0
  4242  0660  05A5               	andwf	___ftmul@f2+2,f
  4243  0661  3000               	movlw	0
  4244  0662  00AB               	movwf	___ftmul@f3_as_product
  4245  0663  3000               	movlw	0
  4246  0664  00AC               	movwf	___ftmul@f3_as_product+1
  4247  0665  3000               	movlw	0
  4248  0666  00AD               	movwf	___ftmul@f3_as_product+2
  4249  0667  3007               	movlw	7
  4250  0668  00A6               	movwf	??___ftmul
  4251  0669  0826               	movf	??___ftmul,w
  4252  066A  00AE               	movwf	___ftmul@cntr
  4253  066B                     i1l1665:	
  4254  066B  1C20               	btfss	___ftmul@f1,0
  4255  066C  2E7B               	goto	i1l1669
  4256  066D  0823               	movf	___ftmul@f2,w
  4257  066E  07AB               	addwf	___ftmul@f3_as_product,f
  4258  066F  0824               	movf	___ftmul@f2+1,w
  4259  0670  1103               	clrz
  4260  0671  1803               	skipnc
  4261  0672  0A24               	incf	___ftmul@f2+1,w
  4262  0673  1D03               	btfss	3,2
  4263  0674  07AC               	addwf	___ftmul@f3_as_product+1,f
  4264  0675  0825               	movf	___ftmul@f2+2,w
  4265  0676  1103               	clrz
  4266  0677  1803               	skipnc
  4267  0678  0A25               	incf	___ftmul@f2+2,w
  4268  0679  1D03               	btfss	3,2
  4269  067A  07AD               	addwf	___ftmul@f3_as_product+2,f
  4270  067B                     i1l1669:	
  4271  067B  3001               	movlw	1
  4272  067C                     u226_25:	
  4273  067C  1003               	clrc
  4274  067D  0CA2               	rrf	___ftmul@f1+2,f
  4275  067E  0CA1               	rrf	___ftmul@f1+1,f
  4276  067F  0CA0               	rrf	___ftmul@f1,f
  4277  0680  3EFF               	addlw	-1
  4278  0681  1D03               	skipz
  4279  0682  2E7C               	goto	u226_25
  4280  0683  3001               	movlw	1
  4281  0684                     u227_25:	
  4282  0684  1003               	clrc
  4283  0685  0DA3               	rlf	___ftmul@f2,f
  4284  0686  0DA4               	rlf	___ftmul@f2+1,f
  4285  0687  0DA5               	rlf	___ftmul@f2+2,f
  4286  0688  3EFF               	addlw	-1
  4287  0689  1D03               	skipz
  4288  068A  2E84               	goto	u227_25
  4289  068B  3001               	movlw	1
  4290  068C  02AE               	subwf	___ftmul@cntr,f
  4291  068D  1D03               	btfss	3,2
  4292  068E  2E6B               	goto	i1l1665
  4293  068F  3009               	movlw	9
  4294  0690  00A6               	movwf	??___ftmul
  4295  0691  0826               	movf	??___ftmul,w
  4296  0692  00AE               	movwf	___ftmul@cntr
  4297  0693                     i1l1677:	
  4298  0693  1C20               	btfss	___ftmul@f1,0
  4299  0694  2EA3               	goto	i1l1681
  4300  0695  0823               	movf	___ftmul@f2,w
  4301  0696  07AB               	addwf	___ftmul@f3_as_product,f
  4302  0697  0824               	movf	___ftmul@f2+1,w
  4303  0698  1103               	clrz
  4304  0699  1803               	skipnc
  4305  069A  0A24               	incf	___ftmul@f2+1,w
  4306  069B  1D03               	btfss	3,2
  4307  069C  07AC               	addwf	___ftmul@f3_as_product+1,f
  4308  069D  0825               	movf	___ftmul@f2+2,w
  4309  069E  1103               	clrz
  4310  069F  1803               	skipnc
  4311  06A0  0A25               	incf	___ftmul@f2+2,w
  4312  06A1  1D03               	btfss	3,2
  4313  06A2  07AD               	addwf	___ftmul@f3_as_product+2,f
  4314  06A3                     i1l1681:	
  4315  06A3  3001               	movlw	1
  4316  06A4                     u231_25:	
  4317  06A4  1003               	clrc
  4318  06A5  0CA2               	rrf	___ftmul@f1+2,f
  4319  06A6  0CA1               	rrf	___ftmul@f1+1,f
  4320  06A7  0CA0               	rrf	___ftmul@f1,f
  4321  06A8  3EFF               	addlw	-1
  4322  06A9  1D03               	skipz
  4323  06AA  2EA4               	goto	u231_25
  4324  06AB  3001               	movlw	1
  4325  06AC                     u232_25:	
  4326  06AC  1003               	clrc
  4327  06AD  0CAD               	rrf	___ftmul@f3_as_product+2,f
  4328  06AE  0CAC               	rrf	___ftmul@f3_as_product+1,f
  4329  06AF  0CAB               	rrf	___ftmul@f3_as_product,f
  4330  06B0  3EFF               	addlw	-1
  4331  06B1  1D03               	skipz
  4332  06B2  2EAC               	goto	u232_25
  4333  06B3  3001               	movlw	1
  4334  06B4  02AE               	subwf	___ftmul@cntr,f
  4335  06B5  1D03               	btfss	3,2
  4336  06B6  2E93               	goto	i1l1677
  4337  06B7  082B               	movf	___ftmul@f3_as_product,w
  4338  06B8  00F0               	movwf	___ftpack@arg
  4339  06B9  082C               	movf	___ftmul@f3_as_product+1,w
  4340  06BA  00F1               	movwf	___ftpack@arg+1
  4341  06BB  082D               	movf	___ftmul@f3_as_product+2,w
  4342  06BC  00F2               	movwf	___ftpack@arg+2
  4343  06BD  082A               	movf	___ftmul@exp,w
  4344  06BE  00A6               	movwf	??___ftmul
  4345  06BF  0826               	movf	??___ftmul,w
  4346  06C0  00F3               	movwf	___ftpack@exp
  4347  06C1  082F               	movf	___ftmul@sign,w
  4348  06C2  00A7               	movwf	??___ftmul+1
  4349  06C3  0827               	movf	??___ftmul+1,w
  4350  06C4  00F4               	movwf	___ftpack@sign
  4351  06C5  120A  118A  278B   	fcall	___ftpack
  4352  06C8  0870               	movf	?___ftpack,w
  4353  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  4354  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  4355  06CB  00A0               	movwf	?___ftmul
  4356  06CC  0871               	movf	?___ftpack+1,w
  4357  06CD  00A1               	movwf	?___ftmul+1
  4358  06CE  0872               	movf	?___ftpack+2,w
  4359  06CF  00A2               	movwf	?___ftmul+2
  4360  06D0  0008               	return
  4361  06D1                     __end_of___ftmul:	
  4362                           
  4363                           	psect	text19
  4364  0E86                     __ptext19:	
  4365 ;; *************** function ___ftge *****************
  4366 ;; Defined at:
  4367 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  ff1             3    0[COMMON] float 
  4370 ;;  ff2             3    3[COMMON] float 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;		None               void
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         6       0       0       0       0
  4383 ;;      Locals:         0       0       0       0       0
  4384 ;;      Temps:          6       0       0       0       0
  4385 ;;      Totals:        12       0       0       0       0
  4386 ;;Total ram usage:       12 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_ftoa
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function ___ftge
  4397  0E86                     ___ftge:	
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4401  0E86  1FF2               	btfss	___ftge@ff1+2,7
  4402  0E87  2EAD               	goto	i1l1625
  4403  0E88  3000               	movlw	0
  4404  0E89  00F6               	movwf	??___ftge
  4405  0E8A  3000               	movlw	0
  4406  0E8B  00F7               	movwf	??___ftge+1
  4407  0E8C  3080               	movlw	128
  4408  0E8D  00F8               	movwf	??___ftge+2
  4409  0E8E  0970               	comf	___ftge@ff1,w
  4410  0E8F  00F9               	movwf	??___ftge+3
  4411  0E90  0971               	comf	___ftge@ff1+1,w
  4412  0E91  00FA               	movwf	??___ftge+4
  4413  0E92  0972               	comf	___ftge@ff1+2,w
  4414  0E93  00FB               	movwf	??___ftge+5
  4415  0E94  0AF9               	incf	??___ftge+3,f
  4416  0E95  1903               	skipnz
  4417  0E96  0AFA               	incf	??___ftge+4,f
  4418  0E97  1903               	skipnz
  4419  0E98  0AFB               	incf	??___ftge+5,f
  4420  0E99  0879               	movf	??___ftge+3,w
  4421  0E9A  07F6               	addwf	??___ftge,f
  4422  0E9B  087A               	movf	??___ftge+4,w
  4423  0E9C  1803               	skipnc
  4424  0E9D  0F7A               	incfsz	??___ftge+4,w
  4425  0E9E  2EA0               	goto	u216_21
  4426  0E9F  2EA1               	goto	u216_22
  4427  0EA0                     u216_21:	
  4428  0EA0  07F7               	addwf	??___ftge+1,f
  4429  0EA1                     u216_22:	
  4430  0EA1  087B               	movf	??___ftge+5,w
  4431  0EA2  1803               	skipnc
  4432  0EA3  0F7B               	incfsz	??___ftge+5,w
  4433  0EA4  2EA6               	goto	u216_23
  4434  0EA5  2EA7               	goto	u216_24
  4435  0EA6                     u216_23:	
  4436  0EA6  07F8               	addwf	??___ftge+2,f
  4437  0EA7                     u216_24:	
  4438  0EA7  0876               	movf	??___ftge,w
  4439  0EA8  00F0               	movwf	___ftge@ff1
  4440  0EA9  0877               	movf	??___ftge+1,w
  4441  0EAA  00F1               	movwf	___ftge@ff1+1
  4442  0EAB  0878               	movf	??___ftge+2,w
  4443  0EAC  00F2               	movwf	___ftge@ff1+2
  4444  0EAD                     i1l1625:	
  4445  0EAD  1FF5               	btfss	___ftge@ff2+2,7
  4446  0EAE  2ED4               	goto	i1l1629
  4447  0EAF  3000               	movlw	0
  4448  0EB0  00F6               	movwf	??___ftge
  4449  0EB1  3000               	movlw	0
  4450  0EB2  00F7               	movwf	??___ftge+1
  4451  0EB3  3080               	movlw	128
  4452  0EB4  00F8               	movwf	??___ftge+2
  4453  0EB5  0973               	comf	___ftge@ff2,w
  4454  0EB6  00F9               	movwf	??___ftge+3
  4455  0EB7  0974               	comf	___ftge@ff2+1,w
  4456  0EB8  00FA               	movwf	??___ftge+4
  4457  0EB9  0975               	comf	___ftge@ff2+2,w
  4458  0EBA  00FB               	movwf	??___ftge+5
  4459  0EBB  0AF9               	incf	??___ftge+3,f
  4460  0EBC  1903               	skipnz
  4461  0EBD  0AFA               	incf	??___ftge+4,f
  4462  0EBE  1903               	skipnz
  4463  0EBF  0AFB               	incf	??___ftge+5,f
  4464  0EC0  0879               	movf	??___ftge+3,w
  4465  0EC1  07F6               	addwf	??___ftge,f
  4466  0EC2  087A               	movf	??___ftge+4,w
  4467  0EC3  1803               	skipnc
  4468  0EC4  0F7A               	incfsz	??___ftge+4,w
  4469  0EC5  2EC7               	goto	u218_21
  4470  0EC6  2EC8               	goto	u218_22
  4471  0EC7                     u218_21:	
  4472  0EC7  07F7               	addwf	??___ftge+1,f
  4473  0EC8                     u218_22:	
  4474  0EC8  087B               	movf	??___ftge+5,w
  4475  0EC9  1803               	skipnc
  4476  0ECA  0F7B               	incfsz	??___ftge+5,w
  4477  0ECB  2ECD               	goto	u218_23
  4478  0ECC  2ECE               	goto	u218_24
  4479  0ECD                     u218_23:	
  4480  0ECD  07F8               	addwf	??___ftge+2,f
  4481  0ECE                     u218_24:	
  4482  0ECE  0876               	movf	??___ftge,w
  4483  0ECF  00F3               	movwf	___ftge@ff2
  4484  0ED0  0877               	movf	??___ftge+1,w
  4485  0ED1  00F4               	movwf	___ftge@ff2+1
  4486  0ED2  0878               	movf	??___ftge+2,w
  4487  0ED3  00F5               	movwf	___ftge@ff2+2
  4488  0ED4                     i1l1629:	
  4489  0ED4  3080               	movlw	128
  4490  0ED5  06F2               	xorwf	___ftge@ff1+2,f
  4491  0ED6  3080               	movlw	128
  4492  0ED7  06F5               	xorwf	___ftge@ff2+2,f
  4493  0ED8  0875               	movf	___ftge@ff2+2,w
  4494  0ED9  0272               	subwf	___ftge@ff1+2,w
  4495  0EDA  1D03               	skipz
  4496  0EDB  0008               	return
  4497  0EDC  0874               	movf	___ftge@ff2+1,w
  4498  0EDD  0271               	subwf	___ftge@ff1+1,w
  4499  0EDE  1D03               	skipz
  4500  0EDF  0008               	return
  4501  0EE0  0873               	movf	___ftge@ff2,w
  4502  0EE1  0270               	subwf	___ftge@ff1,w
  4503  0EE2  0008               	return
  4504  0EE3                     __end_of___ftge:	
  4505                           
  4506                           	psect	text20
  4507  03E9                     __ptext20:	
  4508 ;; *************** function ___lwtoft *****************
  4509 ;; Defined at:
  4510 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  c               2    8[COMMON] unsigned int 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  3    8[COMMON] float 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, pclath, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4524 ;;      Params:         3       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0
  4526 ;;      Temps:          1       0       0       0       0
  4527 ;;      Totals:         4       0       0       0       0
  4528 ;;Total ram usage:        4 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    1
  4531 ;; This function calls:
  4532 ;;		___ftpack
  4533 ;; This function is called by:
  4534 ;;		_ISR
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function ___lwtoft
  4540  03E9                     ___lwtoft:	
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4544  03E9  0878               	movf	___lwtoft@c,w
  4545  03EA  00F0               	movwf	___ftpack@arg
  4546  03EB  0879               	movf	___lwtoft@c+1,w
  4547  03EC  00F1               	movwf	___ftpack@arg+1
  4548  03ED  01F2               	clrf	___ftpack@arg+2
  4549  03EE  308E               	movlw	142
  4550  03EF  00FB               	movwf	??___lwtoft
  4551  03F0  087B               	movf	??___lwtoft,w
  4552  03F1  00F3               	movwf	___ftpack@exp
  4553  03F2  01F4               	clrf	___ftpack@sign
  4554  03F3  120A  118A  278B   	fcall	___ftpack
  4555  03F6  0870               	movf	?___ftpack,w
  4556  03F7  00F8               	movwf	?___lwtoft
  4557  03F8  0871               	movf	?___ftpack+1,w
  4558  03F9  00F9               	movwf	?___lwtoft+1
  4559  03FA  0872               	movf	?___ftpack+2,w
  4560  03FB  00FA               	movwf	?___lwtoft+2
  4561  03FC  0008               	return
  4562  03FD                     __end_of___lwtoft:	
  4563                           
  4564                           	psect	text21
  4565  078B                     __ptext21:	
  4566 ;; *************** function ___ftpack *****************
  4567 ;; Defined at:
  4568 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  arg             3    0[COMMON] unsigned um
  4571 ;;  exp             1    3[COMMON] unsigned char 
  4572 ;;  sign            1    4[COMMON] unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  3    0[COMMON] float 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         5       0       0       0       0
  4585 ;;      Locals:         0       0       0       0       0
  4586 ;;      Temps:          3       0       0       0       0
  4587 ;;      Totals:         8       0       0       0       0
  4588 ;;Total ram usage:        8 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		___ftadd
  4594 ;;		___ftmul
  4595 ;;		___lltoft
  4596 ;;		___lwtoft
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function ___ftpack
  4602  078B                     ___ftpack:	
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4606  078B  0873               	movf	___ftpack@exp,w
  4607  078C  1903               	btfsc	3,2
  4608  078D  2F93               	goto	i1l1305
  4609  078E  0872               	movf	___ftpack@arg+2,w
  4610  078F  0471               	iorwf	___ftpack@arg+1,w
  4611  0790  0470               	iorwf	___ftpack@arg,w
  4612  0791  1D03               	skipz
  4613  0792  2FA6               	goto	i1l1311
  4614  0793                     i1l1305:	
  4615  0793  3000               	movlw	0
  4616  0794  00F0               	movwf	?___ftpack
  4617  0795  3000               	movlw	0
  4618  0796  00F1               	movwf	?___ftpack+1
  4619  0797  3000               	movlw	0
  4620  0798  00F2               	movwf	?___ftpack+2
  4621  0799  0008               	return
  4622  079A                     i1l1309:	
  4623  079A  3001               	movlw	1
  4624  079B  00F5               	movwf	??___ftpack
  4625  079C  0875               	movf	??___ftpack,w
  4626  079D  07F3               	addwf	___ftpack@exp,f
  4627  079E  3001               	movlw	1
  4628  079F                     u131_25:	
  4629  079F  1003               	clrc
  4630  07A0  0CF2               	rrf	___ftpack@arg+2,f
  4631  07A1  0CF1               	rrf	___ftpack@arg+1,f
  4632  07A2  0CF0               	rrf	___ftpack@arg,f
  4633  07A3  3EFF               	addlw	-1
  4634  07A4  1D03               	skipz
  4635  07A5  2F9F               	goto	u131_25
  4636  07A6                     i1l1311:	
  4637  07A6  30FE               	movlw	254
  4638  07A7  0572               	andwf	___ftpack@arg+2,w
  4639  07A8  1903               	btfsc	3,2
  4640  07A9  2FC1               	goto	i1l406
  4641  07AA  2F9A               	goto	i1l1309
  4642  07AB                     i1l1313:	
  4643  07AB  3001               	movlw	1
  4644  07AC  00F5               	movwf	??___ftpack
  4645  07AD  0875               	movf	??___ftpack,w
  4646  07AE  07F3               	addwf	___ftpack@exp,f
  4647  07AF  3001               	movlw	1
  4648  07B0  07F0               	addwf	___ftpack@arg,f
  4649  07B1  3000               	movlw	0
  4650  07B2  1803               	skipnc
  4651  07B3  3001               	movlw	1
  4652  07B4  07F1               	addwf	___ftpack@arg+1,f
  4653  07B5  3000               	movlw	0
  4654  07B6  1803               	skipnc
  4655  07B7  3001               	movlw	1
  4656  07B8  07F2               	addwf	___ftpack@arg+2,f
  4657  07B9  3001               	movlw	1
  4658  07BA                     u133_25:	
  4659  07BA  1003               	clrc
  4660  07BB  0CF2               	rrf	___ftpack@arg+2,f
  4661  07BC  0CF1               	rrf	___ftpack@arg+1,f
  4662  07BD  0CF0               	rrf	___ftpack@arg,f
  4663  07BE  3EFF               	addlw	-1
  4664  07BF  1D03               	skipz
  4665  07C0  2FBA               	goto	u133_25
  4666  07C1                     i1l406:	
  4667  07C1  30FF               	movlw	255
  4668  07C2  0572               	andwf	___ftpack@arg+2,w
  4669  07C3  1903               	btfsc	3,2
  4670  07C4  2FD0               	goto	i1l1321
  4671  07C5  2FAB               	goto	i1l1313
  4672  07C6                     i1l1319:	
  4673  07C6  3001               	movlw	1
  4674  07C7  02F3               	subwf	___ftpack@exp,f
  4675  07C8  3001               	movlw	1
  4676  07C9                     u135_25:	
  4677  07C9  1003               	clrc
  4678  07CA  0DF0               	rlf	___ftpack@arg,f
  4679  07CB  0DF1               	rlf	___ftpack@arg+1,f
  4680  07CC  0DF2               	rlf	___ftpack@arg+2,f
  4681  07CD  3EFF               	addlw	-1
  4682  07CE  1D03               	skipz
  4683  07CF  2FC9               	goto	u135_25
  4684  07D0                     i1l1321:	
  4685  07D0  1FF1               	btfss	___ftpack@arg+1,7
  4686  07D1  2FC6               	goto	i1l1319
  4687  07D2  1873               	btfsc	___ftpack@exp,0
  4688  07D3  2FDA               	goto	i1l412
  4689  07D4  30FF               	movlw	255
  4690  07D5  05F0               	andwf	___ftpack@arg,f
  4691  07D6  307F               	movlw	127
  4692  07D7  05F1               	andwf	___ftpack@arg+1,f
  4693  07D8  30FF               	movlw	255
  4694  07D9  05F2               	andwf	___ftpack@arg+2,f
  4695  07DA                     i1l412:	
  4696  07DA  1003               	clrc
  4697  07DB  0CF3               	rrf	___ftpack@exp,f
  4698  07DC  0873               	movf	___ftpack@exp,w
  4699  07DD  00F5               	movwf	??___ftpack
  4700  07DE  01F6               	clrf	??___ftpack+1
  4701  07DF  01F7               	clrf	??___ftpack+2
  4702  07E0  3010               	movlw	16
  4703  07E1                     u138_25:	
  4704  07E1  1003               	clrc
  4705  07E2  0DF5               	rlf	??___ftpack,f
  4706  07E3  0DF6               	rlf	??___ftpack+1,f
  4707  07E4  0DF7               	rlf	??___ftpack+2,f
  4708  07E5  3EFF               	addlw	-1
  4709  07E6  1D03               	skipz
  4710  07E7  2FE1               	goto	u138_25
  4711  07E8  0875               	movf	??___ftpack,w
  4712  07E9  04F0               	iorwf	___ftpack@arg,f
  4713  07EA  0876               	movf	??___ftpack+1,w
  4714  07EB  04F1               	iorwf	___ftpack@arg+1,f
  4715  07EC  0877               	movf	??___ftpack+2,w
  4716  07ED  04F2               	iorwf	___ftpack@arg+2,f
  4717  07EE  0874               	movf	___ftpack@sign,w
  4718  07EF  1903               	btfsc	3,2
  4719  07F0  0008               	return
  4720  07F1  17F2               	bsf	___ftpack@arg+2,7
  4721  07F2  0008               	return
  4722  07F3                     __end_of___ftpack:	
  4723                           
  4724                           	psect	text22
  4725  0CC2                     __ptext22:	
  4726 ;; *************** function _USART_ReceiveChar *****************
  4727 ;; Defined at:
  4728 ;;		line 78 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  USART_Data      1    4[COMMON] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      unsigned char 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4742 ;;      Params:         0       0       0       0       0
  4743 ;;      Locals:         1       0       0       0       0
  4744 ;;      Temps:          1       0       0       0       0
  4745 ;;      Totals:         2       0       0       0       0
  4746 ;;Total ram usage:        2 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    2
  4749 ;; This function calls:
  4750 ;;		i1_USART_WriteString
  4751 ;; This function is called by:
  4752 ;;		_ISR
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _USART_ReceiveChar
  4758  0CC2                     _USART_ReceiveChar:	
  4759                           
  4760                           ;Supervisorio.c: 80: unsigned char USART_Data;
  4761                           ;Supervisorio.c: 82: if (!OERR)
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4765  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  4766  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  4767  0CC4  1898               	btfsc	24,1	;volatile
  4768  0CC5  2CCB               	goto	i1l1821
  4769                           
  4770                           ;Supervisorio.c: 83: {
  4771                           ;Supervisorio.c: 84: USART_Data = RCREG;
  4772  0CC6  081A               	movf	26,w	;volatile
  4773  0CC7  00F3               	movwf	??_USART_ReceiveChar
  4774  0CC8  0873               	movf	??_USART_ReceiveChar,w
  4775  0CC9  00F4               	movwf	USART_ReceiveChar@USART_Data
  4776  0CCA  2CDA               	goto	i1l1829
  4777  0CCB                     i1l1821:	
  4778                           ;Supervisorio.c: 86: }
  4779                           
  4780                           ;Supervisorio.c: 85: PIR1bits.RCIF = 0;
  4781                           
  4782                           
  4783                           ;Supervisorio.c: 87: else
  4784                           ;Supervisorio.c: 88: {
  4785                           ;Supervisorio.c: 89: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  4786  0CCB  303A               	movlw	low (STR_1| (0+32768))
  4787  0CCC  00F1               	movwf	i1USART_WriteString@str
  4788  0CCD  3084               	movlw	high (STR_1| (0+32768))
  4789  0CCE  00F2               	movwf	i1USART_WriteString@str+1
  4790  0CCF  120A  158A  24F9   	fcall	i1_USART_WriteString
  4791                           
  4792                           ;Supervisorio.c: 91: RCSTAbits.CREN = 0;
  4793  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  4794  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  4795  0CD4  1218               	bcf	24,4	;volatile
  4796                           
  4797                           ;Supervisorio.c: 92: USART_Data = RCREG;
  4798  0CD5  081A               	movf	26,w	;volatile
  4799  0CD6  00F3               	movwf	??_USART_ReceiveChar
  4800  0CD7  0873               	movf	??_USART_ReceiveChar,w
  4801  0CD8  00F4               	movwf	USART_ReceiveChar@USART_Data
  4802                           
  4803                           ;Supervisorio.c: 93: RCSTAbits.CREN = 1;
  4804  0CD9  1618               	bsf	24,4	;volatile
  4805  0CDA                     i1l1829:	
  4806                           
  4807                           ;Supervisorio.c: 94: PIR1bits.RCIF = 0;
  4808  0CDA  128C               	bcf	12,5	;volatile
  4809                           
  4810                           ;Supervisorio.c: 95: }
  4811                           ;Supervisorio.c: 97: return(USART_Data);
  4812  0CDB  0874               	movf	USART_ReceiveChar@USART_Data,w
  4813  0CDC  0008               	return
  4814  0CDD                     __end_of_USART_ReceiveChar:	
  4815                           
  4816                           	psect	text23
  4817  0CF9                     __ptext23:	
  4818 ;; *************** function i1_USART_WriteString *****************
  4819 ;; Defined at:
  4820 ;;		line 66 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  str             2    1[COMMON] PTR const unsigned char 
  4823 ;;		 -> NULL(0), ftoa@buf(17), STR_6(17), STR_5(35), 
  4824 ;;		 -> STR_4(32), STR_3(35), STR_2(32), buffer(9), 
  4825 ;;		 -> STR_1(40), 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;		None               void
  4830 ;; Registers used:
  4831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         2       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0
  4840 ;;      Totals:         2       0       0       0       0
  4841 ;;Total ram usage:        2 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    1
  4844 ;; This function calls:
  4845 ;;		i1_USART_WriteChar
  4846 ;; This function is called by:
  4847 ;;		_USART_ReceiveChar
  4848 ;;		_ISR
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           
  4853                           ;psect for function i1_USART_WriteString
  4854  0CF9                     i1_USART_WriteString:	
  4855  0CF9                     i1l1765:	
  4856                           ;Supervisorio.c: 69: while(*str != '\0')
  4857                           
  4858                           ;incstack = 0
  4859                           ; Regs used in i1_USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  4860                           
  4861  0CF9  0872               	movf	i1USART_WriteString@str+1,w
  4862  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  4863  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  4864  0CFC  00FF               	movwf	127
  4865  0CFD  0871               	movf	i1USART_WriteString@str,w
  4866  0CFE  0084               	movwf	4
  4867  0CFF  120A  118A  2400  120A  158A  	fcall	stringtab
  4868  0D04  3800               	iorlw	0
  4869  0D05  1903               	btfsc	3,2
  4870  0D06  0008               	return
  4871                           
  4872                           ;Supervisorio.c: 70: {
  4873                           ;Supervisorio.c: 72: USART_WriteChar(*str);
  4874  0D07  0872               	movf	i1USART_WriteString@str+1,w
  4875  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0D0A  00FF               	movwf	127
  4878  0D0B  0871               	movf	i1USART_WriteString@str,w
  4879  0D0C  0084               	movwf	4
  4880  0D0D  120A  118A  2400  120A  158A  	fcall	stringtab
  4881  0D12  120A  158A  2472  120A  158A  	fcall	i1_USART_WriteChar
  4882                           
  4883                           ;Supervisorio.c: 73: str++;
  4884  0D17  3001               	movlw	1
  4885  0D18  07F1               	addwf	i1USART_WriteString@str,f
  4886  0D19  1803               	skipnc
  4887  0D1A  0AF2               	incf	i1USART_WriteString@str+1,f
  4888  0D1B  2CF9               	goto	i1l1765
  4889  0D1C                     __end_ofi1_USART_WriteString:	
  4890                           
  4891                           	psect	text24
  4892  0C72                     __ptext24:	
  4893 ;; *************** function i1_USART_WriteChar *****************
  4894 ;; Defined at:
  4895 ;;		line 59 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_senso
      +r_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  USARTData       1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  USARTData       1    0[COMMON] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4909 ;;      Params:         0       0       0       0       0
  4910 ;;      Locals:         1       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0
  4912 ;;      Totals:         1       0       0       0       0
  4913 ;;Total ram usage:        1 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		i1_USART_WriteString
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function i1_USART_WriteChar
  4924  0C72                     i1_USART_WriteChar:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in i1_USART_WriteChar: [wreg]
  4928                           ;i1USART_WriteChar@USARTData stored from wreg
  4929  0C72  00F0               	movwf	i1USART_WriteChar@USARTData
  4930  0C73                     i1l70:	
  4931                           ;Supervisorio.c: 61: while(!PIR1bits.TXIF);
  4932                           
  4933  0C73  1283               	bcf	3,5	;RP0=0, select bank0
  4934  0C74  1303               	bcf	3,6	;RP1=0, select bank0
  4935  0C75  1E0C               	btfss	12,4	;volatile
  4936  0C76  2C73               	goto	i1l70
  4937                           
  4938                           ;Supervisorio.c: 62: TXREG = USARTData;
  4939  0C77  0870               	movf	i1USART_WriteChar@USARTData,w
  4940  0C78  0099               	movwf	25	;volatile
  4941  0C79  0008               	return
  4942  0C7A                     __end_ofi1_USART_WriteChar:	
  4943                           
  4944                           	psect	text25
  4945  0CAA                     __ptext25:	
  4946 ;; *************** function _ADC_Read *****************
  4947 ;; Defined at:
  4948 ;;		line 119 in file "C:\Users\Dracarys\Downloads\Sistemas Embarcados\Trabalho_Final_Sistemas_embarcados_coletar_de_sens
      +or_analogico_a_cada_1_segundo\Supervisorio_PIC para_sinais\Firmware no PIC16F877A\Supervisorio.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  channel         2    0[COMMON] unsigned short 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;		None               void
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4962 ;;      Params:         2       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0
  4964 ;;      Temps:          1       0       0       0       0
  4965 ;;      Totals:         3       0       0       0       0
  4966 ;;Total ram usage:        3 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_ISR
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _ADC_Read
  4977  0CAA                     _ADC_Read:	
  4978                           
  4979                           ;Supervisorio.c: 121: ADCON0bits.CHS = channel;
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4983  0CAA  0870               	movf	ADC_Read@channel,w
  4984  0CAB  00F2               	movwf	??_ADC_Read
  4985  0CAC  0DF2               	rlf	??_ADC_Read,f
  4986  0CAD  0DF2               	rlf	??_ADC_Read,f
  4987  0CAE  0DF2               	rlf	??_ADC_Read,f
  4988  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0CB1  081F               	movf	31,w	;volatile
  4991  0CB2  0672               	xorwf	??_ADC_Read,w
  4992  0CB3  39C7               	andlw	-57
  4993  0CB4  0672               	xorwf	??_ADC_Read,w
  4994  0CB5  009F               	movwf	31	;volatile
  4995                           
  4996                           ;Supervisorio.c: 122: ADCON0bits.ADON = 1;
  4997  0CB6  141F               	bsf	31,0	;volatile
  4998                           
  4999                           ;Supervisorio.c: 124: _delay((unsigned long)((25)*(18432000/4000000.0)));
  5000  0CB7  3026               	movlw	38
  5001  0CB8  00F2               	movwf	??_ADC_Read
  5002  0CB9                     u259_27:	
  5003  0CB9  0BF2               	decfsz	??_ADC_Read,f
  5004  0CBA  2CB9               	goto	u259_27
  5005                           
  5006                           ;Supervisorio.c: 126: ADCON0bits.GO = 1;
  5007  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  5008  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  5009  0CBD  151F               	bsf	31,2	;volatile
  5010  0CBE                     i1l90:	
  5011                           ;Supervisorio.c: 127: while(ADCON0bits.GO_DONE);
  5012                           
  5013  0CBE  191F               	btfsc	31,2	;volatile
  5014  0CBF  2CBE               	goto	i1l90
  5015                           
  5016                           ;Supervisorio.c: 129: PIR1bits.ADIF = 0;
  5017  0CC0  130C               	bcf	12,6	;volatile
  5018  0CC1  0008               	return
  5019  0CC2                     __end_of_ADC_Read:	
  5020  007E                     btemp	set	126	;btemp
  5021  007E                     wtemp	set	126
  5022  007E                     wtemp0	set	126
  5023  0080                     wtemp1	set	128
  5024  0082                     wtemp2	set	130
  5025  0084                     wtemp3	set	132
  5026  0086                     wtemp4	set	134
  5027  0088                     wtemp5	set	136
  5028  007F                     wtemp6	set	127
  5029  007E                     ttemp	set	126
  5030  007E                     ttemp0	set	126
  5031  0081                     ttemp1	set	129
  5032  0084                     ttemp2	set	132
  5033  0087                     ttemp3	set	135
  5034  007F                     ttemp4	set	127
  5035  007E                     ltemp	set	126
  5036  007E                     ltemp0	set	126
  5037  0082                     ltemp1	set	130
  5038  0086                     ltemp2	set	134
  5039  0080                     ltemp3	set	128


Data Sizes:
    Strings     202
    Constant    40
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     60      77
    BANK1            80     28      45
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> status(BANK0[2]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_7(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S394$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    Display	PTR unsigned char  size(1) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), STR_6(CODE[17]), STR_5(CODE[35]), 
		 -> STR_4(CODE[32]), STR_3(CODE[35]), STR_2(CODE[32]), buffer(BANK0[9]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    _USART_ReceiveChar->i1_USART_WriteString
    i1_USART_WriteString->i1_USART_WriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd

Critical Paths under _main in BANK1

    _main->_USART_Init
    _USART_WriteString->_USART_WriteChar
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     935
                                             25 BANK1      3     3      0
                           _ADC_Init
                         _USART_Init
                  _USART_WriteString
 ---------------------------------------------------------------------------------
 (1) _USART_WriteString                                    2     0      2     397
                                              1 BANK1      2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (2) _USART_WriteChar                                      1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          10     6      4     538
                                             15 BANK1     10     6      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  9     9      0   16661
                                             51 BANK0      9     9      0
                           _ADC_Read
                  _USART_ReceiveChar
                            ___ftmul
                           ___lwtoft
                               _ftoa
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) _ftoa                                                14    10      4   11105
                                             37 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             27    17     10    1998
                                             10 BANK0     27    17     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    2181
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     380
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3189
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3016
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    2630
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2134
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2048
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     273
                                              3 COMMON     2     2      0
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) i1_USART_WriteString                                  2     0      2     249
                                              1 COMMON     2     0      2
                  i1_USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) i1_USART_WriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             3     1      2     150
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _USART_Init
     ___aldiv
   _USART_WriteString
     _USART_WriteChar

 _ISR (ROOT)
   _ADC_Read
   _USART_ReceiveChar
     i1_USART_WriteString
       i1_USART_WriteChar
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _ftoa
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   i1_USART_WriteString
     i1_USART_WriteChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      88       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4D       5       96.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1C      2D       7       56.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      88      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 16 15:12:08 2020

                           pc 0002                   __CFG_CP$OFF 0000                            l70 07F6  
                          fsr 0004           ___wmul@multiplicand 0072                  ___ftadd@exp1 0026  
                ___ftadd@exp2 0025                  ___ftadd@sign 0024                           l110 0E85  
                         l300 0F83                           _RB4 0034                           _RB5 0035  
                __CFG_CPD$OFF 0000                           _ISR 0504                           fsr0 0004  
  __size_of_USART_WriteString 0031                           indf 0000                  __CFG_FOSC$HS 0000  
                __CFG_LVP$OFF 0000                          ?_ISR 0070                          l1601 0FB4  
                        l1613 0FE9                          l1617 0FF7                          l1609 0FDC  
                        l1813 0D6A                          l1591 0F94                          l1599 0FA4  
                        STR_1 043A                          STR_2 04A8                          STR_3 0462  
                        STR_4 04C8                          STR_5 0485                          STR_6 04E8  
                        STR_7 04F9                          u2105 0FB6                          u2115 0FCB  
                        u2125 0FDD                          u2085 0FA8                          u2485 0DA7  
                        u2577 0E7E                          i1l70 0C73                          i1l90 0CBE  
                        _OERR 00C1                          _main 0E31                          _ftoa 06D1  
                ___ftpack@arg 0070                  ___ftpack@exp 0073                          btemp 007E  
            __end_of_ADC_Init 0CAA              __end_of_ADC_Read 0CC2                          ltemp 007E  
                        start 0012                          ttemp 007E                          wtemp 007E  
                ___ftmul@cntr 002E                  ___ftmul@sign 002F       __end_of_USART_WriteChar 0800  
                       ??_ISR 0053                  ___fttol@exp1 003D                  ___fttol@lval 0039  
             __end_of___aldiv 1000                         ?_main 0070                         ?_ftoa 0045  
             __end_of___ftadd 038B                 __CFG_WDTE$OFF 0000               __end_of___ftneg 0C82  
             __end_of___lldiv 03E9               __end_of___ftmul 06D1               __end_of___llmod 0E31  
             __end_of___ftsub 0CF9               __end_of___fttol 0F71                         i1l101 05A2  
                       i1l103 05C2                         i1l104 05C7                         i1l105 05CC  
                       i1l106 05D1                         i1l131 00C2                         i1l107 05F3  
                       i1l142 012B                         i1l139 0107                         i1l412 07DA  
                       i1l245 0D26                         i1l406 07C1                         i1l435 032C  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
                       _TXREG 0019                 __CFG_PWRTE$ON 0000                  ___lltoft@exp 007D  
                USART_Init@BR 00B8               __end_of_dpowers 043A               __end_of_isdigit 0C98  
                       _input 005C                 ___ftpack@sign 0074                         ftoa@f 0045  
                       ftoa@l 004E                __CFG_BOREN$OFF 0000                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_sprintf 0284  
                 ?_USART_Init 00AF               __initialization 0015                  __end_of_main 0E86  
                __end_of_ftoa 078B                        ??_main 00B9                        ??_ftoa 0049  
               ___fttol@sign1 0038      USART_WriteChar@USARTData 00A0              ___llmod@dividend 0024  
                      _ADRESH 001E                        _ADRESL 009E              __end_of___ftpack 07F3  
            __end_of___lltoft 0D6A                        i1l1311 07A6                        i1l1321 07D0  
                      i1l1313 07AB                        i1l1305 0793                        i1l1403 031C  
                      i1l1309 079A                        i1l1413 0350                        i1l1405 0328  
                      i1l1501 00AE                        i1l1319 07C6                        i1l1423 0373  
                      i1l1511 0102                        i1l1409 033E                        i1l1433 039B  
                      i1l1345 0D1E                        i1l1513 0109                        i1l1363 02AD  
                      i1l1443 03D3                        i1l1435 03AB                        i1l1339 0C96  
                      i1l1523 013D                        i1l1373 02C3                        i1l1533 015F  
                      i1l1517 010E                        i1l1391 02F2                        i1l1367 02B4  
                      i1l1711 0EFD                        i1l1447 03E0                        i1l1463 0E1B  
                      i1l1625 0EAD                        i1l1393 02FE                        i1l1385 02DD  
                      i1l1457 0DED                        i1l1553 01D7                        i1l1545 01A5  
                      i1l1537 0165                        i1l1395 0303                        i1l1731 0F3F  
                      i1l1459 0DFD                        i1l1467 0E28                        i1l1821 0CCB  
                      i1l1629 0ED4                        i1l1653 062C                        i1l1397 0307  
                      i1l1741 0F5A                        i1l1573 0270                        i1l1557 01F8  
                      i1l1549 01BD                        i1l1493 006C                        i1l1647 0616  
                      i1l1567 0212                        i1l1559 01FC                        i1l1487 0055  
                      i1l1575 002F                        i1l1903 059B                        i1l1681 06A3  
                      i1l1665 066B                        i1l1745 0F68                        i1l1737 0F4C  
                      i1l1729 0F2F                        i1l1753 0D43                        i1l1577 027F  
                      i1l1739 0F57                        i1l1755 0D55                        i1l1765 0CF9  
                      i1l1829 0CDA                        i1l1677 0693                        i1l1669 067B  
                      u202_25 021D                        i1l1855 070A                        i1l1929 05E2  
                      i1l1891 0575                        u131_25 079F                        u203_25 027C  
                      i1l1887 0568                        u133_25 07BA                        u222_25 0638  
                      u135_25 07C9                        u231_25 06A4                        u223_25 064A  
                      u143_25 0D27                        u216_21 0EA0                        u216_22 0EA1  
                      u216_23 0EA6                        u216_24 0EA7                        u232_25 06AC  
                      u144_25 0D2E                        u161_25 0308                        u218_21 0EC7  
                      u218_22 0EC8                        u218_23 0ECD                        u218_24 0ECE  
                      u138_25 07E1                        u226_25 067C                        u242_25 0F4E  
                      u227_25 0684                        u155_25 02DE                        u171_25 039F  
                      u164_25 031D                        u236_25 0F04                        u180_25 0E0B  
                      u245_25 0D48                        u173_25 03AD                        u181_25 0E1C  
                      u158_25 02F3                        u174_25 03C2                        u239_25 0F30  
                      u175_25 03D4              __end_of___lwtoft 03FD                        u178_25 0DF1  
                      u194_25 0168                        u258_27 0562                        u195_25 019B  
                      u259_27 0CB9                        u197_25 01B4                        u198_25 01CE  
                      u199_25 01E8           i1_USART_WriteString 0CF9                        ___ftge 0E86  
                   ??___aldiv 00A8                        ___wmul 0D1C                     ??___ftadd 0020  
            ?_USART_WriteChar 0070                     ??___ftneg 0073                     ??___lldiv 0078  
                   ??___ftmul 0026                     ??___llmod 0028                     ??___ftsub 007E  
                   ??___fttol 0034                        _buffer 0062               ADC_Read@channel 0070  
  i1USART_WriteChar@USARTData 0070                        _status 006B                        ftoa@cp 0052  
       ___ftmul@f3_as_product 002B                     ??_isdigit 0070                     ?_ADC_Init 0070  
                   ?_ADC_Read 0070                        saved_w 007E          ?i1_USART_WriteString 0071  
         __size_of_USART_Init 0048                     ??_sprintf 0034       __end_of__initialization 0024  
                  ___ftadd@f1 0078                    ___ftadd@f2 007B                    ___ftge@ff1 0070  
                  ___ftge@ff2 0073                    ___ftneg@f1 0070                    ___ftmul@f1 0020  
                  ___ftmul@f2 0023                    ___ftsub@f1 002A                    ___ftsub@f2 0027  
                  ___fttol@f1 0030                __pcstackCOMMON 0070                    ___lltoft@c 0078  
                  ___lwtoft@c 0078                    ??_ADC_Init 00A0                    ??_ADC_Read 0072  
       ??i1_USART_WriteString 0073                  sprintf@width 0040                    __pbssBANK0 005C  
                  __pbssBANK1 00BC                       ISR@resp 0059                    __pmaintext 0E31  
                     ?___ftge 0070                       ?___wmul 0070                    __pintentry 0004  
                   ?___ftpack 0070                     ?___lltoft 0078                     ?___lwtoft 0078  
                  __stringtab 0400                       _Display 0061                     _ADCResult 005F  
                ??_USART_Init 00B3                       ___aldiv 0F71               __size_of___ftge 005D  
                     ___ftadd 0284                       ___ftneg 0C7A                       ___lldiv 038B  
             __size_of___wmul 0023                       ___ftmul 05FE                       ___llmod 0DE3  
                     ___ftsub 0CDD                       ___fttol 0EE3                    ??___ftpack 0075  
                  ??___lltoft 007C                       __ptext1 0D6A                       __ptext2 07F3  
                     __ptext3 0D9B                       __ptext4 0F71                       __ptext5 0C98  
                     __ptext6 0504                       __ptext7 06D1                       __ptext8 0028  
                     __ptext9 0C8A                    ??___lwtoft 007B                  __size_of_ISR 00FA  
                     _dpowers 0412                       _isdigit 0C8A              ___aldiv@dividend 00A4  
 USART_ReceiveChar@USART_Data 0074            __end_of_USART_Init 0DE3                       _sprintf 0028  
                     clrloop0 0C83          end_of_initialization 0024                       ftoa@buf 00BC  
                     ftoa@rem 004A               ___lldiv@divisor 0070               ___lldiv@counter 007D  
                   _RCSTAbits 0018              ___aldiv@quotient 00AB                  __pstringtext 0400  
           __size_of_ADC_Init 0012             __size_of_ADC_Read 0018                     _TXSTAbits 0098  
                 ___ftmul@exp 002A                __end_of___ftge 0EE3                __end_of___wmul 0D3F  
           i1_USART_WriteChar 0C72            ?i1_USART_WriteChar 0070      __size_of_USART_WriteChar 000D  
         start_initialization 0015                   __end_of_ISR 05FE                    ftoa@status 0048  
         ??i1_USART_WriteChar 0070               ___llmod@divisor 0020               ___llmod@counter 0029  
           _USART_ReceiveChar 0CC2                      ??___ftge 0076            ?_USART_ReceiveChar 0070  
   __end_ofi1_USART_WriteChar 0C7A                      ??___wmul 0074   __end_ofi1_USART_WriteString 0D1C  
         ??_USART_ReceiveChar 0073             __size_of___ftpack 0068             __size_of___lltoft 002B  
                   ___latbits 0002             __size_of___lwtoft 0014                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0           __end_of__stringdata 0504                   sprintf@_val 003B  
                 sprintf@flag 0039                   sprintf@prec 0042     __end_of_USART_ReceiveChar 0CDD  
                    ISR@byte1 005B                      ISR@byte2 005A                      ?___aldiv 00A0  
                    ?___ftadd 0078                      ?___ftneg 0070                      ?___lldiv 0070  
                    ?___ftmul 0020                      ?___llmod 0020                      ?___ftsub 0027  
                    ?___fttol 0030            USART_Init@BaudRate 00AF                      ?_isdigit 0070  
                    _ADC_Init 0C98                      _ADC_Read 0CAA                      ?_sprintf 002A  
           ??_USART_WriteChar 00A0               ___aldiv@divisor 00A0             interrupt_function 0004  
             ___aldiv@counter 00A9                ___wmul@product 0074                     clear_ram0 0C82  
                    _PIE1bits 008C                      _PIR1bits 000C    __size_ofi1_USART_WriteChar 0008  
                  _ADCON0bits 001F                   __stringbase 0412                    _ADCON1bits 009F  
                 __stringdata 043A             ___wmul@multiplier 0070    __size_of_USART_ReceiveChar 001B  
            __size_of___aldiv 008F              __size_of___ftadd 0107              __size_of___ftneg 0008  
            __size_of___lldiv 005E              __size_of___ftmul 00D3              __size_of___llmod 004E  
            __size_of___ftsub 001C              __size_of___fttol 008E                      ___ftpack 078B  
          __end_of__stringtab 0412                      ___lltoft 0D3F                   _isdigit$602 0070  
                    ___lwtoft 03E9              __size_of_isdigit 000E             _USART_WriteString 0D6A  
                    __ptext10 0D1C                      __ptext11 0DE3                      __ptext20 03E9  
                    __ptext12 038B                      __ptext21 078B                      __ptext13 0D3F  
                    __ptext22 0CC2                      __ptext14 0EE3                      __ptext23 0CF9  
                    __ptext15 0CDD                      __ptext24 0C72                      __ptext16 0284  
                    __ptext25 0CAA                      __ptext17 0C7A                      __ptext18 05FE  
                    __ptext19 0E86            ?_USART_WriteString 00A1              __size_of_sprintf 025C  
               __size_of_main 0055                 __size_of_ftoa 00BA           ??_USART_WriteString 00A3  
      i1USART_WriteString@str 0071                    _INTCONbits 000B     __end_of_USART_WriteString 0D9B  
                    isdigit@c 0071                      intlevel1 0000                     sprintf@ap 003A  
                   sprintf@sp 003F              ___lldiv@dividend 0074                     stringcode 040A  
        USART_WriteString@str 00A1               _USART_WriteChar 07F3                      sprintf@c 0044  
                    sprintf@f 002A              ___lldiv@quotient 0079                      stringtab 0400  
                ___aldiv@sign 00AA  __size_ofi1_USART_WriteString 0023                    _USART_Init 0D9B  
