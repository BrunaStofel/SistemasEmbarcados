

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed May 13 12:12:06 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001B                     	;# 
    70  001C                     	;# 
    71  001D                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  0087                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  010C                     	;# 
    94  010D                     	;# 
    95  010E                     	;# 
    96  010F                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99                           
   100                           	psect	strings
   101  0500                     __pstrings:	
   102  0500                     stringtab:	
   103  0500                     __stringtab:	
   104                           
   105                           ;	String table - string pointers are 1 byte each
   106  0500  1BFF               	btfsc	btemp+1,7
   107  0501  2D0A               	ljmp	stringcode
   108  0502  1383               	bcf	3,7
   109  0503  187F               	btfsc	btemp+1,0
   110  0504  1783               	bsf	3,7
   111  0505  0800               	movf	0,w
   112  0506  0A84               	incf	4,f
   113  0507  1903               	skipnz
   114  0508  0AFF               	incf	btemp+1,f
   115  0509  0008               	return
   116  050A                     stringcode:	
   117  050A                     stringdir:	
   118  050A  3005               	movlw	high stringdir
   119  050B  008A               	movwf	10
   120  050C  0804               	movf	4,w
   121  050D  0A84               	incf	4,f
   122  050E  0782               	addwf	2,f
   123  050F                     __stringbase:	
   124  050F  3400               	retlw	0
   125  0510                     __end_of__stringtab:	
   126  0510                     _dpowers:	
   127  0510  3401               	retlw	1
   128  0511  3400               	retlw	0
   129  0512  3400               	retlw	0
   130  0513  3400               	retlw	0
   131  0514  340A               	retlw	10
   132  0515  3400               	retlw	0
   133  0516  3400               	retlw	0
   134  0517  3400               	retlw	0
   135  0518  3464               	retlw	100
   136  0519  3400               	retlw	0
   137  051A  3400               	retlw	0
   138  051B  3400               	retlw	0
   139  051C  34E8               	retlw	232
   140  051D  3403               	retlw	3
   141  051E  3400               	retlw	0
   142  051F  3400               	retlw	0
   143  0520  3410               	retlw	16
   144  0521  3427               	retlw	39
   145  0522  3400               	retlw	0
   146  0523  3400               	retlw	0
   147  0524  34A0               	retlw	160
   148  0525  3486               	retlw	134
   149  0526  3401               	retlw	1
   150  0527  3400               	retlw	0
   151  0528  3440               	retlw	64
   152  0529  3442               	retlw	66
   153  052A  340F               	retlw	15
   154  052B  3400               	retlw	0
   155  052C  3480               	retlw	128
   156  052D  3496               	retlw	150
   157  052E  3498               	retlw	152
   158  052F  3400               	retlw	0
   159  0530  3400               	retlw	0
   160  0531  34E1               	retlw	225
   161  0532  34F5               	retlw	245
   162  0533  3405               	retlw	5
   163  0534  3400               	retlw	0
   164  0535  34CA               	retlw	202
   165  0536  349A               	retlw	154
   166  0537  343B               	retlw	59
   167  0538                     __end_of_dpowers:	
   168  000E                     _TMR1	set	14
   169  001F                     _ADCON0bits	set	31
   170  001E                     _ADRESH	set	30
   171  000B                     _INTCONbits	set	11
   172  000C                     _PIR1bits	set	12
   173  0005                     _PORTA	set	5
   174  0006                     _PORTB	set	6
   175  0007                     _PORTC	set	7
   176  0008                     _PORTD	set	8
   177  0009                     _PORTE	set	9
   178  001A                     _RCREG	set	26
   179  0018                     _RCSTAbits	set	24
   180  0010                     _T1CONbits	set	16
   181  0019                     _TXREG	set	25
   182  00C1                     _OERR	set	193
   183  0034                     _RB4	set	52
   184  0035                     _RB5	set	53
   185  009F                     _ADCON1bits	set	159
   186  009E                     _ADRESL	set	158
   187  008C                     _PIE1bits	set	140
   188  0099                     _SPBRG	set	153
   189  0085                     _TRISA	set	133
   190  0086                     _TRISB	set	134
   191  0087                     _TRISC	set	135
   192  0088                     _TRISD	set	136
   193  0089                     _TRISE	set	137
   194  0098                     _TXSTAbits	set	152
   195  0538                     __stringdata:	
   196  0538                     STR_1:	
   197  0538  340A               	retlw	10
   198  0539  340D               	retlw	13
   199  053A  3420               	retlw	32	;' '
   200  053B  342D               	retlw	45	;'-'
   201  053C  342D               	retlw	45	;'-'
   202  053D  342D               	retlw	45	;'-'
   203  053E  342D               	retlw	45	;'-'
   204  053F  342D               	retlw	45	;'-'
   205  0540  342D               	retlw	45	;'-'
   206  0541  342D               	retlw	45	;'-'
   207  0542  3420               	retlw	32	;' '
   208  0543  3445               	retlw	69	;'E'
   209  0544  3453               	retlw	83	;'S'
   210  0545  3454               	retlw	84	;'T'
   211  0546  344F               	retlw	79	;'O'
   212  0547  3455               	retlw	85	;'U'
   213  0548  3452               	retlw	82	;'R'
   214  0549  344F               	retlw	79	;'O'
   215  054A  3420               	retlw	32	;' '
   216  054B  3444               	retlw	68	;'D'
   217  054C  3445               	retlw	69	;'E'
   218  054D  3420               	retlw	32	;' '
   219  054E  3450               	retlw	80	;'P'
   220  054F  3449               	retlw	73	;'I'
   221  0550  344C               	retlw	76	;'L'
   222  0551  3448               	retlw	72	;'H'
   223  0552  3441               	retlw	65	;'A'
   224  0553  3420               	retlw	32	;' '
   225  0554  342D               	retlw	45	;'-'
   226  0555  342D               	retlw	45	;'-'
   227  0556  342D               	retlw	45	;'-'
   228  0557  342D               	retlw	45	;'-'
   229  0558  342D               	retlw	45	;'-'
   230  0559  342D               	retlw	45	;'-'
   231  055A  342D               	retlw	45	;'-'
   232  055B  3420               	retlw	32	;' '
   233  055C  340A               	retlw	10
   234  055D  340D               	retlw	13
   235  055E  3420               	retlw	32	;' '
   236  055F  3400               	retlw	0
   237  0560                     STR_3:	
   238  0560  342D               	retlw	45	;'-'
   239  0561  342D               	retlw	45	;'-'
   240  0562  342D               	retlw	45	;'-'
   241  0563  342D               	retlw	45	;'-'
   242  0564  342D               	retlw	45	;'-'
   243  0565  342D               	retlw	45	;'-'
   244  0566  342D               	retlw	45	;'-'
   245  0567  342D               	retlw	45	;'-'
   246  0568  342D               	retlw	45	;'-'
   247  0569  342D               	retlw	45	;'-'
   248  056A  342D               	retlw	45	;'-'
   249  056B  342D               	retlw	45	;'-'
   250  056C  343E               	retlw	62	;'>'
   251  056D  3420               	retlw	32	;' '
   252  056E  3476               	retlw	118	;'v'
   253  056F  3461               	retlw	97	;'a'
   254  0570  346C               	retlw	108	;'l'
   255  0571  3476               	retlw	118	;'v'
   256  0572  3475               	retlw	117	;'u'
   257  0573  346C               	retlw	108	;'l'
   258  0574  3461               	retlw	97	;'a'
   259  0575  3420               	retlw	32	;' '
   260  0576  3431               	retlw	49	;'1'
   261  0577  3420               	retlw	32	;' '
   262  0578  3464               	retlw	100	;'d'
   263  0579  3465               	retlw	101	;'e'
   264  057A  3473               	retlw	115	;'s'
   265  057B  3461               	retlw	97	;'a'
   266  057C  3474               	retlw	116	;'t'
   267  057D  3469               	retlw	105	;'i'
   268  057E  3476               	retlw	118	;'v'
   269  057F  3461               	retlw	97	;'a'
   270  0580  3464               	retlw	100	;'d'
   271  0581  3461               	retlw	97	;'a'
   272  0582  3400               	retlw	0
   273  0583                     STR_5:	
   274  0583  342D               	retlw	45	;'-'
   275  0584  342D               	retlw	45	;'-'
   276  0585  342D               	retlw	45	;'-'
   277  0586  342D               	retlw	45	;'-'
   278  0587  342D               	retlw	45	;'-'
   279  0588  342D               	retlw	45	;'-'
   280  0589  342D               	retlw	45	;'-'
   281  058A  342D               	retlw	45	;'-'
   282  058B  342D               	retlw	45	;'-'
   283  058C  342D               	retlw	45	;'-'
   284  058D  342D               	retlw	45	;'-'
   285  058E  342D               	retlw	45	;'-'
   286  058F  343E               	retlw	62	;'>'
   287  0590  3420               	retlw	32	;' '
   288  0591  3476               	retlw	118	;'v'
   289  0592  3461               	retlw	97	;'a'
   290  0593  346C               	retlw	108	;'l'
   291  0594  3476               	retlw	118	;'v'
   292  0595  3475               	retlw	117	;'u'
   293  0596  346C               	retlw	108	;'l'
   294  0597  3461               	retlw	97	;'a'
   295  0598  3420               	retlw	32	;' '
   296  0599  3432               	retlw	50	;'2'
   297  059A  3420               	retlw	32	;' '
   298  059B  3464               	retlw	100	;'d'
   299  059C  3465               	retlw	101	;'e'
   300  059D  3473               	retlw	115	;'s'
   301  059E  3461               	retlw	97	;'a'
   302  059F  3474               	retlw	116	;'t'
   303  05A0  3469               	retlw	105	;'i'
   304  05A1  3476               	retlw	118	;'v'
   305  05A2  3461               	retlw	97	;'a'
   306  05A3  3464               	retlw	100	;'d'
   307  05A4  3461               	retlw	97	;'a'
   308  05A5  3400               	retlw	0
   309  05A6                     STR_2:	
   310  05A6  342D               	retlw	45	;'-'
   311  05A7  342D               	retlw	45	;'-'
   312  05A8  342D               	retlw	45	;'-'
   313  05A9  342D               	retlw	45	;'-'
   314  05AA  342D               	retlw	45	;'-'
   315  05AB  342D               	retlw	45	;'-'
   316  05AC  342D               	retlw	45	;'-'
   317  05AD  342D               	retlw	45	;'-'
   318  05AE  342D               	retlw	45	;'-'
   319  05AF  342D               	retlw	45	;'-'
   320  05B0  342D               	retlw	45	;'-'
   321  05B1  342D               	retlw	45	;'-'
   322  05B2  343E               	retlw	62	;'>'
   323  05B3  3420               	retlw	32	;' '
   324  05B4  3476               	retlw	118	;'v'
   325  05B5  3461               	retlw	97	;'a'
   326  05B6  346C               	retlw	108	;'l'
   327  05B7  3476               	retlw	118	;'v'
   328  05B8  3475               	retlw	117	;'u'
   329  05B9  346C               	retlw	108	;'l'
   330  05BA  3461               	retlw	97	;'a'
   331  05BB  3420               	retlw	32	;' '
   332  05BC  3431               	retlw	49	;'1'
   333  05BD  3420               	retlw	32	;' '
   334  05BE  3461               	retlw	97	;'a'
   335  05BF  3474               	retlw	116	;'t'
   336  05C0  3469               	retlw	105	;'i'
   337  05C1  3476               	retlw	118	;'v'
   338  05C2  3461               	retlw	97	;'a'
   339  05C3  3464               	retlw	100	;'d'
   340  05C4  3461               	retlw	97	;'a'
   341  05C5  3400               	retlw	0
   342  05C6                     STR_4:	
   343  05C6  342D               	retlw	45	;'-'
   344  05C7  342D               	retlw	45	;'-'
   345  05C8  342D               	retlw	45	;'-'
   346  05C9  342D               	retlw	45	;'-'
   347  05CA  342D               	retlw	45	;'-'
   348  05CB  342D               	retlw	45	;'-'
   349  05CC  342D               	retlw	45	;'-'
   350  05CD  342D               	retlw	45	;'-'
   351  05CE  342D               	retlw	45	;'-'
   352  05CF  342D               	retlw	45	;'-'
   353  05D0  342D               	retlw	45	;'-'
   354  05D1  342D               	retlw	45	;'-'
   355  05D2  343E               	retlw	62	;'>'
   356  05D3  3420               	retlw	32	;' '
   357  05D4  3476               	retlw	118	;'v'
   358  05D5  3461               	retlw	97	;'a'
   359  05D6  346C               	retlw	108	;'l'
   360  05D7  3476               	retlw	118	;'v'
   361  05D8  3475               	retlw	117	;'u'
   362  05D9  346C               	retlw	108	;'l'
   363  05DA  3461               	retlw	97	;'a'
   364  05DB  3420               	retlw	32	;' '
   365  05DC  3432               	retlw	50	;'2'
   366  05DD  3420               	retlw	32	;' '
   367  05DE  3461               	retlw	97	;'a'
   368  05DF  3474               	retlw	116	;'t'
   369  05E0  3469               	retlw	105	;'i'
   370  05E1  3476               	retlw	118	;'v'
   371  05E2  3461               	retlw	97	;'a'
   372  05E3  3464               	retlw	100	;'d'
   373  05E4  3461               	retlw	97	;'a'
   374  05E5  3400               	retlw	0
   375  05E6                     STR_6:	
   376  05E6  3425               	retlw	37	;'%'
   377  05E7  346C               	retlw	108	;'l'
   378  05E8  3475               	retlw	117	;'u'
   379  05E9  342E               	retlw	46	;'.'
   380  05EA  3425               	retlw	37	;'%'
   381  05EB  3436               	retlw	54	;'6'
   382  05EC  342E               	retlw	46	;'.'
   383  05ED  3436               	retlw	54	;'6'
   384  05EE  346C               	retlw	108	;'l'
   385  05EF  3475               	retlw	117	;'u'
   386  05F0  3400               	retlw	0
   387  05F1                     __end_of__stringdata:	
   388                           
   389                           ; #config settings
   390  0000                     
   391                           	psect	cinit
   392  0015                     start_initialization:	
   393  0015                     __initialization:	
   394                           
   395                           ; Clear objects allocated to BANK0
   396  0015  1383               	bcf	3,7	;select IRP bank0
   397  0016  305B               	movlw	low __pbssBANK0
   398  0017  0084               	movwf	4
   399  0018  3070               	movlw	low (__pbssBANK0+21)
   400  0019  120A  158A  24D8  120A  118A  	fcall	clear_ram0
   401                           
   402                           ; Clear objects allocated to BANK1
   403  001E  30BC               	movlw	low __pbssBANK1
   404  001F  0084               	movwf	4
   405  0020  30CD               	movlw	low (__pbssBANK1+17)
   406  0021  120A  158A  24D8   	fcall	clear_ram0
   407  0024                     end_of_initialization:	
   408                           ;End of C runtime variable initialization code
   409                           
   410  0024                     __end_of__initialization:	
   411  0024  0183               	clrf	3
   412  0025  120A  158A  2E37   	ljmp	_main	;jump to C main() function
   413                           
   414                           	psect	bssBANK0
   415  005B                     __pbssBANK0:	
   416  005B                     _input:	
   417  005B                     	ds	3
   418  005E                     _ADCResult:	
   419  005E                     	ds	2
   420  0060                     _cont1:	
   421  0060                     	ds	2
   422  0062                     _sec:	
   423  0062                     	ds	2
   424  0064                     _Display:	
   425  0064                     	ds	1
   426  0065                     _buffer:	
   427  0065                     	ds	9
   428  006E                     _status:	
   429  006E                     	ds	2
   430                           
   431                           	psect	bssBANK1
   432  00BC                     __pbssBANK1:	
   433  00BC                     ftoa@buf:	
   434  00BC                     	ds	17
   435                           
   436                           	psect	clrtext
   437  0CD8                     clear_ram0:	
   438                           ;	Called with FSR containing the base address, and
   439                           ;	W with the last address+1
   440                           
   441  0CD8  0064               	clrwdt	;clear the watchdog before getting into this loop
   442  0CD9                     clrloop0:	
   443  0CD9  0180               	clrf	0	;clear RAM location pointed to by FSR
   444  0CDA  0A84               	incf	4,f	;increment pointer
   445  0CDB  0604               	xorwf	4,w	;XOR with final address
   446  0CDC  1903               	btfsc	3,2	;have we reached the end yet?
   447  0CDD  3400               	retlw	0	;all done for this memory range, return
   448  0CDE  0604               	xorwf	4,w	;XOR again to restore value
   449  0CDF  2CD9               	goto	clrloop0	;do the next byte
   450                           
   451                           	psect	cstackBANK1
   452  00A0                     __pcstackBANK1:	
   453  00A0                     ??_ADC_Init:	
   454  00A0                     ??_TIMER1_Init:	
   455                           ; 0 bytes @ 0x0
   456                           
   457  00A0                     ?___aldiv:	
   458                           ; 0 bytes @ 0x0
   459                           
   460  00A0                     ___aldiv@divisor:	
   461                           ; 4 bytes @ 0x0
   462                           
   463                           
   464                           ; 4 bytes @ 0x0
   465  00A0                     	ds	4
   466  00A4                     ___aldiv@dividend:	
   467                           
   468                           ; 4 bytes @ 0x4
   469  00A4                     	ds	4
   470  00A8                     ??___aldiv:	
   471                           
   472                           ; 0 bytes @ 0x8
   473  00A8                     	ds	1
   474  00A9                     ___aldiv@counter:	
   475                           
   476                           ; 1 bytes @ 0x9
   477  00A9                     	ds	1
   478  00AA                     ___aldiv@sign:	
   479                           
   480                           ; 1 bytes @ 0xA
   481  00AA                     	ds	1
   482  00AB                     ___aldiv@quotient:	
   483                           
   484                           ; 4 bytes @ 0xB
   485  00AB                     	ds	4
   486  00AF                     ?_USART_Init:	
   487  00AF                     USART_Init@BaudRate:	
   488                           ; 0 bytes @ 0xF
   489                           
   490                           
   491                           ; 4 bytes @ 0xF
   492  00AF                     	ds	4
   493  00B3                     ??_USART_Init:	
   494                           
   495                           ; 0 bytes @ 0x13
   496  00B3                     	ds	5
   497  00B8                     USART_Init@BR:	
   498                           
   499                           ; 1 bytes @ 0x18
   500  00B8                     	ds	1
   501  00B9                     ??_main:	
   502                           
   503                           ; 0 bytes @ 0x19
   504  00B9                     	ds	3
   505                           
   506                           	psect	cstackCOMMON
   507  0070                     __pcstackCOMMON:	
   508  0070                     ?_isdigit:	
   509  0070                     ??_isdigit:	
   510                           ; 1 bit 
   511                           
   512  0070                     ?_USART_WriteChar:	
   513                           ; 0 bytes @ 0x0
   514                           
   515  0070                     ??_USART_WriteChar:	
   516                           ; 0 bytes @ 0x0
   517                           
   518  0070                     ?_ADC_Init:	
   519                           ; 0 bytes @ 0x0
   520                           
   521  0070                     ?_ADC_Read:	
   522                           ; 0 bytes @ 0x0
   523                           
   524  0070                     ?_TIMER1_Init:	
   525                           ; 0 bytes @ 0x0
   526                           
   527  0070                     ?_ISR:	
   528                           ; 0 bytes @ 0x0
   529                           
   530  0070                     ?_main:	
   531                           ; 0 bytes @ 0x0
   532                           
   533  0070                     ?___ftge:	
   534                           ; 0 bytes @ 0x0
   535                           
   536  0070                     ?_USART_ReceiveChar:	
   537                           ; 1 bit 
   538                           
   539  0070                     ?___wmul:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ?___ftpack:	
   543                           ; 2 bytes @ 0x0
   544                           
   545  0070                     ?___ftneg:	
   546                           ; 3 bytes @ 0x0
   547                           
   548  0070                     ?___lldiv:	
   549                           ; 3 bytes @ 0x0
   550                           
   551  0070                     USART_WriteChar@USARTData:	
   552                           ; 4 bytes @ 0x0
   553                           
   554  0070                     _isdigit$651:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ADC_Read@channel:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ___wmul@multiplier:	
   561                           ; 2 bytes @ 0x0
   562                           
   563  0070                     ___ftpack@arg:	
   564                           ; 2 bytes @ 0x0
   565                           
   566  0070                     ___ftge@ff1:	
   567                           ; 3 bytes @ 0x0
   568                           
   569  0070                     ___ftneg@f1:	
   570                           ; 3 bytes @ 0x0
   571                           
   572  0070                     ___lldiv@divisor:	
   573                           ; 3 bytes @ 0x0
   574                           
   575                           
   576                           ; 4 bytes @ 0x0
   577  0070                     	ds	1
   578  0071                     ?_USART_WriteString:	
   579  0071                     isdigit@c:	
   580                           ; 0 bytes @ 0x1
   581                           
   582  0071                     USART_WriteString@str:	
   583                           ; 1 bytes @ 0x1
   584                           
   585                           
   586                           ; 2 bytes @ 0x1
   587  0071                     	ds	1
   588  0072                     ??_ADC_Read:	
   589  0072                     ___wmul@multiplicand:	
   590                           ; 0 bytes @ 0x2
   591                           
   592                           
   593                           ; 2 bytes @ 0x2
   594  0072                     	ds	1
   595  0073                     ??_USART_WriteString:	
   596  0073                     ??_USART_ReceiveChar:	
   597                           ; 0 bytes @ 0x3
   598                           
   599  0073                     ??___ftneg:	
   600                           ; 0 bytes @ 0x3
   601                           
   602  0073                     ___ftpack@exp:	
   603                           ; 0 bytes @ 0x3
   604                           
   605  0073                     ___ftge@ff2:	
   606                           ; 1 bytes @ 0x3
   607                           
   608                           
   609                           ; 3 bytes @ 0x3
   610  0073                     	ds	1
   611  0074                     ??___wmul:	
   612  0074                     USART_ReceiveChar@USART_Data:	
   613                           ; 0 bytes @ 0x4
   614                           
   615  0074                     ___ftpack@sign:	
   616                           ; 1 bytes @ 0x4
   617                           
   618  0074                     ___wmul@product:	
   619                           ; 1 bytes @ 0x4
   620                           
   621  0074                     ___lldiv@dividend:	
   622                           ; 2 bytes @ 0x4
   623                           
   624                           
   625                           ; 4 bytes @ 0x4
   626  0074                     	ds	1
   627  0075                     ??___ftpack:	
   628                           
   629                           ; 0 bytes @ 0x5
   630  0075                     	ds	1
   631  0076                     ??___ftge:	
   632                           
   633                           ; 0 bytes @ 0x6
   634  0076                     	ds	2
   635  0078                     ??___lldiv:	
   636  0078                     ?___ftadd:	
   637                           ; 0 bytes @ 0x8
   638                           
   639  0078                     ?___lltoft:	
   640                           ; 3 bytes @ 0x8
   641                           
   642  0078                     ?___lwtoft:	
   643                           ; 3 bytes @ 0x8
   644                           
   645  0078                     ___lwtoft@c:	
   646                           ; 3 bytes @ 0x8
   647                           
   648  0078                     ___ftadd@f1:	
   649                           ; 2 bytes @ 0x8
   650                           
   651  0078                     ___lltoft@c:	
   652                           ; 3 bytes @ 0x8
   653                           
   654                           
   655                           ; 4 bytes @ 0x8
   656  0078                     	ds	1
   657  0079                     ___lldiv@quotient:	
   658                           
   659                           ; 4 bytes @ 0x9
   660  0079                     	ds	2
   661  007B                     ??___lwtoft:	
   662  007B                     ___ftadd@f2:	
   663                           ; 0 bytes @ 0xB
   664                           
   665                           
   666                           ; 3 bytes @ 0xB
   667  007B                     	ds	1
   668  007C                     ??___lltoft:	
   669                           
   670                           ; 0 bytes @ 0xC
   671  007C                     	ds	1
   672  007D                     ___lldiv@counter:	
   673  007D                     ___lltoft@exp:	
   674                           ; 1 bytes @ 0xD
   675                           
   676                           
   677                           ; 1 bytes @ 0xD
   678  007D                     	ds	1
   679  007E                     ??___ftsub:	
   680                           
   681                           	psect	cstackBANK0
   682  0020                     __pcstackBANK0:	
   683                           ; 0 bytes @ 0xE
   684                           
   685  0020                     ??___ftadd:	
   686  0020                     ?___ftmul:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0020                     ?___llmod:	
   690                           ; 3 bytes @ 0x0
   691                           
   692  0020                     ___ftmul@f1:	
   693                           ; 4 bytes @ 0x0
   694                           
   695  0020                     ___llmod@divisor:	
   696                           ; 3 bytes @ 0x0
   697                           
   698                           
   699                           ; 4 bytes @ 0x0
   700  0020                     	ds	3
   701  0023                     ___ftmul@f2:	
   702                           
   703                           ; 3 bytes @ 0x3
   704  0023                     	ds	1
   705  0024                     ___ftadd@sign:	
   706  0024                     ___llmod@dividend:	
   707                           ; 1 bytes @ 0x4
   708                           
   709                           
   710                           ; 4 bytes @ 0x4
   711  0024                     	ds	1
   712  0025                     ___ftadd@exp2:	
   713                           
   714                           ; 1 bytes @ 0x5
   715  0025                     	ds	1
   716  0026                     ??___ftmul:	
   717  0026                     ___ftadd@exp1:	
   718                           ; 0 bytes @ 0x6
   719                           
   720                           
   721                           ; 1 bytes @ 0x6
   722  0026                     	ds	1
   723  0027                     ?___ftsub:	
   724  0027                     ___ftsub@f2:	
   725                           ; 3 bytes @ 0x7
   726                           
   727                           
   728                           ; 3 bytes @ 0x7
   729  0027                     	ds	1
   730  0028                     ??___llmod:	
   731                           
   732                           ; 0 bytes @ 0x8
   733  0028                     	ds	1
   734  0029                     ___llmod@counter:	
   735                           
   736                           ; 1 bytes @ 0x9
   737  0029                     	ds	1
   738  002A                     ?_sprintf:	
   739  002A                     sprintf@f:	
   740                           ; 2 bytes @ 0xA
   741                           
   742  002A                     ___ftmul@exp:	
   743                           ; 1 bytes @ 0xA
   744                           
   745  002A                     ___ftsub@f1:	
   746                           ; 1 bytes @ 0xA
   747                           
   748                           
   749                           ; 3 bytes @ 0xA
   750  002A                     	ds	1
   751  002B                     ___ftmul@f3_as_product:	
   752                           
   753                           ; 3 bytes @ 0xB
   754  002B                     	ds	3
   755  002E                     ___ftmul@cntr:	
   756                           
   757                           ; 1 bytes @ 0xE
   758  002E                     	ds	1
   759  002F                     ___ftmul@sign:	
   760                           
   761                           ; 1 bytes @ 0xF
   762  002F                     	ds	1
   763  0030                     ?___fttol:	
   764  0030                     ___fttol@f1:	
   765                           ; 4 bytes @ 0x10
   766                           
   767                           
   768                           ; 3 bytes @ 0x10
   769  0030                     	ds	3
   770  0033                     ??_sprintf:	
   771                           
   772                           ; 0 bytes @ 0x13
   773  0033                     	ds	1
   774  0034                     ??___fttol:	
   775                           
   776                           ; 0 bytes @ 0x14
   777  0034                     	ds	4
   778  0038                     sprintf@flag:	
   779  0038                     ___fttol@sign1:	
   780                           ; 1 bytes @ 0x18
   781                           
   782                           
   783                           ; 1 bytes @ 0x18
   784  0038                     	ds	1
   785  0039                     sprintf@ap:	
   786  0039                     ___fttol@lval:	
   787                           ; 1 bytes @ 0x19
   788                           
   789                           
   790                           ; 4 bytes @ 0x19
   791  0039                     	ds	1
   792  003A                     sprintf@_val:	
   793                           
   794                           ; 4 bytes @ 0x1A
   795  003A                     	ds	3
   796  003D                     ___fttol@exp1:	
   797                           
   798                           ; 1 bytes @ 0x1D
   799  003D                     	ds	1
   800  003E                     sprintf@sp:	
   801                           
   802                           ; 1 bytes @ 0x1E
   803  003E                     	ds	1
   804  003F                     sprintf@width:	
   805                           
   806                           ; 2 bytes @ 0x1F
   807  003F                     	ds	2
   808  0041                     sprintf@prec:	
   809                           
   810                           ; 2 bytes @ 0x21
   811  0041                     	ds	2
   812  0043                     sprintf@c:	
   813                           
   814                           ; 1 bytes @ 0x23
   815  0043                     	ds	1
   816  0044                     ?_ftoa:	
   817  0044                     ftoa@f:	
   818                           ; 1 bytes @ 0x24
   819                           
   820                           
   821                           ; 3 bytes @ 0x24
   822  0044                     	ds	3
   823  0047                     ftoa@status:	
   824                           
   825                           ; 1 bytes @ 0x27
   826  0047                     	ds	1
   827  0048                     ??_ftoa:	
   828                           
   829                           ; 0 bytes @ 0x28
   830  0048                     	ds	1
   831  0049                     ftoa@rem:	
   832                           
   833                           ; 4 bytes @ 0x29
   834  0049                     	ds	4
   835  004D                     ftoa@l:	
   836                           
   837                           ; 4 bytes @ 0x2D
   838  004D                     	ds	4
   839  0051                     ftoa@cp:	
   840                           
   841                           ; 1 bytes @ 0x31
   842  0051                     	ds	1
   843  0052                     ??_ISR:	
   844                           
   845                           ; 0 bytes @ 0x32
   846  0052                     	ds	6
   847  0058                     ISR@resp:	
   848                           
   849                           ; 1 bytes @ 0x38
   850  0058                     	ds	1
   851  0059                     ISR@byte2:	
   852                           
   853                           ; 1 bytes @ 0x39
   854  0059                     	ds	1
   855  005A                     ISR@byte1:	
   856                           
   857                           ; 1 bytes @ 0x3A
   858  005A                     	ds	1
   859                           
   860                           	psect	maintext
   861  0E37                     __pmaintext:	
   862 ;;
   863 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   864 ;;
   865 ;; *************** function _main *****************
   866 ;; Defined at:
   867 ;;		line 252 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no P
      +IC16F877A\Supervisorio.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;		None               void
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0, pclath, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 17F/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   881 ;;      Params:         0       0       0       0       0
   882 ;;      Locals:         0       0       0       0       0
   883 ;;      Temps:          0       0       3       0       0
   884 ;;      Totals:         0       0       3       0       0
   885 ;;Total ram usage:        3 bytes
   886 ;; Hardware stack levels required when called:    7
   887 ;; This function calls:
   888 ;;		_ADC_Init
   889 ;;		_TIMER1_Init
   890 ;;		_USART_Init
   891 ;; This function is called by:
   892 ;;		Startup code after reset
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           
   897                           ;psect for function _main
   898  0E37                     _main:	
   899                           
   900                           ;Supervisorio.c: 254: TRISA = 0b00000001;
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   904  0E37  3001               	movlw	1
   905  0E38  1683               	bsf	3,5	;RP0=1, select bank1
   906  0E39  1303               	bcf	3,6	;RP1=0, select bank1
   907  0E3A  0085               	movwf	5	;volatile
   908                           
   909                           ;Supervisorio.c: 255: PORTA = 0b00000001;
   910  0E3B  3001               	movlw	1
   911  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
   912  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
   913  0E3E  0085               	movwf	5	;volatile
   914                           
   915                           ;Supervisorio.c: 256: TRISB = 0b00000000;
   916  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
   917  0E40  1303               	bcf	3,6	;RP1=0, select bank1
   918  0E41  0186               	clrf	6	;volatile
   919                           
   920                           ;Supervisorio.c: 257: PORTB = 0b00000000;
   921  0E42  1283               	bcf	3,5	;RP0=0, select bank0
   922  0E43  1303               	bcf	3,6	;RP1=0, select bank0
   923  0E44  0186               	clrf	6	;volatile
   924                           
   925                           ;Supervisorio.c: 258: TRISC = 0b10000000;
   926  0E45  3080               	movlw	128
   927  0E46  1683               	bsf	3,5	;RP0=1, select bank1
   928  0E47  1303               	bcf	3,6	;RP1=0, select bank1
   929  0E48  0087               	movwf	7	;volatile
   930                           
   931                           ;Supervisorio.c: 259: PORTC = 0b11000000;
   932  0E49  30C0               	movlw	192
   933  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
   934  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
   935  0E4C  0087               	movwf	7	;volatile
   936                           
   937                           ;Supervisorio.c: 260: TRISD = 0b00000000;
   938  0E4D  1683               	bsf	3,5	;RP0=1, select bank1
   939  0E4E  1303               	bcf	3,6	;RP1=0, select bank1
   940  0E4F  0188               	clrf	8	;volatile
   941                           
   942                           ;Supervisorio.c: 261: PORTD = 0b00000000;
   943  0E50  1283               	bcf	3,5	;RP0=0, select bank0
   944  0E51  1303               	bcf	3,6	;RP1=0, select bank0
   945  0E52  0188               	clrf	8	;volatile
   946                           
   947                           ;Supervisorio.c: 262: TRISE = 0b00000111;
   948  0E53  3007               	movlw	7
   949  0E54  1683               	bsf	3,5	;RP0=1, select bank1
   950  0E55  1303               	bcf	3,6	;RP1=0, select bank1
   951  0E56  0089               	movwf	9	;volatile
   952                           
   953                           ;Supervisorio.c: 263: PORTE = 0b00000111;
   954  0E57  3007               	movlw	7
   955  0E58  1283               	bcf	3,5	;RP0=0, select bank0
   956  0E59  1303               	bcf	3,6	;RP1=0, select bank0
   957  0E5A  0089               	movwf	9	;volatile
   958                           
   959                           ;Supervisorio.c: 265: USART_Init(115200);
   960  0E5B  3000               	movlw	0
   961  0E5C  1683               	bsf	3,5	;RP0=1, select bank1
   962  0E5D  1303               	bcf	3,6	;RP1=0, select bank1
   963  0E5E  00B2               	movwf	(USART_Init@BaudRate+3)^(0+128)
   964  0E5F  3001               	movlw	1
   965  0E60  00B1               	movwf	(USART_Init@BaudRate+2)^(0+128)
   966  0E61  30C2               	movlw	194
   967  0E62  00B0               	movwf	(USART_Init@BaudRate+1)^(0+128)
   968  0E63  3000               	movlw	0
   969  0E64  00AF               	movwf	USART_Init@BaudRate^(0+128)
   970  0E65  120A  158A  25A1  120A  158A  	fcall	_USART_Init
   971                           
   972                           ;Supervisorio.c: 266: ADC_Init();
   973  0E6A  120A  158A  24FE  120A  158A  	fcall	_ADC_Init
   974                           
   975                           ;Supervisorio.c: 268: INTCONbits.PEIE = 1;
   976  0E6F  170B               	bsf	11,6	;volatile
   977                           
   978                           ;Supervisorio.c: 269: INTCONbits.GIE = 1;
   979  0E70  178B               	bsf	11,7	;volatile
   980                           
   981                           ;Supervisorio.c: 270: _delay((unsigned long)((400)*(18432000/4000.0)));
   982  0E71  300A               	movlw	10
   983  0E72  1683               	bsf	3,5	;RP0=1, select bank1
   984  0E73  1303               	bcf	3,6	;RP1=0, select bank1
   985  0E74  00BB               	movwf	(??_main^(0+128)+2)
   986  0E75  305A               	movlw	90
   987  0E76  00BA               	movwf	(??_main^(0+128)+1)
   988  0E77  30C3               	movlw	195
   989  0E78  00B9               	movwf	??_main^(0+128)
   990  0E79                     u2577:	
   991  0E79  0BB9               	decfsz	??_main^(0+128),f
   992  0E7A  2E79               	goto	u2577
   993  0E7B  0BBA               	decfsz	(??_main^(0+128)+1),f
   994  0E7C  2E79               	goto	u2577
   995  0E7D  0BBB               	decfsz	(??_main^(0+128)+2),f
   996  0E7E  2E79               	goto	u2577
   997  0E7F  2E80               	nop2
   998                           
   999                           ;Supervisorio.c: 271: TIMER1_Init();
  1000  0E80  120A  158A  24EE  120A  158A  	fcall	_TIMER1_Init
  1001  0E85                     l123:	
  1002                           ;Supervisorio.c: 274: while(1)
  1003                           
  1004                           
  1005                           ;Supervisorio.c: 275: {
  1006  0E85  2E85               	goto	l123
  1007  0E86                     __end_of_main:	
  1008                           
  1009                           	psect	text1
  1010  0DA1                     __ptext1:	
  1011 ;; *************** function _USART_Init *****************
  1012 ;; Defined at:
  1013 ;;		line 24 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no PI
      +C16F877A\Supervisorio.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  BaudRate        4   15[BANK1 ] long 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  BR              1   24[BANK1 ] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;		None               void
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, status,0, pclath, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1027 ;;      Params:         0       0       4       0       0
  1028 ;;      Locals:         0       0       1       0       0
  1029 ;;      Temps:          0       0       5       0       0
  1030 ;;      Totals:         0       0      10       0       0
  1031 ;;Total ram usage:       10 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    6
  1034 ;; This function calls:
  1035 ;;		___aldiv
  1036 ;; This function is called by:
  1037 ;;		_main
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           
  1042                           ;psect for function _USART_Init
  1043  0DA1                     _USART_Init:	
  1044                           
  1045                           ;Supervisorio.c: 30: unsigned char BR = 0;
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  1049  0DA1  1683               	bsf	3,5	;RP0=1, select bank1
  1050  0DA2  1303               	bcf	3,6	;RP1=0, select bank1
  1051  0DA3  01B8               	clrf	USART_Init@BR^(0+128)
  1052                           
  1053                           ;Supervisorio.c: 33: BR = (18432000 / (16 * BaudRate)) - 1;
  1054  0DA4  082F               	movf	USART_Init@BaudRate^(0+128),w
  1055  0DA5  00B3               	movwf	??_USART_Init^(0+128)
  1056  0DA6  0830               	movf	(USART_Init@BaudRate+1)^(0+128),w
  1057  0DA7  00B4               	movwf	(??_USART_Init^(0+128)+1)
  1058  0DA8  0831               	movf	(USART_Init@BaudRate+2)^(0+128),w
  1059  0DA9  00B5               	movwf	(??_USART_Init^(0+128)+2)
  1060  0DAA  0832               	movf	(USART_Init@BaudRate+3)^(0+128),w
  1061  0DAB  00B6               	movwf	(??_USART_Init^(0+128)+3)
  1062  0DAC  3004               	movlw	4
  1063  0DAD                     u2475:	
  1064  0DAD  1003               	clrc
  1065  0DAE  0DB3               	rlf	??_USART_Init^(0+128),f
  1066  0DAF  0DB4               	rlf	(??_USART_Init^(0+128)+1),f
  1067  0DB0  0DB5               	rlf	(??_USART_Init^(0+128)+2),f
  1068  0DB1  0DB6               	rlf	(??_USART_Init^(0+128)+3),f
  1069  0DB2  3EFF               	addlw	-1
  1070  0DB3  1D03               	skipz
  1071  0DB4  2DAD               	goto	u2475
  1072  0DB5  0836               	movf	(??_USART_Init+3)^(0+128),w
  1073  0DB6  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1074  0DB7  0835               	movf	(??_USART_Init+2)^(0+128),w
  1075  0DB8  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1076  0DB9  0834               	movf	(??_USART_Init+1)^(0+128),w
  1077  0DBA  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1078  0DBB  0833               	movf	??_USART_Init^(0+128),w
  1079  0DBC  00A0               	movwf	___aldiv@divisor^(0+128)
  1080  0DBD  3001               	movlw	1
  1081  0DBE  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1082  0DBF  3019               	movlw	25
  1083  0DC0  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1084  0DC1  3040               	movlw	64
  1085  0DC2  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1086  0DC3  3000               	movlw	0
  1087  0DC4  00A4               	movwf	___aldiv@dividend^(0+128)
  1088  0DC5  120A  158A  2771   	fcall	___aldiv
  1089  0DC8  1683               	bsf	3,5	;RP0=1, select bank1
  1090  0DC9  1303               	bcf	3,6	;RP1=0, select bank1
  1091  0DCA  0820               	movf	?___aldiv^(0+128),w
  1092  0DCB  3EFF               	addlw	255
  1093  0DCC  00B7               	movwf	(??_USART_Init+4)^(0+128)
  1094  0DCD  0837               	movf	(??_USART_Init+4)^(0+128),w
  1095  0DCE  00B8               	movwf	USART_Init@BR^(0+128)
  1096                           
  1097                           ;Supervisorio.c: 34: SPBRG = BR;
  1098  0DCF  0838               	movf	USART_Init@BR^(0+128),w
  1099  0DD0  0099               	movwf	25	;volatile
  1100                           
  1101                           ;Supervisorio.c: 37: TXSTAbits.CSRC = 0;
  1102  0DD1  1398               	bcf	24,7	;volatile
  1103                           
  1104                           ;Supervisorio.c: 38: TXSTAbits.TX9 = 0;
  1105  0DD2  1318               	bcf	24,6	;volatile
  1106                           
  1107                           ;Supervisorio.c: 39: TXSTAbits.TXEN = 1;
  1108  0DD3  1698               	bsf	24,5	;volatile
  1109                           
  1110                           ;Supervisorio.c: 40: TXSTAbits.SYNC = 0;
  1111  0DD4  1218               	bcf	24,4	;volatile
  1112                           
  1113                           ;Supervisorio.c: 41: TXSTAbits.BRGH = 1;
  1114  0DD5  1518               	bsf	24,2	;volatile
  1115                           
  1116                           ;Supervisorio.c: 42: TXSTAbits.TRMT = 1;
  1117  0DD6  1498               	bsf	24,1	;volatile
  1118                           
  1119                           ;Supervisorio.c: 43: TXSTAbits.TX9D = 0;
  1120  0DD7  1018               	bcf	24,0	;volatile
  1121                           
  1122                           ;Supervisorio.c: 46: RCSTAbits.SPEN = 1;
  1123  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0DDA  1798               	bsf	24,7	;volatile
  1126                           
  1127                           ;Supervisorio.c: 47: RCSTAbits.RX9 = 0;
  1128  0DDB  1318               	bcf	24,6	;volatile
  1129                           
  1130                           ;Supervisorio.c: 48: RCSTAbits.SREN = 0;
  1131  0DDC  1298               	bcf	24,5	;volatile
  1132                           
  1133                           ;Supervisorio.c: 49: RCSTAbits.CREN = 1;
  1134  0DDD  1618               	bsf	24,4	;volatile
  1135                           
  1136                           ;Supervisorio.c: 50: RCSTAbits.ADDEN = 0;
  1137  0DDE  1198               	bcf	24,3	;volatile
  1138                           
  1139                           ;Supervisorio.c: 51: RCSTAbits.FERR = 0;
  1140  0DDF  1118               	bcf	24,2	;volatile
  1141                           
  1142                           ;Supervisorio.c: 52: RCSTAbits.OERR = 0;
  1143  0DE0  1098               	bcf	24,1	;volatile
  1144                           
  1145                           ;Supervisorio.c: 53: RCSTAbits.RX9D = 0;
  1146  0DE1  1018               	bcf	24,0	;volatile
  1147                           
  1148                           ;Supervisorio.c: 56: PIE1bits.RCIE = 1;
  1149  0DE2  1683               	bsf	3,5	;RP0=1, select bank1
  1150  0DE3  1303               	bcf	3,6	;RP1=0, select bank1
  1151  0DE4  168C               	bsf	12,5	;volatile
  1152                           
  1153                           ;Supervisorio.c: 57: PIR1bits.RCIF = 0;
  1154  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0DE7  128C               	bcf	12,5	;volatile
  1157  0DE8  0008               	return
  1158  0DE9                     __end_of_USART_Init:	
  1159                           
  1160                           	psect	text2
  1161  0F71                     __ptext2:	
  1162 ;; *************** function ___aldiv *****************
  1163 ;; Defined at:
  1164 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  divisor         4    0[BANK1 ] long 
  1167 ;;  dividend        4    4[BANK1 ] long 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  quotient        4   11[BANK1 ] long 
  1170 ;;  sign            1   10[BANK1 ] unsigned char 
  1171 ;;  counter         1    9[BANK1 ] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  4    0[BANK1 ] long 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1181 ;;      Params:         0       0       8       0       0
  1182 ;;      Locals:         0       0       6       0       0
  1183 ;;      Temps:          0       0       1       0       0
  1184 ;;      Totals:         0       0      15       0       0
  1185 ;;Total ram usage:       15 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    5
  1188 ;; This function calls:
  1189 ;;		Nothing
  1190 ;; This function is called by:
  1191 ;;		_USART_Init
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function ___aldiv
  1197  0F71                     ___aldiv:	
  1198                           
  1199                           ;incstack = 0
  1200                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1201  0F71  1683               	bsf	3,5	;RP0=1, select bank1
  1202  0F72  1303               	bcf	3,6	;RP1=0, select bank1
  1203  0F73  01AA               	clrf	___aldiv@sign^(0+128)
  1204  0F74  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1205  0F75  2F83               	goto	l313
  1206  0F76  09A0               	comf	___aldiv@divisor^(0+128),f
  1207  0F77  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  1208  0F78  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  1209  0F79  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  1210  0F7A  0AA0               	incf	___aldiv@divisor^(0+128),f
  1211  0F7B  1903               	skipnz
  1212  0F7C  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  1213  0F7D  1903               	skipnz
  1214  0F7E  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  1215  0F7F  1903               	skipnz
  1216  0F80  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  1217  0F81  01AA               	clrf	___aldiv@sign^(0+128)
  1218  0F82  0AAA               	incf	___aldiv@sign^(0+128),f
  1219  0F83                     l313:	
  1220  0F83  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  1221  0F84  2F94               	goto	l1614
  1222  0F85  09A4               	comf	___aldiv@dividend^(0+128),f
  1223  0F86  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  1224  0F87  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  1225  0F88  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  1226  0F89  0AA4               	incf	___aldiv@dividend^(0+128),f
  1227  0F8A  1903               	skipnz
  1228  0F8B  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  1229  0F8C  1903               	skipnz
  1230  0F8D  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  1231  0F8E  1903               	skipnz
  1232  0F8F  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  1233  0F90  3001               	movlw	1
  1234  0F91  00A8               	movwf	??___aldiv^(0+128)
  1235  0F92  0828               	movf	??___aldiv^(0+128),w
  1236  0F93  06AA               	xorwf	___aldiv@sign^(0+128),f
  1237  0F94                     l1614:	
  1238  0F94  3000               	movlw	0
  1239  0F95  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  1240  0F96  3000               	movlw	0
  1241  0F97  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  1242  0F98  3000               	movlw	0
  1243  0F99  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  1244  0F9A  3000               	movlw	0
  1245  0F9B  00AB               	movwf	___aldiv@quotient^(0+128)
  1246  0F9C  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1247  0F9D  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1248  0F9E  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1249  0F9F  0420               	iorwf	___aldiv@divisor^(0+128),w
  1250  0FA0  1903               	skipnz
  1251  0FA1  2FE9               	goto	l1636
  1252  0FA2  01A9               	clrf	___aldiv@counter^(0+128)
  1253  0FA3  0AA9               	incf	___aldiv@counter^(0+128),f
  1254  0FA4                     l1622:	
  1255  0FA4  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  1256  0FA5  2FB4               	goto	l1624
  1257  0FA6  3001               	movlw	1
  1258  0FA7  00A8               	movwf	??___aldiv^(0+128)
  1259  0FA8                     u2085:	
  1260  0FA8  1003               	clrc
  1261  0FA9  0DA0               	rlf	___aldiv@divisor^(0+128),f
  1262  0FAA  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  1263  0FAB  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  1264  0FAC  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  1265  0FAD  0BA8               	decfsz	??___aldiv^(0+128),f
  1266  0FAE  2FA8               	goto	u2085
  1267  0FAF  3001               	movlw	1
  1268  0FB0  00A8               	movwf	??___aldiv^(0+128)
  1269  0FB1  0828               	movf	??___aldiv^(0+128),w
  1270  0FB2  07A9               	addwf	___aldiv@counter^(0+128),f
  1271  0FB3  2FA4               	goto	l1622
  1272  0FB4                     l1624:	
  1273  0FB4  3001               	movlw	1
  1274  0FB5  00A8               	movwf	??___aldiv^(0+128)
  1275  0FB6                     u2105:	
  1276  0FB6  1003               	clrc
  1277  0FB7  0DAB               	rlf	___aldiv@quotient^(0+128),f
  1278  0FB8  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  1279  0FB9  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  1280  0FBA  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  1281  0FBB  0BA8               	decfsz	??___aldiv^(0+128),f
  1282  0FBC  2FB6               	goto	u2105
  1283  0FBD  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1284  0FBE  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  1285  0FBF  1D03               	skipz
  1286  0FC0  2FCB               	goto	u2115
  1287  0FC1  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1288  0FC2  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  1289  0FC3  1D03               	skipz
  1290  0FC4  2FCB               	goto	u2115
  1291  0FC5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1292  0FC6  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  1293  0FC7  1D03               	skipz
  1294  0FC8  2FCB               	goto	u2115
  1295  0FC9  0820               	movf	___aldiv@divisor^(0+128),w
  1296  0FCA  0224               	subwf	___aldiv@dividend^(0+128),w
  1297  0FCB                     u2115:	
  1298  0FCB  1C03               	skipc
  1299  0FCC  2FDC               	goto	l1632
  1300  0FCD  0820               	movf	___aldiv@divisor^(0+128),w
  1301  0FCE  02A4               	subwf	___aldiv@dividend^(0+128),f
  1302  0FCF  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  1303  0FD0  1C03               	skipc
  1304  0FD1  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1305  0FD2  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  1306  0FD3  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  1307  0FD4  1C03               	skipc
  1308  0FD5  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1309  0FD6  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  1310  0FD7  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1311  0FD8  1C03               	skipc
  1312  0FD9  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1313  0FDA  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  1314  0FDB  142B               	bsf	___aldiv@quotient^(0+128),0
  1315  0FDC                     l1632:	
  1316  0FDC  3001               	movlw	1
  1317  0FDD                     u2125:	
  1318  0FDD  1003               	clrc
  1319  0FDE  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  1320  0FDF  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  1321  0FE0  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  1322  0FE1  0CA0               	rrf	___aldiv@divisor^(0+128),f
  1323  0FE2  3EFF               	addlw	-1
  1324  0FE3  1D03               	skipz
  1325  0FE4  2FDD               	goto	u2125
  1326  0FE5  3001               	movlw	1
  1327  0FE6  02A9               	subwf	___aldiv@counter^(0+128),f
  1328  0FE7  1D03               	btfss	3,2
  1329  0FE8  2FB4               	goto	l1624
  1330  0FE9                     l1636:	
  1331  0FE9  082A               	movf	___aldiv@sign^(0+128),w
  1332  0FEA  1903               	btfsc	3,2
  1333  0FEB  2FF7               	goto	l1640
  1334  0FEC  09AB               	comf	___aldiv@quotient^(0+128),f
  1335  0FED  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  1336  0FEE  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  1337  0FEF  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  1338  0FF0  0AAB               	incf	___aldiv@quotient^(0+128),f
  1339  0FF1  1903               	skipnz
  1340  0FF2  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  1341  0FF3  1903               	skipnz
  1342  0FF4  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  1343  0FF5  1903               	skipnz
  1344  0FF6  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  1345  0FF7                     l1640:	
  1346  0FF7  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  1347  0FF8  00A3               	movwf	(?___aldiv+3)^(0+128)
  1348  0FF9  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  1349  0FFA  00A2               	movwf	(?___aldiv+2)^(0+128)
  1350  0FFB  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  1351  0FFC  00A1               	movwf	(?___aldiv+1)^(0+128)
  1352  0FFD  082B               	movf	___aldiv@quotient^(0+128),w
  1353  0FFE  00A0               	movwf	?___aldiv^(0+128)
  1354  0FFF  0008               	return
  1355  1000                     __end_of___aldiv:	
  1356                           
  1357                           	psect	text3
  1358  0CEE                     __ptext3:	
  1359 ;; *************** function _TIMER1_Init *****************
  1360 ;; Defined at:
  1361 ;;		line 135 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no P
      +IC16F877A\Supervisorio.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;		None               void
  1368 ;; Registers used:
  1369 ;;		None
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1375 ;;      Params:         0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    5
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _TIMER1_Init
  1391  0CEE                     _TIMER1_Init:	
  1392                           
  1393                           ;Supervisorio.c: 137: T1CONbits.TMR1CS = 0;
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _TIMER1_Init: []
  1397  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0CF0  1090               	bcf	16,1	;volatile
  1400                           
  1401                           ;Supervisorio.c: 138: T1CONbits.T1OSCEN = 0;
  1402  0CF1  1190               	bcf	16,3	;volatile
  1403                           
  1404                           ;Supervisorio.c: 139: T1CONbits.T1CKPS1 = 1;
  1405  0CF2  1690               	bsf	16,5	;volatile
  1406                           
  1407                           ;Supervisorio.c: 140: T1CONbits.T1CKPS0 = 1;
  1408  0CF3  1610               	bsf	16,4	;volatile
  1409                           
  1410                           ;Supervisorio.c: 142: T1CONbits.TMR1ON = 1;
  1411  0CF4  1410               	bsf	16,0	;volatile
  1412                           
  1413                           ;Supervisorio.c: 143: TMR1 = 7936;
  1414  0CF5  301F               	movlw	31
  1415  0CF6  008F               	movwf	15	;volatile
  1416  0CF7  3000               	movlw	0
  1417  0CF8  008E               	movwf	14	;volatile
  1418                           
  1419                           ;Supervisorio.c: 145: PIR1bits.TMR1IF = 0;
  1420  0CF9  100C               	bcf	12,0	;volatile
  1421                           
  1422                           ;Supervisorio.c: 146: PIE1bits.TMR1IE = 1;
  1423  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  1425  0CFC  140C               	bsf	12,0	;volatile
  1426  0CFD  0008               	return
  1427  0CFE                     __end_of_TIMER1_Init:	
  1428                           
  1429                           	psect	text4
  1430  0CFE                     __ptext4:	
  1431 ;; *************** function _ADC_Init *****************
  1432 ;; Defined at:
  1433 ;;		line 102 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no P
      +IC16F877A\Supervisorio.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;		None               void
  1440 ;; Registers used:
  1441 ;;		None
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1447 ;;      Params:         0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    5
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_main
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           
  1462                           ;psect for function _ADC_Init
  1463  0CFE                     _ADC_Init:	
  1464                           
  1465                           ;Supervisorio.c: 105: ADCON1bits.ADFM = 1;
  1466                           
  1467                           ;incstack = 0
  1468                           ; Regs used in _ADC_Init: []
  1469  0CFE  1683               	bsf	3,5	;RP0=1, select bank1
  1470  0CFF  1303               	bcf	3,6	;RP1=0, select bank1
  1471  0D00  179F               	bsf	31,7	;volatile
  1472                           
  1473                           ;Supervisorio.c: 106: ADCON1bits.PCFG3 = 1;
  1474  0D01  159F               	bsf	31,3	;volatile
  1475                           
  1476                           ;Supervisorio.c: 107: ADCON1bits.PCFG2 = 1;
  1477  0D02  151F               	bsf	31,2	;volatile
  1478                           
  1479                           ;Supervisorio.c: 108: ADCON1bits.PCFG1 = 1;
  1480  0D03  149F               	bsf	31,1	;volatile
  1481                           
  1482                           ;Supervisorio.c: 109: ADCON1bits.PCFG0 = 0;
  1483  0D04  101F               	bcf	31,0	;volatile
  1484                           
  1485                           ;Supervisorio.c: 113: ADCON0bits.ADCS1 = 1;
  1486  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  1488  0D07  179F               	bsf	31,7	;volatile
  1489                           
  1490                           ;Supervisorio.c: 114: ADCON0bits.ADCS0 = 0;
  1491  0D08  131F               	bcf	31,6	;volatile
  1492                           
  1493                           ;Supervisorio.c: 117: PIE1bits.ADIE = 0;
  1494  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  1495  0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  1496  0D0B  130C               	bcf	12,6	;volatile
  1497                           
  1498                           ;Supervisorio.c: 118: PIR1bits.ADIF = 0;
  1499  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0D0E  130C               	bcf	12,6	;volatile
  1502  0D0F  0008               	return
  1503  0D10                     __end_of_ADC_Init:	
  1504                           
  1505                           	psect	text5
  1506  0264                     __ptext5:	
  1507 ;; *************** function _ISR *****************
  1508 ;; Defined at:
  1509 ;;		line 151 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no P
      +IC16F877A\Supervisorio.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  byte1           1   58[BANK0 ] unsigned char 
  1514 ;;  byte2           1   57[BANK0 ] unsigned char 
  1515 ;;  resp            1   56[BANK0 ] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;		None               void
  1518 ;; Registers used:
  1519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         0       3       0       0       0
  1527 ;;      Temps:          0       6       0       0       0
  1528 ;;      Totals:         0       9       0       0       0
  1529 ;;Total ram usage:        9 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    4
  1532 ;; This function calls:
  1533 ;;		_ADC_Read
  1534 ;;		_USART_ReceiveChar
  1535 ;;		_USART_WriteString
  1536 ;;		___ftmul
  1537 ;;		___lwtoft
  1538 ;;		_ftoa
  1539 ;; This function is called by:
  1540 ;;		Interrupt level 1
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _ISR
  1546  0264                     _ISR:	
  1547                           
  1548                           ;Supervisorio.c: 155: if(PIR1bits.TMR1IF == 1)
  1549  0264  1C0C               	btfss	12,0	;volatile
  1550  0265  2A78               	goto	i1l1892
  1551                           
  1552                           ;Supervisorio.c: 156: {
  1553                           ;Supervisorio.c: 157: TMR1 = 7936;
  1554  0266  301F               	movlw	31
  1555  0267  008F               	movwf	15	;volatile
  1556  0268  3000               	movlw	0
  1557  0269  008E               	movwf	14	;volatile
  1558                           
  1559                           ;Supervisorio.c: 158: if(cont1 == 10)
  1560  026A  300A               	movlw	10
  1561  026B  0660               	xorwf	_cont1,w
  1562  026C  0461               	iorwf	_cont1+1,w
  1563  026D  1D03               	skipz
  1564  026E  2A77               	goto	i1l1890
  1565                           
  1566                           ;Supervisorio.c: 159: {
  1567                           ;Supervisorio.c: 160: sec++;
  1568  026F  3001               	movlw	1
  1569  0270  07E2               	addwf	_sec,f
  1570  0271  1803               	skipnc
  1571  0272  0AE3               	incf	_sec+1,f
  1572  0273  3000               	movlw	0
  1573  0274  07E3               	addwf	_sec+1,f
  1574                           
  1575                           ;Supervisorio.c: 161: cont1 = 0;
  1576  0275  01E0               	clrf	_cont1
  1577  0276  01E1               	clrf	_cont1+1
  1578  0277                     i1l1890:	
  1579                           
  1580                           ;Supervisorio.c: 163: }
  1581                           ;Supervisorio.c: 164: PIR1bits.TMR1IF = 0;
  1582  0277  100C               	bcf	12,0	;volatile
  1583  0278                     i1l1892:	
  1584                           
  1585                           ;Supervisorio.c: 165: }
  1586                           ;Supervisorio.c: 168: if (PIR1bits.ADIF)
  1587  0278  1F0C               	btfss	12,6	;volatile
  1588  0279  2ADC               	goto	i1l1908
  1589                           
  1590                           ;Supervisorio.c: 169: {
  1591                           ;Supervisorio.c: 171: ADC_Read(0);
  1592  027A  3000               	movlw	0
  1593  027B  00F0               	movwf	ADC_Read@channel
  1594  027C  3000               	movlw	0
  1595  027D  00F1               	movwf	ADC_Read@channel+1
  1596  027E  120A  118A  27E6  120A  118A  	fcall	_ADC_Read
  1597                           
  1598                           ;Supervisorio.c: 172: ADCResult = ((ADRESH << 8) + ADRESL);
  1599  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1600  0284  1303               	bcf	3,6	;RP1=0, select bank0
  1601  0285  081E               	movf	30,w	;volatile
  1602  0286  01DF               	clrf	_ADCResult+1
  1603  0287  07DF               	addwf	_ADCResult+1,f
  1604  0288  1683               	bsf	3,5	;RP0=1, select bank1
  1605  0289  1303               	bcf	3,6	;RP1=0, select bank1
  1606  028A  081E               	movf	30,w	;volatile
  1607  028B  1283               	bcf	3,5	;RP0=0, select bank0
  1608  028C  1303               	bcf	3,6	;RP1=0, select bank0
  1609  028D  01DE               	clrf	_ADCResult
  1610  028E  07DE               	addwf	_ADCResult,f
  1611                           
  1612                           ;Supervisorio.c: 173: input = ADCResult * 0.004887585533;
  1613  028F  3028               	movlw	40
  1614  0290  00A0               	movwf	___ftmul@f1
  1615  0291  30A0               	movlw	160
  1616  0292  00A1               	movwf	___ftmul@f1+1
  1617  0293  303B               	movlw	59
  1618  0294  00A2               	movwf	___ftmul@f1+2
  1619  0295  085F               	movf	_ADCResult+1,w
  1620  0296  01F9               	clrf	___lwtoft@c+1
  1621  0297  07F9               	addwf	___lwtoft@c+1,f
  1622  0298  085E               	movf	_ADCResult,w
  1623  0299  01F8               	clrf	___lwtoft@c
  1624  029A  07F8               	addwf	___lwtoft@c,f
  1625  029B  120A  158A  2510  120A  118A  	fcall	___lwtoft
  1626  02A0  0878               	movf	?___lwtoft,w
  1627  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1628  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1629  02A3  00A3               	movwf	___ftmul@f2
  1630  02A4  0879               	movf	?___lwtoft+1,w
  1631  02A5  00A4               	movwf	___ftmul@f2+1
  1632  02A6  087A               	movf	?___lwtoft+2,w
  1633  02A7  00A5               	movwf	___ftmul@f2+2
  1634  02A8  120A  118A  25F1  120A  118A  	fcall	___ftmul
  1635  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1636  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1637  02AF  0820               	movf	?___ftmul,w
  1638  02B0  00DB               	movwf	_input
  1639  02B1  0821               	movf	?___ftmul+1,w
  1640  02B2  00DC               	movwf	_input+1
  1641  02B3  0822               	movf	?___ftmul+2,w
  1642  02B4  00DD               	movwf	_input+2
  1643                           
  1644                           ;Supervisorio.c: 174: Display = ftoa(input, &status);
  1645  02B5  085B               	movf	_input,w
  1646  02B6  00C4               	movwf	ftoa@f
  1647  02B7  085C               	movf	_input+1,w
  1648  02B8  00C5               	movwf	ftoa@f+1
  1649  02B9  085D               	movf	_input+2,w
  1650  02BA  00C6               	movwf	ftoa@f+2
  1651  02BB  306E               	movlw	_status& (0+255)
  1652  02BC  00D2               	movwf	??_ISR
  1653  02BD  0852               	movf	??_ISR,w
  1654  02BE  00C7               	movwf	ftoa@status
  1655  02BF  120A  118A  26C4  120A  118A  	fcall	_ftoa
  1656  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1657  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1658  02C6  00D3               	movwf	??_ISR+1
  1659  02C7  0853               	movf	??_ISR+1,w
  1660  02C8  00E4               	movwf	_Display
  1661                           
  1662                           ;Supervisorio.c: 175: USART_WriteString(Display);
  1663  02C9  0864               	movf	_Display,w
  1664  02CA  00F1               	movwf	USART_WriteString@str
  1665  02CB  3000               	movlw	0
  1666  02CC  00F2               	movwf	USART_WriteString@str+1
  1667  02CD  120A  158A  255B  120A  118A  	fcall	_USART_WriteString
  1668                           
  1669                           ;Supervisorio.c: 176: _delay((unsigned long)((2)*(18432000/4000000.0)));
  1670  02D2  3002               	movlw	2
  1671  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1672  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1673  02D5  00D2               	movwf	??_ISR
  1674  02D6                     u258_27:	
  1675  02D6  0BD2               	decfsz	??_ISR,f
  1676  02D7  2AD6               	goto	u258_27
  1677  02D8  2AD9               	nop2	;nop
  1678                           
  1679                           ;Supervisorio.c: 179: PIR1bits.ADIF = 0;
  1680  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1681  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  1682  02DB  130C               	bcf	12,6	;volatile
  1683  02DC                     i1l1908:	
  1684                           
  1685                           ;Supervisorio.c: 180: }
  1686                           ;Supervisorio.c: 183: if (PIR1bits.RCIF)
  1687  02DC  1E8C               	btfss	12,5	;volatile
  1688  02DD  2B61               	goto	i1l120
  1689                           
  1690                           ;Supervisorio.c: 184: {
  1691                           ;Supervisorio.c: 185: char resp;
  1692                           ;Supervisorio.c: 186: unsigned char byte2;
  1693                           ;Supervisorio.c: 187: unsigned char byte1;
  1694                           ;Supervisorio.c: 189: resp = USART_ReceiveChar();
  1695  02DE  120A  158A  2524  120A  118A  	fcall	_USART_ReceiveChar
  1696  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1697  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1698  02E5  00D2               	movwf	??_ISR
  1699  02E6  0852               	movf	??_ISR,w
  1700  02E7  00D8               	movwf	ISR@resp
  1701                           
  1702                           ;Supervisorio.c: 192: switch(resp)
  1703  02E8  2B50               	goto	i1l1950
  1704  02E9                     i1l1912:	
  1705                           ;Supervisorio.c: 193: {
  1706                           ;Supervisorio.c: 194: case 'A' :
  1707                           
  1708                           
  1709                           ;Supervisorio.c: 197: buffer[0] = '#';
  1710  02E9  3023               	movlw	35
  1711  02EA  00D2               	movwf	??_ISR
  1712  02EB  0852               	movf	??_ISR,w
  1713  02EC  00E5               	movwf	_buffer
  1714                           
  1715                           ;Supervisorio.c: 198: buffer[1] = ':';
  1716  02ED  303A               	movlw	58
  1717  02EE  00D2               	movwf	??_ISR
  1718  02EF  0852               	movf	??_ISR,w
  1719  02F0  00E6               	movwf	_buffer+1
  1720                           
  1721                           ;Supervisorio.c: 201: ADC_Read(0);
  1722  02F1  3000               	movlw	0
  1723  02F2  00F0               	movwf	ADC_Read@channel
  1724  02F3  3000               	movlw	0
  1725  02F4  00F1               	movwf	ADC_Read@channel+1
  1726  02F5  120A  118A  27E6  120A  118A  	fcall	_ADC_Read
  1727                           
  1728                           ;Supervisorio.c: 202: byte2 = ADRESH;
  1729  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1730  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1731  02FC  081E               	movf	30,w	;volatile
  1732  02FD  00D2               	movwf	??_ISR
  1733  02FE  0852               	movf	??_ISR,w
  1734  02FF  00D9               	movwf	ISR@byte2
  1735                           
  1736                           ;Supervisorio.c: 203: byte1 = ADRESL;
  1737  0300  1683               	bsf	3,5	;RP0=1, select bank1
  1738  0301  1303               	bcf	3,6	;RP1=0, select bank1
  1739  0302  081E               	movf	30,w	;volatile
  1740  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0305  00D2               	movwf	??_ISR
  1743  0306  0852               	movf	??_ISR,w
  1744  0307  00DA               	movwf	ISR@byte1
  1745                           
  1746                           ;Supervisorio.c: 206: if (byte2 == '\0') byte2 = '0';
  1747  0308  08D9               	movf	ISR@byte2,f
  1748  0309  1D03               	skipz
  1749  030A  2B0F               	goto	i1l1924
  1750  030B  3030               	movlw	48
  1751  030C  00D2               	movwf	??_ISR
  1752  030D  0852               	movf	??_ISR,w
  1753  030E  00D9               	movwf	ISR@byte2
  1754  030F                     i1l1924:	
  1755                           
  1756                           ;Supervisorio.c: 207: if (byte1 == '\0') byte1 = '0';
  1757  030F  08DA               	movf	ISR@byte1,f
  1758  0310  1D03               	skipz
  1759  0311  2B16               	goto	i1l114
  1760  0312  3030               	movlw	48
  1761  0313  00D2               	movwf	??_ISR
  1762  0314  0852               	movf	??_ISR,w
  1763  0315  00DA               	movwf	ISR@byte1
  1764  0316                     i1l114:	
  1765                           
  1766                           ;Supervisorio.c: 209: buffer[2] = byte2;
  1767  0316  0859               	movf	ISR@byte2,w
  1768  0317  00D2               	movwf	??_ISR
  1769  0318  0852               	movf	??_ISR,w
  1770  0319  00E7               	movwf	_buffer+2
  1771                           
  1772                           ;Supervisorio.c: 210: buffer[3] = byte1;
  1773  031A  085A               	movf	ISR@byte1,w
  1774  031B  00D2               	movwf	??_ISR
  1775  031C  0852               	movf	??_ISR,w
  1776  031D  00E8               	movwf	_buffer+3
  1777                           
  1778                           ;Supervisorio.c: 212: buffer[4] = '0';
  1779  031E  3030               	movlw	48
  1780  031F  00D2               	movwf	??_ISR
  1781  0320  0852               	movf	??_ISR,w
  1782  0321  00E9               	movwf	_buffer+4
  1783                           
  1784                           ;Supervisorio.c: 213: buffer[5] = '0';
  1785  0322  3030               	movlw	48
  1786  0323  00D2               	movwf	??_ISR
  1787  0324  0852               	movf	??_ISR,w
  1788  0325  00EA               	movwf	_buffer+5
  1789                           
  1790                           ;Supervisorio.c: 215: buffer[6] = '0';
  1791  0326  3030               	movlw	48
  1792  0327  00D2               	movwf	??_ISR
  1793  0328  0852               	movf	??_ISR,w
  1794  0329  00EB               	movwf	_buffer+6
  1795                           
  1796                           ;Supervisorio.c: 216: buffer[7] = '0';
  1797  032A  3030               	movlw	48
  1798  032B  00D2               	movwf	??_ISR
  1799  032C  0852               	movf	??_ISR,w
  1800  032D  00EC               	movwf	_buffer+7
  1801                           
  1802                           ;Supervisorio.c: 217: buffer[8] = ';';
  1803  032E  303B               	movlw	59
  1804  032F  00D2               	movwf	??_ISR
  1805  0330  0852               	movf	??_ISR,w
  1806  0331  00ED               	movwf	_buffer+8
  1807                           
  1808                           ;Supervisorio.c: 219: USART_WriteString(buffer);
  1809  0332  3065               	movlw	_buffer& (0+255)
  1810  0333  00F1               	movwf	USART_WriteString@str
  1811  0334  3000               	movlw	0
  1812  0335  2B43               	goto	L2
  1813  0336                     i1l116:	
  1814                           ;Supervisorio.c: 224: case 'B' :
  1815                           
  1816                           ;Supervisorio.c: 223: break;
  1817                           
  1818                           ;Supervisorio.c: 221: resp = '#';
  1819                           
  1820                           
  1821                           ;Supervisorio.c: 225: RB4 = 1;
  1822  0336  1606               	bsf	6,4	;volatile
  1823                           
  1824                           ;Supervisorio.c: 226: USART_WriteString("------------> valvula 1 ativada");
  1825  0337  3097               	movlw	low (STR_2-__stringbase)
  1826  0338  2B41               	goto	L1
  1827  0339                     i1l117:	
  1828                           ;Supervisorio.c: 230: case 'C' :
  1829                           
  1830                           ;Supervisorio.c: 228: break;
  1831                           
  1832                           ;Supervisorio.c: 227: resp = '#';
  1833                           
  1834                           
  1835                           ;Supervisorio.c: 231: RB4 = 0;
  1836  0339  1206               	bcf	6,4	;volatile
  1837                           
  1838                           ;Supervisorio.c: 232: USART_WriteString("------------> valvula 1 desativada");
  1839  033A  3051               	movlw	low (STR_3-__stringbase)
  1840  033B  2B41               	goto	L1
  1841  033C                     i1l118:	
  1842                           ;Supervisorio.c: 236: case 'D' :
  1843                           
  1844                           ;Supervisorio.c: 234: break;
  1845                           
  1846                           ;Supervisorio.c: 233: resp = '#';
  1847                           
  1848                           
  1849                           ;Supervisorio.c: 237: RB5 = 1;
  1850  033C  1686               	bsf	6,5	;volatile
  1851                           
  1852                           ;Supervisorio.c: 238: USART_WriteString("------------> valvula 2 ativada");
  1853  033D  30B7               	movlw	low (STR_4-__stringbase)
  1854  033E  2B41               	goto	L1
  1855  033F                     i1l119:	
  1856                           ;Supervisorio.c: 242: case 'E' :
  1857                           
  1858                           ;Supervisorio.c: 240: break;
  1859                           
  1860                           ;Supervisorio.c: 239: resp = '#';
  1861                           
  1862                           
  1863                           ;Supervisorio.c: 243: RB5 = 0;
  1864  033F  1286               	bcf	6,5	;volatile
  1865                           
  1866                           ;Supervisorio.c: 244: USART_WriteString("------------> valvula 2 desativada");
  1867  0340  3074               	movlw	low (STR_5-__stringbase)
  1868  0341                     L1:	
  1869  0341  00F1               	movwf	USART_WriteString@str
  1870  0342  3080               	movlw	128
  1871  0343                     L2:	
  1872  0343  00F2               	movwf	USART_WriteString@str+1
  1873  0344  120A  158A  255B  120A  118A  	fcall	_USART_WriteString
  1874                           
  1875                           ;Supervisorio.c: 245: resp = '#';
  1876  0349  3023               	movlw	35
  1877  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1878  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1879  034C  00D2               	movwf	??_ISR
  1880  034D  0852               	movf	??_ISR,w
  1881  034E  00D8               	movwf	ISR@resp
  1882                           
  1883                           ;Supervisorio.c: 247: }
  1884                           
  1885                           ;Supervisorio.c: 246: break;
  1886  034F  2B61               	goto	i1l120
  1887  0350                     i1l1950:	
  1888  0350  0858               	movf	ISR@resp,w
  1889                           
  1890                           ; Switch size 1, requested type "space"
  1891                           ; Number of cases is 5, Range of values is 65 to 69
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte           16     9 (average)
  1895                           ; direct_byte           26    11 (fixed)
  1896                           ; jumptable            263     9 (fixed)
  1897                           ;	Chosen strategy is simple_byte
  1898  0351  3A41               	xorlw	65	; case 65
  1899  0352  1903               	skipnz
  1900  0353  2AE9               	goto	i1l1912
  1901  0354  3A03               	xorlw	3	; case 66
  1902  0355  1903               	skipnz
  1903  0356  2B36               	goto	i1l116
  1904  0357  3A01               	xorlw	1	; case 67
  1905  0358  1903               	skipnz
  1906  0359  2B39               	goto	i1l117
  1907  035A  3A07               	xorlw	7	; case 68
  1908  035B  1903               	skipnz
  1909  035C  2B3C               	goto	i1l118
  1910  035D  3A01               	xorlw	1	; case 69
  1911  035E  1903               	skipnz
  1912  035F  2B3F               	goto	i1l119
  1913  0360  2B61               	goto	i1l120
  1914  0361                     i1l120:	
  1915  0361  0857               	movf	??_ISR+5,w
  1916  0362  00FF               	movwf	127
  1917  0363  0856               	movf	??_ISR+4,w
  1918  0364  008A               	movwf	10
  1919  0365  0855               	movf	??_ISR+3,w
  1920  0366  0084               	movwf	4
  1921  0367  0E54               	swapf	(??_ISR+2)^0,w
  1922  0368  0083               	movwf	3
  1923  0369  0EFE               	swapf	126,f
  1924  036A  0E7E               	swapf	126,w
  1925  036B  0009               	retfie
  1926  036C                     __end_of_ISR:	
  1927                           
  1928                           	psect	intentry
  1929  0004                     __pintentry:	
  1930                           ;incstack = 0
  1931                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1932                           
  1933  0004                     interrupt_function:	
  1934  007E                     saved_w	set	btemp
  1935  0004  00FE               	movwf	btemp
  1936  0005  0E03               	swapf	3,w
  1937  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1938  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0008  00D4               	movwf	??_ISR+2
  1940  0009  0804               	movf	4,w
  1941  000A  00D5               	movwf	??_ISR+3
  1942  000B  080A               	movf	10,w
  1943  000C  00D6               	movwf	??_ISR+4
  1944  000D  087F               	movf	btemp+1,w
  1945  000E  00D7               	movwf	??_ISR+5
  1946  000F  120A  118A  2A64   	ljmp	_ISR
  1947                           
  1948                           	psect	text6
  1949  06C4                     __ptext6:	
  1950 ;; *************** function _ftoa *****************
  1951 ;; Defined at:
  1952 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftoa.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  f               3   36[BANK0 ] float 
  1955 ;;  status          1   39[BANK0 ] PTR int 
  1956 ;;		 -> status(2), 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  l               4   45[BANK0 ] unsigned long 
  1959 ;;  rem             4   41[BANK0 ] unsigned long 
  1960 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  1961 ;;		 -> ftoa@buf(17), 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      PTR unsigned char 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1971 ;;      Params:         0       4       0       0       0
  1972 ;;      Locals:         0       9       0       0       0
  1973 ;;      Temps:          0       1       0       0       0
  1974 ;;      Totals:         0      14       0       0       0
  1975 ;;Total ram usage:       14 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    3
  1978 ;; This function calls:
  1979 ;;		___ftge
  1980 ;;		___ftmul
  1981 ;;		___ftneg
  1982 ;;		___ftsub
  1983 ;;		___fttol
  1984 ;;		___lltoft
  1985 ;;		_sprintf
  1986 ;; This function is called by:
  1987 ;;		_ISR
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _ftoa
  1993  06C4                     _ftoa:	
  1994                           
  1995                           ;incstack = 0
  1996                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1997  06C4  30BC               	movlw	ftoa@buf& (0+255)
  1998  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1999  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  2000  06C7  00C8               	movwf	??_ftoa
  2001  06C8  0848               	movf	??_ftoa,w
  2002  06C9  00D1               	movwf	ftoa@cp
  2003  06CA  0844               	movf	ftoa@f,w
  2004  06CB  00F0               	movwf	___ftge@ff1
  2005  06CC  0845               	movf	ftoa@f+1,w
  2006  06CD  00F1               	movwf	___ftge@ff1+1
  2007  06CE  0846               	movf	ftoa@f+2,w
  2008  06CF  00F2               	movwf	___ftge@ff1+2
  2009  06D0  3000               	movlw	0
  2010  06D1  00F3               	movwf	___ftge@ff2
  2011  06D2  3000               	movlw	0
  2012  06D3  00F4               	movwf	___ftge@ff2+1
  2013  06D4  3000               	movlw	0
  2014  06D5  00F5               	movwf	___ftge@ff2+2
  2015  06D6  120A  158A  2686  120A  118A  	fcall	___ftge
  2016  06DB  1803               	btfsc	3,0
  2017  06DC  2EFD               	goto	i1l1864
  2018  06DD  302D               	movlw	45
  2019  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2020  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2021  06E0  00C8               	movwf	??_ftoa
  2022  06E1  0851               	movf	ftoa@cp,w
  2023  06E2  0084               	movwf	4
  2024  06E3  0848               	movf	??_ftoa,w
  2025  06E4  1383               	bcf	3,7	;select IRP bank0
  2026  06E5  0080               	movwf	0
  2027  06E6  3001               	movlw	1
  2028  06E7  00C8               	movwf	??_ftoa
  2029  06E8  0848               	movf	??_ftoa,w
  2030  06E9  07D1               	addwf	ftoa@cp,f
  2031  06EA  0844               	movf	ftoa@f,w
  2032  06EB  00F0               	movwf	___ftneg@f1
  2033  06EC  0845               	movf	ftoa@f+1,w
  2034  06ED  00F1               	movwf	___ftneg@f1+1
  2035  06EE  0846               	movf	ftoa@f+2,w
  2036  06EF  00F2               	movwf	___ftneg@f1+2
  2037  06F0  120A  158A  24D0  120A  118A  	fcall	___ftneg
  2038  06F5  0870               	movf	?___ftneg,w
  2039  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  2040  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  2041  06F8  00C4               	movwf	ftoa@f
  2042  06F9  0871               	movf	?___ftneg+1,w
  2043  06FA  00C5               	movwf	ftoa@f+1
  2044  06FB  0872               	movf	?___ftneg+2,w
  2045  06FC  00C6               	movwf	ftoa@f+2
  2046  06FD                     i1l1864:	
  2047  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2048  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  2049  06FF  0844               	movf	ftoa@f,w
  2050  0700  00B0               	movwf	___fttol@f1
  2051  0701  0845               	movf	ftoa@f+1,w
  2052  0702  00B1               	movwf	___fttol@f1+1
  2053  0703  0846               	movf	ftoa@f+2,w
  2054  0704  00B2               	movwf	___fttol@f1+2
  2055  0705  120A  158A  26E3  120A  118A  	fcall	___fttol
  2056  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2057  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2058  070C  0833               	movf	?___fttol+3,w
  2059  070D  00D0               	movwf	ftoa@l+3
  2060  070E  0832               	movf	?___fttol+2,w
  2061  070F  00CF               	movwf	ftoa@l+2
  2062  0710  0831               	movf	?___fttol+1,w
  2063  0711  00CE               	movwf	ftoa@l+1
  2064  0712  0830               	movf	?___fttol,w
  2065  0713  00CD               	movwf	ftoa@l
  2066  0714  0850               	movf	ftoa@l+3,w
  2067  0715  00FB               	movwf	___lltoft@c+3
  2068  0716  084F               	movf	ftoa@l+2,w
  2069  0717  00FA               	movwf	___lltoft@c+2
  2070  0718  084E               	movf	ftoa@l+1,w
  2071  0719  00F9               	movwf	___lltoft@c+1
  2072  071A  084D               	movf	ftoa@l,w
  2073  071B  00F8               	movwf	___lltoft@c
  2074  071C  120A  118A  24D1  120A  118A  	fcall	___lltoft
  2075  0721  0878               	movf	?___lltoft,w
  2076  0722  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2078  0724  00A7               	movwf	___ftsub@f2
  2079  0725  0879               	movf	?___lltoft+1,w
  2080  0726  00A8               	movwf	___ftsub@f2+1
  2081  0727  087A               	movf	?___lltoft+2,w
  2082  0728  00A9               	movwf	___ftsub@f2+2
  2083  0729  0844               	movf	ftoa@f,w
  2084  072A  00AA               	movwf	___ftsub@f1
  2085  072B  0845               	movf	ftoa@f+1,w
  2086  072C  00AB               	movwf	___ftsub@f1+1
  2087  072D  0846               	movf	ftoa@f+2,w
  2088  072E  00AC               	movwf	___ftsub@f1+2
  2089  072F  120A  158A  253F  120A  118A  	fcall	___ftsub
  2090  0734  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0735  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0736  0827               	movf	?___ftsub,w
  2093  0737  00C4               	movwf	ftoa@f
  2094  0738  0828               	movf	?___ftsub+1,w
  2095  0739  00C5               	movwf	ftoa@f+1
  2096  073A  0829               	movf	?___ftsub+2,w
  2097  073B  00C6               	movwf	ftoa@f+2
  2098  073C  0844               	movf	ftoa@f,w
  2099  073D  00A3               	movwf	___ftmul@f2
  2100  073E  0845               	movf	ftoa@f+1,w
  2101  073F  00A4               	movwf	___ftmul@f2+1
  2102  0740  0846               	movf	ftoa@f+2,w
  2103  0741  00A5               	movwf	___ftmul@f2+2
  2104  0742  3024               	movlw	36
  2105  0743  00A0               	movwf	___ftmul@f1
  2106  0744  3074               	movlw	116
  2107  0745  00A1               	movwf	___ftmul@f1+1
  2108  0746  3049               	movlw	73
  2109  0747  00A2               	movwf	___ftmul@f1+2
  2110  0748  120A  118A  25F1  120A  118A  	fcall	___ftmul
  2111  074D  1283               	bcf	3,5	;RP0=0, select bank0
  2112  074E  1303               	bcf	3,6	;RP1=0, select bank0
  2113  074F  0820               	movf	?___ftmul,w
  2114  0750  00B0               	movwf	___fttol@f1
  2115  0751  0821               	movf	?___ftmul+1,w
  2116  0752  00B1               	movwf	___fttol@f1+1
  2117  0753  0822               	movf	?___ftmul+2,w
  2118  0754  00B2               	movwf	___fttol@f1+2
  2119  0755  120A  158A  26E3  120A  118A  	fcall	___fttol
  2120  075A  1283               	bcf	3,5	;RP0=0, select bank0
  2121  075B  1303               	bcf	3,6	;RP1=0, select bank0
  2122  075C  0833               	movf	?___fttol+3,w
  2123  075D  00CC               	movwf	ftoa@rem+3
  2124  075E  0832               	movf	?___fttol+2,w
  2125  075F  00CB               	movwf	ftoa@rem+2
  2126  0760  0831               	movf	?___fttol+1,w
  2127  0761  00CA               	movwf	ftoa@rem+1
  2128  0762  0830               	movf	?___fttol,w
  2129  0763  00C9               	movwf	ftoa@rem
  2130  0764  30D7               	movlw	(STR_6-__stringbase)& (0+255)
  2131  0765  00C8               	movwf	??_ftoa
  2132  0766  0848               	movf	??_ftoa,w
  2133  0767  00AA               	movwf	sprintf@f
  2134  0768  0850               	movf	ftoa@l+3,w
  2135  0769  00AE               	movwf	?_sprintf+4
  2136  076A  084F               	movf	ftoa@l+2,w
  2137  076B  00AD               	movwf	?_sprintf+3
  2138  076C  084E               	movf	ftoa@l+1,w
  2139  076D  00AC               	movwf	?_sprintf+2
  2140  076E  084D               	movf	ftoa@l,w
  2141  076F  00AB               	movwf	?_sprintf+1
  2142  0770  084C               	movf	ftoa@rem+3,w
  2143  0771  00B2               	movwf	?_sprintf+8
  2144  0772  084B               	movf	ftoa@rem+2,w
  2145  0773  00B1               	movwf	?_sprintf+7
  2146  0774  084A               	movf	ftoa@rem+1,w
  2147  0775  00B0               	movwf	?_sprintf+6
  2148  0776  0849               	movf	ftoa@rem,w
  2149  0777  00AF               	movwf	?_sprintf+5
  2150  0778  0851               	movf	ftoa@cp,w
  2151  0779  120A  118A  2028   	fcall	_sprintf
  2152  077C  30BC               	movlw	ftoa@buf& (0+255)
  2153  077D  0008               	return
  2154  077E                     __end_of_ftoa:	
  2155                           
  2156                           	psect	text7
  2157  0028                     __ptext7:	
  2158 ;; *************** function _sprintf *****************
  2159 ;; Defined at:
  2160 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  sp              1    wreg     PTR unsigned char 
  2163 ;;		 -> ftoa@buf(17), 
  2164 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  2165 ;;		 -> STR_6(11), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  2168 ;;		 -> ftoa@buf(17), 
  2169 ;;  _val            4   26[BANK0 ] struct .
  2170 ;;  prec            2   33[BANK0 ] int 
  2171 ;;  width           2   31[BANK0 ] int 
  2172 ;;  c               1   35[BANK0 ] char 
  2173 ;;  ap              1   25[BANK0 ] PTR void [1]
  2174 ;;		 -> ?_sprintf(2), 
  2175 ;;  flag            1   24[BANK0 ] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  2   10[BANK0 ] int 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2185 ;;      Params:         0       9       0       0       0
  2186 ;;      Locals:         0      12       0       0       0
  2187 ;;      Temps:          0       5       0       0       0
  2188 ;;      Totals:         0      26       0       0       0
  2189 ;;Total ram usage:       26 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		___lldiv
  2194 ;;		___llmod
  2195 ;;		___wmul
  2196 ;;		_isdigit
  2197 ;; This function is called by:
  2198 ;;		_ftoa
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _sprintf
  2204  0028                     _sprintf:	
  2205                           
  2206                           ;incstack = 0
  2207                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2208                           ;sprintf@sp stored from wreg
  2209  0028  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0029  1303               	bcf	3,6	;RP1=0, select bank0
  2211  002A  00BE               	movwf	sprintf@sp
  2212                           
  2213                           ;doprnt.c: 494: va_list ap;
  2214                           ;doprnt.c: 499: signed char c;
  2215                           ;doprnt.c: 501: int width;
  2216                           ;doprnt.c: 504: int prec;
  2217                           ;doprnt.c: 508: unsigned char flag;
  2218                           ;doprnt.c: 527: union {
  2219                           ;doprnt.c: 528: unsigned long _val;
  2220                           ;doprnt.c: 529: struct {
  2221                           ;doprnt.c: 530: const char * _cp;
  2222                           ;doprnt.c: 531: unsigned _len;
  2223                           ;doprnt.c: 532: } _str;
  2224                           ;doprnt.c: 533: } _val;
  2225                           ;doprnt.c: 542: *ap = __va_start();
  2226  002B  302B               	movlw	(?_sprintf+1)& (0+255)
  2227  002C  00B3               	movwf	??_sprintf
  2228  002D  0833               	movf	??_sprintf,w
  2229  002E  00B9               	movwf	sprintf@ap
  2230  002F                     i1l1598:	
  2231                           ;doprnt.c: 545: while(c = *f++) {
  2232                           
  2233  002F  3001               	movlw	1
  2234  0030  07AA               	addwf	sprintf@f,f
  2235  0031  30FF               	movlw	-1
  2236  0032  072A               	addwf	sprintf@f,w
  2237  0033  0084               	movwf	4
  2238  0034  120A  118A  250A  120A  118A  	fcall	stringdir
  2239  0039  00B3               	movwf	??_sprintf
  2240  003A  0833               	movf	??_sprintf,w
  2241  003B  00C3               	movwf	sprintf@c
  2242  003C  08C3               	movf	sprintf@c,f
  2243  003D  1903               	btfsc	3,2
  2244  003E  2A5F               	goto	i1l1600
  2245                           
  2246                           ;doprnt.c: 547: if(c != '%')
  2247  003F  0843               	movf	sprintf@c,w
  2248  0040  3A25               	xorlw	37
  2249  0041  1903               	skipnz
  2250  0042  284F               	goto	i1l1508
  2251                           
  2252                           ;doprnt.c: 549: {
  2253                           ;doprnt.c: 550: ((*sp++ = (c)));
  2254  0043  0843               	movf	sprintf@c,w
  2255  0044  00B3               	movwf	??_sprintf
  2256  0045  083E               	movf	sprintf@sp,w
  2257  0046  0084               	movwf	4
  2258  0047  0833               	movf	??_sprintf,w
  2259  0048  1383               	bcf	3,7	;select IRP bank0
  2260  0049  0080               	movwf	0
  2261  004A  3001               	movlw	1
  2262  004B  00B3               	movwf	??_sprintf
  2263  004C  0833               	movf	??_sprintf,w
  2264  004D  07BE               	addwf	sprintf@sp,f
  2265                           
  2266                           ;doprnt.c: 551: continue;
  2267  004E  282F               	goto	i1l1598
  2268  004F                     i1l1508:	
  2269                           
  2270                           ;doprnt.c: 552: }
  2271                           ;doprnt.c: 555: width = 0;
  2272  004F  01BF               	clrf	sprintf@width
  2273  0050  01C0               	clrf	sprintf@width+1
  2274                           
  2275                           ;doprnt.c: 557: flag = 0;
  2276  0051  01B8               	clrf	sprintf@flag
  2277                           
  2278                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2279  0052  082A               	movf	sprintf@f,w
  2280  0053  0084               	movwf	4
  2281  0054  120A  118A  250A  120A  118A  	fcall	stringdir
  2282  0059  120A  158A  24E0  120A  118A  	fcall	_isdigit
  2283  005E  1C03               	btfss	3,0
  2284  005F  28A2               	goto	i1l1522
  2285                           
  2286                           ;doprnt.c: 607: width = 0;
  2287  0060  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0061  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0062  01BF               	clrf	sprintf@width
  2290  0063  01C0               	clrf	sprintf@width+1
  2291  0064                     i1l1514:	
  2292                           ;doprnt.c: 608: do {
  2293                           
  2294                           
  2295                           ;doprnt.c: 609: width *= 10;
  2296  0064  300A               	movlw	10
  2297  0065  00F0               	movwf	___wmul@multiplier
  2298  0066  3000               	movlw	0
  2299  0067  00F1               	movwf	___wmul@multiplier+1
  2300  0068  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0069  1303               	bcf	3,6	;RP1=0, select bank0
  2302  006A  0840               	movf	sprintf@width+1,w
  2303  006B  01F3               	clrf	___wmul@multiplicand+1
  2304  006C  07F3               	addwf	___wmul@multiplicand+1,f
  2305  006D  083F               	movf	sprintf@width,w
  2306  006E  01F2               	clrf	___wmul@multiplicand
  2307  006F  07F2               	addwf	___wmul@multiplicand,f
  2308  0070  120A  158A  257E  120A  118A  	fcall	___wmul
  2309  0075  0871               	movf	?___wmul+1,w
  2310  0076  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0077  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0078  01C0               	clrf	sprintf@width+1
  2313  0079  07C0               	addwf	sprintf@width+1,f
  2314  007A  0870               	movf	?___wmul,w
  2315  007B  01BF               	clrf	sprintf@width
  2316  007C  07BF               	addwf	sprintf@width,f
  2317                           
  2318                           ;doprnt.c: 610: width += *f++ - '0';
  2319  007D  082A               	movf	sprintf@f,w
  2320  007E  0084               	movwf	4
  2321  007F  120A  118A  250A  120A  118A  	fcall	stringdir
  2322  0084  3ED0               	addlw	208
  2323  0085  00B3               	movwf	??_sprintf
  2324  0086  30FF               	movlw	255
  2325  0087  1803               	skipnc
  2326  0088  3000               	movlw	0
  2327  0089  00B4               	movwf	??_sprintf+1
  2328  008A  0833               	movf	??_sprintf,w
  2329  008B  07BF               	addwf	sprintf@width,f
  2330  008C  1803               	skipnc
  2331  008D  0AC0               	incf	sprintf@width+1,f
  2332  008E  0834               	movf	??_sprintf+1,w
  2333  008F  07C0               	addwf	sprintf@width+1,f
  2334  0090  3001               	movlw	1
  2335  0091  00B3               	movwf	??_sprintf
  2336  0092  0833               	movf	??_sprintf,w
  2337  0093  07AA               	addwf	sprintf@f,f
  2338                           
  2339                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2340  0094  082A               	movf	sprintf@f,w
  2341  0095  0084               	movwf	4
  2342  0096  120A  118A  250A  120A  118A  	fcall	stringdir
  2343  009B  120A  158A  24E0  120A  118A  	fcall	_isdigit
  2344  00A0  1803               	btfsc	3,0
  2345  00A1  2864               	goto	i1l1514
  2346  00A2                     i1l1522:	
  2347                           
  2348                           ;doprnt.c: 617: }
  2349                           ;doprnt.c: 620: if(*f == '.') {
  2350  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  2351  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  2352  00A4  082A               	movf	sprintf@f,w
  2353  00A5  0084               	movwf	4
  2354  00A6  120A  118A  250A  120A  118A  	fcall	stringdir
  2355  00AB  3A2E               	xorlw	46
  2356  00AC  1D03               	skipz
  2357  00AD  28F0               	goto	i1l1534
  2358                           
  2359                           ;doprnt.c: 622: f++;
  2360  00AE  3001               	movlw	1
  2361  00AF  00B3               	movwf	??_sprintf
  2362  00B0  0833               	movf	??_sprintf,w
  2363  00B1  07AA               	addwf	sprintf@f,f
  2364                           
  2365                           ;doprnt.c: 629: {
  2366                           ;doprnt.c: 630: prec = 0;
  2367  00B2  01C1               	clrf	sprintf@prec
  2368  00B3  01C2               	clrf	sprintf@prec+1
  2369  00B4                     i1l1532:	
  2370                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2371                           
  2372  00B4  082A               	movf	sprintf@f,w
  2373  00B5  0084               	movwf	4
  2374  00B6  120A  118A  250A  120A  118A  	fcall	stringdir
  2375  00BB  120A  158A  24E0  120A  118A  	fcall	_isdigit
  2376  00C0  1C03               	btfss	3,0
  2377  00C1  28FC               	goto	i1l1540
  2378                           
  2379                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2380  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2381  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2382  00C4  0842               	movf	sprintf@prec+1,w
  2383  00C5  01F1               	clrf	___wmul@multiplier+1
  2384  00C6  07F1               	addwf	___wmul@multiplier+1,f
  2385  00C7  0841               	movf	sprintf@prec,w
  2386  00C8  01F0               	clrf	___wmul@multiplier
  2387  00C9  07F0               	addwf	___wmul@multiplier,f
  2388  00CA  300A               	movlw	10
  2389  00CB  00F2               	movwf	___wmul@multiplicand
  2390  00CC  3000               	movlw	0
  2391  00CD  00F3               	movwf	___wmul@multiplicand+1
  2392  00CE  120A  158A  257E  120A  118A  	fcall	___wmul
  2393  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  2394  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  2395  00D5  082A               	movf	sprintf@f,w
  2396  00D6  0084               	movwf	4
  2397  00D7  120A  118A  250A  120A  118A  	fcall	stringdir
  2398  00DC  0770               	addwf	?___wmul,w
  2399  00DD  00B3               	movwf	??_sprintf
  2400  00DE  3000               	movlw	0
  2401  00DF  1803               	skipnc
  2402  00E0  3001               	movlw	1
  2403  00E1  0771               	addwf	?___wmul+1,w
  2404  00E2  00B4               	movwf	??_sprintf+1
  2405  00E3  0833               	movf	??_sprintf,w
  2406  00E4  3ED0               	addlw	208
  2407  00E5  00C1               	movwf	sprintf@prec
  2408  00E6  0834               	movf	??_sprintf+1,w
  2409  00E7  1803               	skipnc
  2410  00E8  3E01               	addlw	1
  2411  00E9  3EFF               	addlw	255
  2412  00EA  00C2               	movwf	sprintf@prec+1
  2413  00EB  3001               	movlw	1
  2414  00EC  00B3               	movwf	??_sprintf
  2415  00ED  0833               	movf	??_sprintf,w
  2416  00EE  07AA               	addwf	sprintf@f,f
  2417  00EF  28B4               	goto	i1l1532
  2418  00F0                     i1l1534:	
  2419                           ;doprnt.c: 633: }
  2420                           ;doprnt.c: 634: } else {
  2421                           
  2422                           
  2423                           ;doprnt.c: 635: prec = 0;
  2424  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  2425  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  2426  00F2  01C1               	clrf	sprintf@prec
  2427  00F3  01C2               	clrf	sprintf@prec+1
  2428                           
  2429                           ;doprnt.c: 644: switch(c = *f++) {
  2430                           
  2431                           ;doprnt.c: 639: }
  2432                           ;doprnt.c: 642: loop:
  2433  00F4  28FC               	goto	i1l1540
  2434  00F5                     i1l152:	
  2435                           ;doprnt.c: 650: case 'l':
  2436                           
  2437                           ;doprnt.c: 647: goto alldone;
  2438                           
  2439                           ;doprnt.c: 646: case 0:
  2440                           
  2441                           
  2442                           ;doprnt.c: 652: flag |= 0x10;
  2443  00F5  1638               	bsf	sprintf@flag,4
  2444                           
  2445                           ;doprnt.c: 653: goto loop;
  2446  00F6  28FC               	goto	i1l1540
  2447  00F7                     i1l1536:	
  2448                           ;doprnt.c: 826: case 'u':
  2449                           
  2450                           ;doprnt.c: 822: continue;
  2451                           
  2452                           ;doprnt.c: 811: default:
  2453                           
  2454                           
  2455                           ;doprnt.c: 827: flag |= 0xC0;
  2456  00F7  30C0               	movlw	192
  2457  00F8  00B3               	movwf	??_sprintf
  2458  00F9  0833               	movf	??_sprintf,w
  2459  00FA  04B8               	iorwf	sprintf@flag,f
  2460                           
  2461                           ;doprnt.c: 831: }
  2462                           
  2463                           ;doprnt.c: 828: break;
  2464  00FB  2913               	goto	i1l155
  2465  00FC                     i1l1540:	
  2466  00FC  3001               	movlw	1
  2467  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  2468  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  2469  00FF  07AA               	addwf	sprintf@f,f
  2470  0100  30FF               	movlw	-1
  2471  0101  072A               	addwf	sprintf@f,w
  2472  0102  0084               	movwf	4
  2473  0103  120A  118A  250A  120A  118A  	fcall	stringdir
  2474  0108  00C3               	movwf	sprintf@c
  2475                           
  2476                           ; Switch size 1, requested type "space"
  2477                           ; Number of cases is 3, Range of values is 0 to 117
  2478                           ; switch strategies available:
  2479                           ; Name         Instructions Cycles
  2480                           ; simple_byte           10     6 (average)
  2481                           ; jumptable            260     6 (fixed)
  2482                           ;	Chosen strategy is simple_byte
  2483  0109  3A00               	xorlw	0	; case 0
  2484  010A  1903               	skipnz
  2485  010B  2A5F               	goto	i1l1600
  2486  010C  3A6C               	xorlw	108	; case 108
  2487  010D  1903               	skipnz
  2488  010E  28F5               	goto	i1l152
  2489  010F  3A19               	xorlw	25	; case 117
  2490  0110  1903               	skipnz
  2491  0111  28F7               	goto	i1l1536
  2492  0112  282F               	goto	i1l1598
  2493  0113                     i1l155:	
  2494                           
  2495                           ;doprnt.c: 1282: {
  2496                           ;doprnt.c: 1290: if(flag & 0x10)
  2497  0113  1E38               	btfss	sprintf@flag,4
  2498  0114  2925               	goto	i1l1546
  2499                           
  2500                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  2501  0115  0839               	movf	sprintf@ap,w
  2502  0116  0084               	movwf	4
  2503  0117  1383               	bcf	3,7	;select IRP bank0
  2504  0118  0800               	movf	0,w
  2505  0119  00BA               	movwf	sprintf@_val
  2506  011A  0A84               	incf	4,f
  2507  011B  0800               	movf	0,w
  2508  011C  00BB               	movwf	sprintf@_val+1
  2509  011D  0A84               	incf	4,f
  2510  011E  0800               	movf	0,w
  2511  011F  00BC               	movwf	sprintf@_val+2
  2512  0120  0A84               	incf	4,f
  2513  0121  0800               	movf	0,w
  2514  0122  00BD               	movwf	sprintf@_val+3
  2515  0123  3004               	movlw	4
  2516  0124  2934               	goto	L3
  2517  0125                     i1l1546:	
  2518                           
  2519                           ;doprnt.c: 1292: else
  2520                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2521  0125  0839               	movf	sprintf@ap,w
  2522  0126  0084               	movwf	4
  2523  0127  1383               	bcf	3,7	;select IRP bank0
  2524  0128  0800               	movf	0,w
  2525  0129  00B3               	movwf	??_sprintf
  2526  012A  0A84               	incf	4,f
  2527  012B  0800               	movf	0,w
  2528  012C  00B4               	movwf	??_sprintf+1
  2529  012D  0833               	movf	??_sprintf,w
  2530  012E  00BA               	movwf	sprintf@_val
  2531  012F  0834               	movf	??_sprintf+1,w
  2532  0130  00BB               	movwf	sprintf@_val+1
  2533  0131  01BC               	clrf	sprintf@_val+2
  2534  0132  01BD               	clrf	sprintf@_val+3
  2535  0133  3002               	movlw	2
  2536  0134                     L3:	
  2537  0134  00B3               	movwf	??_sprintf
  2538  0135  0833               	movf	??_sprintf,w
  2539  0136  07B9               	addwf	sprintf@ap,f
  2540                           
  2541                           ;doprnt.c: 1296: }
  2542                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  2543  0137  0842               	movf	sprintf@prec+1,w
  2544  0138  0441               	iorwf	sprintf@prec,w
  2545  0139  1D03               	skipz
  2546  013A  2947               	goto	i1l1556
  2547  013B  083D               	movf	sprintf@_val+3,w
  2548  013C  043C               	iorwf	sprintf@_val+2,w
  2549  013D  043B               	iorwf	sprintf@_val+1,w
  2550  013E  043A               	iorwf	sprintf@_val,w
  2551  013F  1D03               	skipz
  2552  0140  2947               	goto	i1l1556
  2553                           
  2554                           ;doprnt.c: 1300: prec++;
  2555  0141  3001               	movlw	1
  2556  0142  07C1               	addwf	sprintf@prec,f
  2557  0143  1803               	skipnc
  2558  0144  0AC2               	incf	sprintf@prec+1,f
  2559  0145  3000               	movlw	0
  2560  0146  07C2               	addwf	sprintf@prec+1,f
  2561  0147                     i1l1556:	
  2562                           
  2563                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2564  0147  01C3               	clrf	sprintf@c
  2565  0148  0AC3               	incf	sprintf@c,f
  2566  0149  0843               	movf	sprintf@c,w
  2567  014A  3A0A               	xorlw	10
  2568  014B  1903               	btfsc	3,2
  2569  014C  2989               	goto	i1l1568
  2570  014D                     i1l1560:	
  2571                           
  2572                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2573  014D  0843               	movf	sprintf@c,w
  2574  014E  00B3               	movwf	??_sprintf
  2575  014F  3001               	movlw	1
  2576  0150                     u194_25:	
  2577  0150  1003               	clrc
  2578  0151  0DB3               	rlf	??_sprintf,f
  2579  0152  3EFF               	addlw	-1
  2580  0153  1D03               	skipz
  2581  0154  2950               	goto	u194_25
  2582  0155  1003               	clrc
  2583  0156  0D33               	rlf	??_sprintf,w
  2584  0157  3E01               	addlw	low (_dpowers-__stringbase)
  2585  0158  0084               	movwf	4
  2586  0159  120A  118A  250A  120A  118A  	fcall	stringdir
  2587  015E  00B4               	movwf	??_sprintf+1
  2588  015F  120A  118A  250A  120A  118A  	fcall	stringdir
  2589  0164  00B5               	movwf	??_sprintf+2
  2590  0165  120A  118A  250A  120A  118A  	fcall	stringdir
  2591  016A  00B6               	movwf	??_sprintf+3
  2592  016B  120A  118A  250A  120A  118A  	fcall	stringdir
  2593  0170  00B7               	movwf	??_sprintf+4
  2594  0171  0837               	movf	??_sprintf+4,w
  2595  0172  023D               	subwf	sprintf@_val+3,w
  2596  0173  1D03               	skipz
  2597  0174  297F               	goto	u195_25
  2598  0175  0836               	movf	??_sprintf+3,w
  2599  0176  023C               	subwf	sprintf@_val+2,w
  2600  0177  1D03               	skipz
  2601  0178  297F               	goto	u195_25
  2602  0179  0835               	movf	??_sprintf+2,w
  2603  017A  023B               	subwf	sprintf@_val+1,w
  2604  017B  1D03               	skipz
  2605  017C  297F               	goto	u195_25
  2606  017D  0834               	movf	??_sprintf+1,w
  2607  017E  023A               	subwf	sprintf@_val,w
  2608  017F                     u195_25:	
  2609  017F  1C03               	btfss	3,0
  2610  0180  2989               	goto	i1l1568
  2611                           
  2612                           ;doprnt.c: 1316: break;
  2613  0181  3001               	movlw	1
  2614  0182  00B3               	movwf	??_sprintf
  2615  0183  0833               	movf	??_sprintf,w
  2616  0184  07C3               	addwf	sprintf@c,f
  2617  0185  0843               	movf	sprintf@c,w
  2618  0186  3A0A               	xorlw	10
  2619  0187  1D03               	skipz
  2620  0188  294D               	goto	i1l1560
  2621  0189                     i1l1568:	
  2622                           
  2623                           ;doprnt.c: 1348: if(c < prec)
  2624  0189  0843               	movf	sprintf@c,w
  2625  018A  00B3               	movwf	??_sprintf
  2626  018B  01B4               	clrf	??_sprintf+1
  2627  018C  1BB3               	btfsc	??_sprintf,7
  2628  018D  03B4               	decf	??_sprintf+1,f
  2629  018E  0834               	movf	??_sprintf+1,w
  2630  018F  3A80               	xorlw	128
  2631  0190  00B5               	movwf	??_sprintf+2
  2632  0191  0842               	movf	sprintf@prec+1,w
  2633  0192  3A80               	xorlw	128
  2634  0193  0235               	subwf	??_sprintf+2,w
  2635  0194  1D03               	skipz
  2636  0195  2998               	goto	u197_25
  2637  0196  0841               	movf	sprintf@prec,w
  2638  0197  0233               	subwf	??_sprintf,w
  2639  0198                     u197_25:	
  2640  0198  1803               	skipnc
  2641  0199  29A1               	goto	i1l1572
  2642                           
  2643                           ;doprnt.c: 1349: c = prec;
  2644  019A  1283               	bcf	3,5	;RP0=0, select bank0
  2645  019B  1303               	bcf	3,6	;RP1=0, select bank0
  2646  019C  0841               	movf	sprintf@prec,w
  2647  019D  00B3               	movwf	??_sprintf
  2648  019E  0833               	movf	??_sprintf,w
  2649  019F  00C3               	movwf	sprintf@c
  2650  01A0  29BB               	goto	i1l1576
  2651  01A1                     i1l1572:	
  2652                           
  2653                           ;doprnt.c: 1350: else if(prec < c)
  2654  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  2655  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2656  01A3  0843               	movf	sprintf@c,w
  2657  01A4  00B3               	movwf	??_sprintf
  2658  01A5  01B4               	clrf	??_sprintf+1
  2659  01A6  1BB3               	btfsc	??_sprintf,7
  2660  01A7  03B4               	decf	??_sprintf+1,f
  2661  01A8  0842               	movf	sprintf@prec+1,w
  2662  01A9  3A80               	xorlw	128
  2663  01AA  00B5               	movwf	??_sprintf+2
  2664  01AB  0834               	movf	??_sprintf+1,w
  2665  01AC  3A80               	xorlw	128
  2666  01AD  0235               	subwf	??_sprintf+2,w
  2667  01AE  1D03               	skipz
  2668  01AF  29B2               	goto	u198_25
  2669  01B0  0833               	movf	??_sprintf,w
  2670  01B1  0241               	subwf	sprintf@prec,w
  2671  01B2                     u198_25:	
  2672  01B2  1803               	skipnc
  2673  01B3  29BB               	goto	i1l1576
  2674                           
  2675                           ;doprnt.c: 1351: prec = c;
  2676  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2677  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2678  01B6  0843               	movf	sprintf@c,w
  2679  01B7  00C1               	movwf	sprintf@prec
  2680  01B8  01C2               	clrf	sprintf@prec+1
  2681  01B9  1BC1               	btfsc	sprintf@prec,7
  2682  01BA  03C2               	decf	sprintf@prec+1,f
  2683  01BB                     i1l1576:	
  2684                           
  2685                           ;doprnt.c: 1390: if(width > c)
  2686  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2687  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2688  01BD  0843               	movf	sprintf@c,w
  2689  01BE  00B3               	movwf	??_sprintf
  2690  01BF  01B4               	clrf	??_sprintf+1
  2691  01C0  1BB3               	btfsc	??_sprintf,7
  2692  01C1  03B4               	decf	??_sprintf+1,f
  2693  01C2  0834               	movf	??_sprintf+1,w
  2694  01C3  3A80               	xorlw	128
  2695  01C4  00B5               	movwf	??_sprintf+2
  2696  01C5  0840               	movf	sprintf@width+1,w
  2697  01C6  3A80               	xorlw	128
  2698  01C7  0235               	subwf	??_sprintf+2,w
  2699  01C8  1D03               	skipz
  2700  01C9  29CC               	goto	u199_25
  2701  01CA  083F               	movf	sprintf@width,w
  2702  01CB  0233               	subwf	??_sprintf,w
  2703  01CC                     u199_25:	
  2704  01CC  1803               	skipnc
  2705  01CD  29DC               	goto	i1l1580
  2706                           
  2707                           ;doprnt.c: 1391: width -= c;
  2708  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2709  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2710  01D0  0843               	movf	sprintf@c,w
  2711  01D1  00B3               	movwf	??_sprintf
  2712  01D2  01B4               	clrf	??_sprintf+1
  2713  01D3  1BB3               	btfsc	??_sprintf,7
  2714  01D4  03B4               	decf	??_sprintf+1,f
  2715  01D5  0833               	movf	??_sprintf,w
  2716  01D6  02BF               	subwf	sprintf@width,f
  2717  01D7  0834               	movf	??_sprintf+1,w
  2718  01D8  1C03               	skipc
  2719  01D9  03C0               	decf	sprintf@width+1,f
  2720  01DA  02C0               	subwf	sprintf@width+1,f
  2721  01DB  29E0               	goto	i1l1582
  2722  01DC                     i1l1580:	
  2723                           
  2724                           ;doprnt.c: 1392: else
  2725                           ;doprnt.c: 1393: width = 0;
  2726  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2727  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2728  01DE  01BF               	clrf	sprintf@width
  2729  01DF  01C0               	clrf	sprintf@width+1
  2730  01E0                     i1l1582:	
  2731                           
  2732                           ;doprnt.c: 1431: {
  2733                           ;doprnt.c: 1433: if(width
  2734                           ;doprnt.c: 1437: )
  2735  01E0  0840               	movf	sprintf@width+1,w
  2736  01E1  043F               	iorwf	sprintf@width,w
  2737  01E2  1903               	skipnz
  2738  01E3  2A50               	goto	i1l1596
  2739                           
  2740                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2741                           
  2742                           ;doprnt.c: 1438: do
  2743  01E4  3020               	movlw	32
  2744  01E5  00B3               	movwf	??_sprintf
  2745  01E6  083E               	movf	sprintf@sp,w
  2746  01E7  0084               	movwf	4
  2747  01E8  0833               	movf	??_sprintf,w
  2748  01E9  1383               	bcf	3,7	;select IRP bank0
  2749  01EA  0080               	movwf	0
  2750  01EB  3001               	movlw	1
  2751  01EC  00B3               	movwf	??_sprintf
  2752  01ED  0833               	movf	??_sprintf,w
  2753  01EE  07BE               	addwf	sprintf@sp,f
  2754                           
  2755                           ;doprnt.c: 1440: while(--width);
  2756  01EF  30FF               	movlw	255
  2757  01F0  07BF               	addwf	sprintf@width,f
  2758  01F1  1803               	skipnc
  2759  01F2  0AC0               	incf	sprintf@width+1,f
  2760  01F3  30FF               	movlw	255
  2761  01F4  07C0               	addwf	sprintf@width+1,f
  2762  01F5  29E0               	goto	i1l1582
  2763  01F6                     i1l1590:	
  2764                           ;doprnt.c: 1478: }
  2765                           ;doprnt.c: 1483: while(prec--) {
  2766                           
  2767                           
  2768                           ;doprnt.c: 1487: {
  2769                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2770  01F6  3000               	movlw	0
  2771  01F7  00A3               	movwf	___llmod@divisor+3
  2772  01F8  3000               	movlw	0
  2773  01F9  00A2               	movwf	___llmod@divisor+2
  2774  01FA  3000               	movlw	0
  2775  01FB  00A1               	movwf	___llmod@divisor+1
  2776  01FC  300A               	movlw	10
  2777  01FD  00A0               	movwf	___llmod@divisor
  2778  01FE  0841               	movf	sprintf@prec,w
  2779  01FF  00B3               	movwf	??_sprintf
  2780  0200  3001               	movlw	1
  2781  0201                     u202_25:	
  2782  0201  1003               	clrc
  2783  0202  0DB3               	rlf	??_sprintf,f
  2784  0203  3EFF               	addlw	-1
  2785  0204  1D03               	skipz
  2786  0205  2A01               	goto	u202_25
  2787  0206  1003               	clrc
  2788  0207  0D33               	rlf	??_sprintf,w
  2789  0208  3E01               	addlw	low (_dpowers-__stringbase)
  2790  0209  0084               	movwf	4
  2791  020A  120A  118A  250A  120A  118A  	fcall	stringdir
  2792  020F  00F0               	movwf	___lldiv@divisor
  2793  0210  120A  118A  250A  120A  118A  	fcall	stringdir
  2794  0215  00F1               	movwf	___lldiv@divisor+1
  2795  0216  120A  118A  250A  120A  118A  	fcall	stringdir
  2796  021B  00F2               	movwf	___lldiv@divisor+2
  2797  021C  120A  118A  250A  120A  118A  	fcall	stringdir
  2798  0221  00F3               	movwf	___lldiv@divisor+3
  2799  0222  083D               	movf	sprintf@_val+3,w
  2800  0223  00F7               	movwf	___lldiv@dividend+3
  2801  0224  083C               	movf	sprintf@_val+2,w
  2802  0225  00F6               	movwf	___lldiv@dividend+2
  2803  0226  083B               	movf	sprintf@_val+1,w
  2804  0227  00F5               	movwf	___lldiv@dividend+1
  2805  0228  083A               	movf	sprintf@_val,w
  2806  0229  00F4               	movwf	___lldiv@dividend
  2807  022A  120A  118A  2473  120A  118A  	fcall	___lldiv
  2808  022F  0873               	movf	?___lldiv+3,w
  2809  0230  1283               	bcf	3,5	;RP0=0, select bank0
  2810  0231  1303               	bcf	3,6	;RP1=0, select bank0
  2811  0232  00A7               	movwf	___llmod@dividend+3
  2812  0233  0872               	movf	?___lldiv+2,w
  2813  0234  00A6               	movwf	___llmod@dividend+2
  2814  0235  0871               	movf	?___lldiv+1,w
  2815  0236  00A5               	movwf	___llmod@dividend+1
  2816  0237  0870               	movf	?___lldiv,w
  2817  0238  00A4               	movwf	___llmod@dividend
  2818  0239  120A  158A  25E9  120A  118A  	fcall	___llmod
  2819  023E  1283               	bcf	3,5	;RP0=0, select bank0
  2820  023F  1303               	bcf	3,6	;RP1=0, select bank0
  2821  0240  0820               	movf	?___llmod,w
  2822  0241  3E30               	addlw	48
  2823  0242  00B4               	movwf	??_sprintf+1
  2824  0243  0834               	movf	??_sprintf+1,w
  2825  0244  00C3               	movwf	sprintf@c
  2826                           
  2827                           ;doprnt.c: 1532: }
  2828                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2829  0245  0843               	movf	sprintf@c,w
  2830  0246  00B3               	movwf	??_sprintf
  2831  0247  083E               	movf	sprintf@sp,w
  2832  0248  0084               	movwf	4
  2833  0249  0833               	movf	??_sprintf,w
  2834  024A  1383               	bcf	3,7	;select IRP bank0
  2835  024B  0080               	movwf	0
  2836  024C  3001               	movlw	1
  2837  024D  00B3               	movwf	??_sprintf
  2838  024E  0833               	movf	??_sprintf,w
  2839  024F  07BE               	addwf	sprintf@sp,f
  2840  0250                     i1l1596:	
  2841  0250  30FF               	movlw	255
  2842  0251  07C1               	addwf	sprintf@prec,f
  2843  0252  1803               	skipnc
  2844  0253  0AC2               	incf	sprintf@prec+1,f
  2845  0254  30FF               	movlw	255
  2846  0255  07C2               	addwf	sprintf@prec+1,f
  2847  0256  30FF               	movlw	255
  2848  0257  0642               	xorwf	sprintf@prec+1,w
  2849  0258  1D03               	skipz
  2850  0259  2A5C               	goto	u203_25
  2851  025A  30FF               	movlw	255
  2852  025B  0641               	xorwf	sprintf@prec,w
  2853  025C                     u203_25:	
  2854  025C  1903               	btfsc	3,2
  2855  025D  282F               	goto	i1l1598
  2856  025E  29F6               	goto	i1l1590
  2857  025F                     i1l1600:	
  2858                           ;doprnt.c: 1534: }
  2859                           ;doprnt.c: 1542: }
  2860                           ;doprnt.c: 1544: alldone:
  2861                           
  2862                           
  2863                           ;doprnt.c: 1547: *sp = 0;
  2864  025F  083E               	movf	sprintf@sp,w
  2865  0260  0084               	movwf	4
  2866  0261  1383               	bcf	3,7	;select IRP bank0
  2867  0262  0180               	clrf	0
  2868  0263  0008               	return
  2869  0264                     __end_of_sprintf:	
  2870                           ;doprnt.c: 1549: return 0;
  2871                           ;	Return value of _sprintf is never used
  2872                           
  2873                           
  2874                           	psect	text8
  2875  0CE0                     __ptext8:	
  2876 ;; *************** function _isdigit *****************
  2877 ;; Defined at:
  2878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  c               1    wreg     unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  c               1    1[COMMON] unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;		None               void
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2892 ;;      Params:         0       0       0       0       0
  2893 ;;      Locals:         2       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0
  2895 ;;      Totals:         2       0       0       0       0
  2896 ;;Total ram usage:        2 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_sprintf
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _isdigit
  2907  0CE0                     _isdigit:	
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2911                           ;isdigit@c stored from wreg
  2912  0CE0  00F1               	movwf	isdigit@c
  2913  0CE1  01F0               	clrf	_isdigit$651
  2914  0CE2  303A               	movlw	58
  2915  0CE3  0271               	subwf	isdigit@c,w
  2916  0CE4  1803               	skipnc
  2917  0CE5  2CEC               	goto	i1l1360
  2918  0CE6  3030               	movlw	48
  2919  0CE7  0271               	subwf	isdigit@c,w
  2920  0CE8  1C03               	skipc
  2921  0CE9  2CEC               	goto	i1l1360
  2922  0CEA  01F0               	clrf	_isdigit$651
  2923  0CEB  0AF0               	incf	_isdigit$651,f
  2924  0CEC                     i1l1360:	
  2925  0CEC  0C70               	rrf	_isdigit$651,w
  2926  0CED  0008               	return
  2927  0CEE                     __end_of_isdigit:	
  2928                           
  2929                           	psect	text9
  2930  0D7E                     __ptext9:	
  2931 ;; *************** function ___wmul *****************
  2932 ;; Defined at:
  2933 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  multiplier      2    0[COMMON] unsigned int 
  2936 ;;  multiplicand    2    2[COMMON] unsigned int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  product         2    4[COMMON] unsigned int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    0[COMMON] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2948 ;;      Params:         4       0       0       0       0
  2949 ;;      Locals:         2       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0
  2951 ;;      Totals:         6       0       0       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		_sprintf
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function ___wmul
  2963  0D7E                     ___wmul:	
  2964                           
  2965                           ;incstack = 0
  2966                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2967  0D7E  01F4               	clrf	___wmul@product
  2968  0D7F  01F5               	clrf	___wmul@product+1
  2969  0D80                     i1l1366:	
  2970  0D80  1C70               	btfss	___wmul@multiplier,0
  2971  0D81  2D88               	goto	i1l258
  2972  0D82  0872               	movf	___wmul@multiplicand,w
  2973  0D83  07F4               	addwf	___wmul@product,f
  2974  0D84  1803               	skipnc
  2975  0D85  0AF5               	incf	___wmul@product+1,f
  2976  0D86  0873               	movf	___wmul@multiplicand+1,w
  2977  0D87  07F5               	addwf	___wmul@product+1,f
  2978  0D88                     i1l258:	
  2979  0D88  3001               	movlw	1
  2980  0D89                     u144_25:	
  2981  0D89  1003               	clrc
  2982  0D8A  0DF2               	rlf	___wmul@multiplicand,f
  2983  0D8B  0DF3               	rlf	___wmul@multiplicand+1,f
  2984  0D8C  3EFF               	addlw	-1
  2985  0D8D  1D03               	skipz
  2986  0D8E  2D89               	goto	u144_25
  2987  0D8F  3001               	movlw	1
  2988  0D90                     u145_25:	
  2989  0D90  1003               	clrc
  2990  0D91  0CF1               	rrf	___wmul@multiplier+1,f
  2991  0D92  0CF0               	rrf	___wmul@multiplier,f
  2992  0D93  3EFF               	addlw	-1
  2993  0D94  1D03               	skipz
  2994  0D95  2D90               	goto	u145_25
  2995  0D96  0871               	movf	___wmul@multiplier+1,w
  2996  0D97  0470               	iorwf	___wmul@multiplier,w
  2997  0D98  1D03               	skipz
  2998  0D99  2D80               	goto	i1l1366
  2999  0D9A  0875               	movf	___wmul@product+1,w
  3000  0D9B  01F1               	clrf	?___wmul+1
  3001  0D9C  07F1               	addwf	?___wmul+1,f
  3002  0D9D  0874               	movf	___wmul@product,w
  3003  0D9E  01F0               	clrf	?___wmul
  3004  0D9F  07F0               	addwf	?___wmul,f
  3005  0DA0  0008               	return
  3006  0DA1                     __end_of___wmul:	
  3007                           
  3008                           	psect	text10
  3009  0DE9                     __ptext10:	
  3010 ;; *************** function ___llmod *****************
  3011 ;; Defined at:
  3012 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  divisor         4    0[BANK0 ] unsigned long 
  3015 ;;  dividend        4    4[BANK0 ] unsigned long 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  counter         1    9[BANK0 ] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  4    0[BANK0 ] unsigned long 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3027 ;;      Params:         0       8       0       0       0
  3028 ;;      Locals:         0       1       0       0       0
  3029 ;;      Temps:          0       1       0       0       0
  3030 ;;      Totals:         0      10       0       0       0
  3031 ;;Total ram usage:       10 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_sprintf
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function ___llmod
  3042  0DE9                     ___llmod:	
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3046  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0DEB  0823               	movf	___llmod@divisor+3,w
  3049  0DEC  0422               	iorwf	___llmod@divisor+2,w
  3050  0DED  0421               	iorwf	___llmod@divisor+1,w
  3051  0DEE  0420               	iorwf	___llmod@divisor,w
  3052  0DEF  1903               	skipnz
  3053  0DF0  2E2E               	goto	i1l1488
  3054  0DF1  01A9               	clrf	___llmod@counter
  3055  0DF2  0AA9               	incf	___llmod@counter,f
  3056  0DF3                     i1l1478:	
  3057  0DF3  1BA3               	btfsc	___llmod@divisor+3,7
  3058  0DF4  2E03               	goto	i1l1480
  3059  0DF5  3001               	movlw	1
  3060  0DF6  00A8               	movwf	??___llmod
  3061  0DF7                     u179_25:	
  3062  0DF7  1003               	clrc
  3063  0DF8  0DA0               	rlf	___llmod@divisor,f
  3064  0DF9  0DA1               	rlf	___llmod@divisor+1,f
  3065  0DFA  0DA2               	rlf	___llmod@divisor+2,f
  3066  0DFB  0DA3               	rlf	___llmod@divisor+3,f
  3067  0DFC  0BA8               	decfsz	??___llmod,f
  3068  0DFD  2DF7               	goto	u179_25
  3069  0DFE  3001               	movlw	1
  3070  0DFF  00A8               	movwf	??___llmod
  3071  0E00  0828               	movf	??___llmod,w
  3072  0E01  07A9               	addwf	___llmod@counter,f
  3073  0E02  2DF3               	goto	i1l1478
  3074  0E03                     i1l1480:	
  3075  0E03  0823               	movf	___llmod@divisor+3,w
  3076  0E04  0227               	subwf	___llmod@dividend+3,w
  3077  0E05  1D03               	skipz
  3078  0E06  2E11               	goto	u181_25
  3079  0E07  0822               	movf	___llmod@divisor+2,w
  3080  0E08  0226               	subwf	___llmod@dividend+2,w
  3081  0E09  1D03               	skipz
  3082  0E0A  2E11               	goto	u181_25
  3083  0E0B  0821               	movf	___llmod@divisor+1,w
  3084  0E0C  0225               	subwf	___llmod@dividend+1,w
  3085  0E0D  1D03               	skipz
  3086  0E0E  2E11               	goto	u181_25
  3087  0E0F  0820               	movf	___llmod@divisor,w
  3088  0E10  0224               	subwf	___llmod@dividend,w
  3089  0E11                     u181_25:	
  3090  0E11  1C03               	skipc
  3091  0E12  2E21               	goto	i1l1484
  3092  0E13  0820               	movf	___llmod@divisor,w
  3093  0E14  02A4               	subwf	___llmod@dividend,f
  3094  0E15  0821               	movf	___llmod@divisor+1,w
  3095  0E16  1C03               	skipc
  3096  0E17  0F21               	incfsz	___llmod@divisor+1,w
  3097  0E18  02A5               	subwf	___llmod@dividend+1,f
  3098  0E19  0822               	movf	___llmod@divisor+2,w
  3099  0E1A  1C03               	skipc
  3100  0E1B  0F22               	incfsz	___llmod@divisor+2,w
  3101  0E1C  02A6               	subwf	___llmod@dividend+2,f
  3102  0E1D  0823               	movf	___llmod@divisor+3,w
  3103  0E1E  1C03               	skipc
  3104  0E1F  0F23               	incfsz	___llmod@divisor+3,w
  3105  0E20  02A7               	subwf	___llmod@dividend+3,f
  3106  0E21                     i1l1484:	
  3107  0E21  3001               	movlw	1
  3108  0E22                     u182_25:	
  3109  0E22  1003               	clrc
  3110  0E23  0CA3               	rrf	___llmod@divisor+3,f
  3111  0E24  0CA2               	rrf	___llmod@divisor+2,f
  3112  0E25  0CA1               	rrf	___llmod@divisor+1,f
  3113  0E26  0CA0               	rrf	___llmod@divisor,f
  3114  0E27  3EFF               	addlw	-1
  3115  0E28  1D03               	skipz
  3116  0E29  2E22               	goto	u182_25
  3117  0E2A  3001               	movlw	1
  3118  0E2B  02A9               	subwf	___llmod@counter,f
  3119  0E2C  1D03               	btfss	3,2
  3120  0E2D  2E03               	goto	i1l1480
  3121  0E2E                     i1l1488:	
  3122  0E2E  0827               	movf	___llmod@dividend+3,w
  3123  0E2F  00A3               	movwf	?___llmod+3
  3124  0E30  0826               	movf	___llmod@dividend+2,w
  3125  0E31  00A2               	movwf	?___llmod+2
  3126  0E32  0825               	movf	___llmod@dividend+1,w
  3127  0E33  00A1               	movwf	?___llmod+1
  3128  0E34  0824               	movf	___llmod@dividend,w
  3129  0E35  00A0               	movwf	?___llmod
  3130  0E36  0008               	return
  3131  0E37                     __end_of___llmod:	
  3132                           
  3133                           	psect	text11
  3134  0473                     __ptext11:	
  3135 ;; *************** function ___lldiv *****************
  3136 ;; Defined at:
  3137 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  divisor         4    0[COMMON] unsigned long 
  3140 ;;  dividend        4    4[COMMON] unsigned long 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  quotient        4    9[COMMON] unsigned long 
  3143 ;;  counter         1   13[COMMON] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  4    0[COMMON] unsigned long 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         8       0       0       0       0
  3154 ;;      Locals:         5       0       0       0       0
  3155 ;;      Temps:          1       0       0       0       0
  3156 ;;      Totals:        14       0       0       0       0
  3157 ;;Total ram usage:       14 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_sprintf
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function ___lldiv
  3168  0473                     ___lldiv:	
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3172  0473  3000               	movlw	0
  3173  0474  00FC               	movwf	___lldiv@quotient+3
  3174  0475  3000               	movlw	0
  3175  0476  00FB               	movwf	___lldiv@quotient+2
  3176  0477  3000               	movlw	0
  3177  0478  00FA               	movwf	___lldiv@quotient+1
  3178  0479  3000               	movlw	0
  3179  047A  00F9               	movwf	___lldiv@quotient
  3180  047B  0873               	movf	___lldiv@divisor+3,w
  3181  047C  0472               	iorwf	___lldiv@divisor+2,w
  3182  047D  0471               	iorwf	___lldiv@divisor+1,w
  3183  047E  0470               	iorwf	___lldiv@divisor,w
  3184  047F  1903               	skipnz
  3185  0480  2CC8               	goto	i1l1468
  3186  0481  01FD               	clrf	___lldiv@counter
  3187  0482  0AFD               	incf	___lldiv@counter,f
  3188  0483                     i1l1454:	
  3189  0483  1BF3               	btfsc	___lldiv@divisor+3,7
  3190  0484  2C93               	goto	i1l1456
  3191  0485  3001               	movlw	1
  3192  0486  00F8               	movwf	??___lldiv
  3193  0487                     u172_25:	
  3194  0487  1003               	clrc
  3195  0488  0DF0               	rlf	___lldiv@divisor,f
  3196  0489  0DF1               	rlf	___lldiv@divisor+1,f
  3197  048A  0DF2               	rlf	___lldiv@divisor+2,f
  3198  048B  0DF3               	rlf	___lldiv@divisor+3,f
  3199  048C  0BF8               	decfsz	??___lldiv,f
  3200  048D  2C87               	goto	u172_25
  3201  048E  3001               	movlw	1
  3202  048F  00F8               	movwf	??___lldiv
  3203  0490  0878               	movf	??___lldiv,w
  3204  0491  07FD               	addwf	___lldiv@counter,f
  3205  0492  2C83               	goto	i1l1454
  3206  0493                     i1l1456:	
  3207  0493  3001               	movlw	1
  3208  0494  00F8               	movwf	??___lldiv
  3209  0495                     u174_25:	
  3210  0495  1003               	clrc
  3211  0496  0DF9               	rlf	___lldiv@quotient,f
  3212  0497  0DFA               	rlf	___lldiv@quotient+1,f
  3213  0498  0DFB               	rlf	___lldiv@quotient+2,f
  3214  0499  0DFC               	rlf	___lldiv@quotient+3,f
  3215  049A  0BF8               	decfsz	??___lldiv,f
  3216  049B  2C95               	goto	u174_25
  3217  049C  0873               	movf	___lldiv@divisor+3,w
  3218  049D  0277               	subwf	___lldiv@dividend+3,w
  3219  049E  1D03               	skipz
  3220  049F  2CAA               	goto	u175_25
  3221  04A0  0872               	movf	___lldiv@divisor+2,w
  3222  04A1  0276               	subwf	___lldiv@dividend+2,w
  3223  04A2  1D03               	skipz
  3224  04A3  2CAA               	goto	u175_25
  3225  04A4  0871               	movf	___lldiv@divisor+1,w
  3226  04A5  0275               	subwf	___lldiv@dividend+1,w
  3227  04A6  1D03               	skipz
  3228  04A7  2CAA               	goto	u175_25
  3229  04A8  0870               	movf	___lldiv@divisor,w
  3230  04A9  0274               	subwf	___lldiv@dividend,w
  3231  04AA                     u175_25:	
  3232  04AA  1C03               	skipc
  3233  04AB  2CBB               	goto	i1l1464
  3234  04AC  0870               	movf	___lldiv@divisor,w
  3235  04AD  02F4               	subwf	___lldiv@dividend,f
  3236  04AE  0871               	movf	___lldiv@divisor+1,w
  3237  04AF  1C03               	skipc
  3238  04B0  0F71               	incfsz	___lldiv@divisor+1,w
  3239  04B1  02F5               	subwf	___lldiv@dividend+1,f
  3240  04B2  0872               	movf	___lldiv@divisor+2,w
  3241  04B3  1C03               	skipc
  3242  04B4  0F72               	incfsz	___lldiv@divisor+2,w
  3243  04B5  02F6               	subwf	___lldiv@dividend+2,f
  3244  04B6  0873               	movf	___lldiv@divisor+3,w
  3245  04B7  1C03               	skipc
  3246  04B8  0F73               	incfsz	___lldiv@divisor+3,w
  3247  04B9  02F7               	subwf	___lldiv@dividend+3,f
  3248  04BA  1479               	bsf	___lldiv@quotient,0
  3249  04BB                     i1l1464:	
  3250  04BB  3001               	movlw	1
  3251  04BC                     u176_25:	
  3252  04BC  1003               	clrc
  3253  04BD  0CF3               	rrf	___lldiv@divisor+3,f
  3254  04BE  0CF2               	rrf	___lldiv@divisor+2,f
  3255  04BF  0CF1               	rrf	___lldiv@divisor+1,f
  3256  04C0  0CF0               	rrf	___lldiv@divisor,f
  3257  04C1  3EFF               	addlw	-1
  3258  04C2  1D03               	skipz
  3259  04C3  2CBC               	goto	u176_25
  3260  04C4  3001               	movlw	1
  3261  04C5  02FD               	subwf	___lldiv@counter,f
  3262  04C6  1D03               	btfss	3,2
  3263  04C7  2C93               	goto	i1l1456
  3264  04C8                     i1l1468:	
  3265  04C8  087C               	movf	___lldiv@quotient+3,w
  3266  04C9  00F3               	movwf	?___lldiv+3
  3267  04CA  087B               	movf	___lldiv@quotient+2,w
  3268  04CB  00F2               	movwf	?___lldiv+2
  3269  04CC  087A               	movf	___lldiv@quotient+1,w
  3270  04CD  00F1               	movwf	?___lldiv+1
  3271  04CE  0879               	movf	___lldiv@quotient,w
  3272  04CF  00F0               	movwf	?___lldiv
  3273  04D0  0008               	return
  3274  04D1                     __end_of___lldiv:	
  3275                           
  3276                           	psect	text12
  3277  04D1                     __ptext12:	
  3278 ;; *************** function ___lltoft *****************
  3279 ;; Defined at:
  3280 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  c               4    8[COMMON] unsigned long 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  exp             1   13[COMMON] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  3    8[COMMON] float 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3294 ;;      Params:         4       0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0
  3296 ;;      Temps:          1       0       0       0       0
  3297 ;;      Totals:         6       0       0       0       0
  3298 ;;Total ram usage:        6 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    1
  3301 ;; This function calls:
  3302 ;;		___ftpack
  3303 ;; This function is called by:
  3304 ;;		_ftoa
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function ___lltoft
  3310  04D1                     ___lltoft:	
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  3314  04D1  308E               	movlw	142
  3315  04D2  00FC               	movwf	??___lltoft
  3316  04D3  087C               	movf	??___lltoft,w
  3317  04D4  00FD               	movwf	___lltoft@exp
  3318  04D5                     i1l1776:	
  3319  04D5  30FF               	movlw	255
  3320  04D6  057B               	andwf	___lltoft@c+3,w
  3321  04D7  1903               	btfsc	3,2
  3322  04D8  2CE7               	goto	i1l1778
  3323  04D9  3001               	movlw	1
  3324  04DA                     u245_25:	
  3325  04DA  1003               	clrc
  3326  04DB  0CFB               	rrf	___lltoft@c+3,f
  3327  04DC  0CFA               	rrf	___lltoft@c+2,f
  3328  04DD  0CF9               	rrf	___lltoft@c+1,f
  3329  04DE  0CF8               	rrf	___lltoft@c,f
  3330  04DF  3EFF               	addlw	-1
  3331  04E0  1D03               	skipz
  3332  04E1  2CDA               	goto	u245_25
  3333  04E2  3001               	movlw	1
  3334  04E3  00FC               	movwf	??___lltoft
  3335  04E4  087C               	movf	??___lltoft,w
  3336  04E5  07FD               	addwf	___lltoft@exp,f
  3337  04E6  2CD5               	goto	i1l1776
  3338  04E7                     i1l1778:	
  3339  04E7  0878               	movf	___lltoft@c,w
  3340  04E8  00F0               	movwf	___ftpack@arg
  3341  04E9  0879               	movf	___lltoft@c+1,w
  3342  04EA  00F1               	movwf	___ftpack@arg+1
  3343  04EB  087A               	movf	___lltoft@c+2,w
  3344  04EC  00F2               	movwf	___ftpack@arg+2
  3345  04ED  087D               	movf	___lltoft@exp,w
  3346  04EE  00FC               	movwf	??___lltoft
  3347  04EF  087C               	movf	??___lltoft,w
  3348  04F0  00F3               	movwf	___ftpack@exp
  3349  04F1  01F4               	clrf	___ftpack@sign
  3350  04F2  120A  118A  277E   	fcall	___ftpack
  3351  04F5  0870               	movf	?___ftpack,w
  3352  04F6  00F8               	movwf	?___lltoft
  3353  04F7  0871               	movf	?___ftpack+1,w
  3354  04F8  00F9               	movwf	?___lltoft+1
  3355  04F9  0872               	movf	?___ftpack+2,w
  3356  04FA  00FA               	movwf	?___lltoft+2
  3357  04FB  0008               	return
  3358  04FC                     __end_of___lltoft:	
  3359                           
  3360                           	psect	text13
  3361  0EE3                     __ptext13:	
  3362 ;; *************** function ___fttol *****************
  3363 ;; Defined at:
  3364 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  f1              3   16[BANK0 ] float 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  lval            4   25[BANK0 ] unsigned long 
  3369 ;;  exp1            1   29[BANK0 ] unsigned char 
  3370 ;;  sign1           1   24[BANK0 ] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  4   16[BANK0 ] long 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3380 ;;      Params:         0       4       0       0       0
  3381 ;;      Locals:         0       6       0       0       0
  3382 ;;      Temps:          0       4       0       0       0
  3383 ;;      Totals:         0      14       0       0       0
  3384 ;;Total ram usage:       14 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_ftoa
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function ___fttol
  3395  0EE3                     ___fttol:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3399  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0EE5  0830               	movf	___fttol@f1,w
  3402  0EE6  00B4               	movwf	??___fttol
  3403  0EE7  0831               	movf	___fttol@f1+1,w
  3404  0EE8  00B5               	movwf	??___fttol+1
  3405  0EE9  0832               	movf	___fttol@f1+2,w
  3406  0EEA  00B6               	movwf	??___fttol+2
  3407  0EEB  1003               	clrc
  3408  0EEC  0D35               	rlf	??___fttol+1,w
  3409  0EED  0D36               	rlf	??___fttol+2,w
  3410  0EEE  00B7               	movwf	??___fttol+3
  3411  0EEF  0837               	movf	??___fttol+3,w
  3412  0EF0  00BD               	movwf	___fttol@exp1
  3413  0EF1  08BD               	movf	___fttol@exp1,f
  3414  0EF2  1D03               	skipz
  3415  0EF3  2EFD               	goto	i1l1734
  3416  0EF4  3000               	movlw	0
  3417  0EF5  00B3               	movwf	?___fttol+3
  3418  0EF6  3000               	movlw	0
  3419  0EF7  00B2               	movwf	?___fttol+2
  3420  0EF8  3000               	movlw	0
  3421  0EF9  00B1               	movwf	?___fttol+1
  3422  0EFA  3000               	movlw	0
  3423  0EFB  00B0               	movwf	?___fttol
  3424  0EFC  0008               	return
  3425  0EFD                     i1l1734:	
  3426  0EFD  0830               	movf	___fttol@f1,w
  3427  0EFE  00B4               	movwf	??___fttol
  3428  0EFF  0831               	movf	___fttol@f1+1,w
  3429  0F00  00B5               	movwf	??___fttol+1
  3430  0F01  0832               	movf	___fttol@f1+2,w
  3431  0F02  00B6               	movwf	??___fttol+2
  3432  0F03  3017               	movlw	23
  3433  0F04                     u236_25:	
  3434  0F04  1003               	clrc
  3435  0F05  0CB6               	rrf	??___fttol+2,f
  3436  0F06  0CB5               	rrf	??___fttol+1,f
  3437  0F07  0CB4               	rrf	??___fttol,f
  3438  0F08  3EFF               	addlw	-1
  3439  0F09  1D03               	skipz
  3440  0F0A  2F04               	goto	u236_25
  3441  0F0B  0834               	movf	??___fttol,w
  3442  0F0C  00B7               	movwf	??___fttol+3
  3443  0F0D  0837               	movf	??___fttol+3,w
  3444  0F0E  00B8               	movwf	___fttol@sign1
  3445  0F0F  17B1               	bsf	___fttol@f1+1,7
  3446  0F10  30FF               	movlw	255
  3447  0F11  05B0               	andwf	___fttol@f1,f
  3448  0F12  30FF               	movlw	255
  3449  0F13  05B1               	andwf	___fttol@f1+1,f
  3450  0F14  3000               	movlw	0
  3451  0F15  05B2               	andwf	___fttol@f1+2,f
  3452  0F16  0830               	movf	___fttol@f1,w
  3453  0F17  00B9               	movwf	___fttol@lval
  3454  0F18  0831               	movf	___fttol@f1+1,w
  3455  0F19  00BA               	movwf	___fttol@lval+1
  3456  0F1A  0832               	movf	___fttol@f1+2,w
  3457  0F1B  00BB               	movwf	___fttol@lval+2
  3458  0F1C  01BC               	clrf	___fttol@lval+3
  3459  0F1D  308E               	movlw	142
  3460  0F1E  02BD               	subwf	___fttol@exp1,f
  3461  0F1F  1FBD               	btfss	___fttol@exp1,7
  3462  0F20  2F3F               	goto	i1l1754
  3463  0F21  083D               	movf	___fttol@exp1,w
  3464  0F22  3A80               	xorlw	128
  3465  0F23  3E8F               	addlw	143
  3466  0F24  1803               	skipnc
  3467  0F25  2F2F               	goto	i1l1752
  3468  0F26  3000               	movlw	0
  3469  0F27  00B3               	movwf	?___fttol+3
  3470  0F28  3000               	movlw	0
  3471  0F29  00B2               	movwf	?___fttol+2
  3472  0F2A  3000               	movlw	0
  3473  0F2B  00B1               	movwf	?___fttol+1
  3474  0F2C  3000               	movlw	0
  3475  0F2D  00B0               	movwf	?___fttol
  3476  0F2E  0008               	return
  3477  0F2F                     i1l1752:	
  3478  0F2F  3001               	movlw	1
  3479  0F30                     u239_25:	
  3480  0F30  1003               	clrc
  3481  0F31  0CBC               	rrf	___fttol@lval+3,f
  3482  0F32  0CBB               	rrf	___fttol@lval+2,f
  3483  0F33  0CBA               	rrf	___fttol@lval+1,f
  3484  0F34  0CB9               	rrf	___fttol@lval,f
  3485  0F35  3EFF               	addlw	-1
  3486  0F36  1D03               	skipz
  3487  0F37  2F30               	goto	u239_25
  3488  0F38  3001               	movlw	1
  3489  0F39  00B4               	movwf	??___fttol
  3490  0F3A  0834               	movf	??___fttol,w
  3491  0F3B  07BD               	addwf	___fttol@exp1,f
  3492  0F3C  1903               	btfsc	3,2
  3493  0F3D  2F5A               	goto	i1l1764
  3494  0F3E  2F2F               	goto	i1l1752
  3495  0F3F                     i1l1754:	
  3496  0F3F  3018               	movlw	24
  3497  0F40  023D               	subwf	___fttol@exp1,w
  3498  0F41  1C03               	skipc
  3499  0F42  2F57               	goto	i1l1762
  3500  0F43  3000               	movlw	0
  3501  0F44  00B3               	movwf	?___fttol+3
  3502  0F45  3000               	movlw	0
  3503  0F46  00B2               	movwf	?___fttol+2
  3504  0F47  3000               	movlw	0
  3505  0F48  00B1               	movwf	?___fttol+1
  3506  0F49  3000               	movlw	0
  3507  0F4A  00B0               	movwf	?___fttol
  3508  0F4B  0008               	return
  3509  0F4C                     i1l1760:	
  3510  0F4C  3001               	movlw	1
  3511  0F4D  00B4               	movwf	??___fttol
  3512  0F4E                     u242_25:	
  3513  0F4E  1003               	clrc
  3514  0F4F  0DB9               	rlf	___fttol@lval,f
  3515  0F50  0DBA               	rlf	___fttol@lval+1,f
  3516  0F51  0DBB               	rlf	___fttol@lval+2,f
  3517  0F52  0DBC               	rlf	___fttol@lval+3,f
  3518  0F53  0BB4               	decfsz	??___fttol,f
  3519  0F54  2F4E               	goto	u242_25
  3520  0F55  3001               	movlw	1
  3521  0F56  02BD               	subwf	___fttol@exp1,f
  3522  0F57                     i1l1762:	
  3523  0F57  08BD               	movf	___fttol@exp1,f
  3524  0F58  1D03               	skipz
  3525  0F59  2F4C               	goto	i1l1760
  3526  0F5A                     i1l1764:	
  3527  0F5A  0838               	movf	___fttol@sign1,w
  3528  0F5B  1903               	btfsc	3,2
  3529  0F5C  2F68               	goto	i1l1768
  3530  0F5D  09B9               	comf	___fttol@lval,f
  3531  0F5E  09BA               	comf	___fttol@lval+1,f
  3532  0F5F  09BB               	comf	___fttol@lval+2,f
  3533  0F60  09BC               	comf	___fttol@lval+3,f
  3534  0F61  0AB9               	incf	___fttol@lval,f
  3535  0F62  1903               	skipnz
  3536  0F63  0ABA               	incf	___fttol@lval+1,f
  3537  0F64  1903               	skipnz
  3538  0F65  0ABB               	incf	___fttol@lval+2,f
  3539  0F66  1903               	skipnz
  3540  0F67  0ABC               	incf	___fttol@lval+3,f
  3541  0F68                     i1l1768:	
  3542  0F68  083C               	movf	___fttol@lval+3,w
  3543  0F69  00B3               	movwf	?___fttol+3
  3544  0F6A  083B               	movf	___fttol@lval+2,w
  3545  0F6B  00B2               	movwf	?___fttol+2
  3546  0F6C  083A               	movf	___fttol@lval+1,w
  3547  0F6D  00B1               	movwf	?___fttol+1
  3548  0F6E  0839               	movf	___fttol@lval,w
  3549  0F6F  00B0               	movwf	?___fttol
  3550  0F70  0008               	return
  3551  0F71                     __end_of___fttol:	
  3552                           
  3553                           	psect	text14
  3554  0D3F                     __ptext14:	
  3555 ;; *************** function ___ftsub *****************
  3556 ;; Defined at:
  3557 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  f2              3    7[BANK0 ] float 
  3560 ;;  f1              3   10[BANK0 ] float 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  3    7[BANK0 ] float 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, pclath, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3572 ;;      Params:         0       6       0       0       0
  3573 ;;      Locals:         0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0
  3575 ;;      Totals:         0       6       0       0       0
  3576 ;;Total ram usage:        6 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		___ftadd
  3581 ;; This function is called by:
  3582 ;;		_ftoa
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function ___ftsub
  3588  0D3F                     ___ftsub:	
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3592  0D3F  3080               	movlw	128
  3593  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  3594  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  3595  0D42  06A9               	xorwf	___ftsub@f2+2,f
  3596  0D43  082A               	movf	___ftsub@f1,w
  3597  0D44  00F8               	movwf	___ftadd@f1
  3598  0D45  082B               	movf	___ftsub@f1+1,w
  3599  0D46  00F9               	movwf	___ftadd@f1+1
  3600  0D47  082C               	movf	___ftsub@f1+2,w
  3601  0D48  00FA               	movwf	___ftadd@f1+2
  3602  0D49  0827               	movf	___ftsub@f2,w
  3603  0D4A  00FB               	movwf	___ftadd@f2
  3604  0D4B  0828               	movf	___ftsub@f2+1,w
  3605  0D4C  00FC               	movwf	___ftadd@f2+1
  3606  0D4D  0829               	movf	___ftsub@f2+2,w
  3607  0D4E  00FD               	movwf	___ftadd@f2+2
  3608  0D4F  120A  118A  236C   	fcall	___ftadd
  3609  0D52  0878               	movf	?___ftadd,w
  3610  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0D55  00A7               	movwf	?___ftsub
  3613  0D56  0879               	movf	?___ftadd+1,w
  3614  0D57  00A8               	movwf	?___ftsub+1
  3615  0D58  087A               	movf	?___ftadd+2,w
  3616  0D59  00A9               	movwf	?___ftsub+2
  3617  0D5A  0008               	return
  3618  0D5B                     __end_of___ftsub:	
  3619                           
  3620                           	psect	text15
  3621  036C                     __ptext15:	
  3622 ;; *************** function ___ftadd *****************
  3623 ;; Defined at:
  3624 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  f1              3    8[COMMON] float 
  3627 ;;  f2              3   11[COMMON] float 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  exp1            1    6[BANK0 ] unsigned char 
  3630 ;;  exp2            1    5[BANK0 ] unsigned char 
  3631 ;;  sign            1    4[BANK0 ] unsigned char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  3    8[COMMON] float 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0, pclath, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3641 ;;      Params:         6       0       0       0       0
  3642 ;;      Locals:         0       3       0       0       0
  3643 ;;      Temps:          0       4       0       0       0
  3644 ;;      Totals:         6       7       0       0       0
  3645 ;;Total ram usage:       13 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    1
  3648 ;; This function calls:
  3649 ;;		___ftpack
  3650 ;; This function is called by:
  3651 ;;		___ftsub
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function ___ftadd
  3657  036C                     ___ftadd:	
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3661  036C  0878               	movf	___ftadd@f1,w
  3662  036D  1283               	bcf	3,5	;RP0=0, select bank0
  3663  036E  1303               	bcf	3,6	;RP1=0, select bank0
  3664  036F  00A0               	movwf	??___ftadd
  3665  0370  0879               	movf	___ftadd@f1+1,w
  3666  0371  00A1               	movwf	??___ftadd+1
  3667  0372  087A               	movf	___ftadd@f1+2,w
  3668  0373  00A2               	movwf	??___ftadd+2
  3669  0374  1003               	clrc
  3670  0375  0D21               	rlf	??___ftadd+1,w
  3671  0376  0D22               	rlf	??___ftadd+2,w
  3672  0377  00A3               	movwf	??___ftadd+3
  3673  0378  0823               	movf	??___ftadd+3,w
  3674  0379  00A6               	movwf	___ftadd@exp1
  3675  037A  087B               	movf	___ftadd@f2,w
  3676  037B  00A0               	movwf	??___ftadd
  3677  037C  087C               	movf	___ftadd@f2+1,w
  3678  037D  00A1               	movwf	??___ftadd+1
  3679  037E  087D               	movf	___ftadd@f2+2,w
  3680  037F  00A2               	movwf	??___ftadd+2
  3681  0380  1003               	clrc
  3682  0381  0D21               	rlf	??___ftadd+1,w
  3683  0382  0D22               	rlf	??___ftadd+2,w
  3684  0383  00A3               	movwf	??___ftadd+3
  3685  0384  0823               	movf	??___ftadd+3,w
  3686  0385  00A5               	movwf	___ftadd@exp2
  3687  0386  0826               	movf	___ftadd@exp1,w
  3688  0387  1903               	btfsc	3,2
  3689  0388  2B95               	goto	i1l1384
  3690  0389  0825               	movf	___ftadd@exp2,w
  3691  038A  0226               	subwf	___ftadd@exp1,w
  3692  038B  1803               	skipnc
  3693  038C  2B9C               	goto	i1l1388
  3694  038D  0326               	decf	___ftadd@exp1,w
  3695  038E  3AFF               	xorlw	255
  3696  038F  0725               	addwf	___ftadd@exp2,w
  3697  0390  00A0               	movwf	??___ftadd
  3698  0391  3019               	movlw	25
  3699  0392  0220               	subwf	??___ftadd,w
  3700  0393  1C03               	skipc
  3701  0394  2B9C               	goto	i1l1388
  3702  0395                     i1l1384:	
  3703  0395  087B               	movf	___ftadd@f2,w
  3704  0396  00F8               	movwf	?___ftadd
  3705  0397  087C               	movf	___ftadd@f2+1,w
  3706  0398  00F9               	movwf	?___ftadd+1
  3707  0399  087D               	movf	___ftadd@f2+2,w
  3708  039A  00FA               	movwf	?___ftadd+2
  3709  039B  0008               	return
  3710  039C                     i1l1388:	
  3711  039C  0825               	movf	___ftadd@exp2,w
  3712  039D  1903               	btfsc	3,2
  3713  039E  0008               	return
  3714  039F  0826               	movf	___ftadd@exp1,w
  3715  03A0  0225               	subwf	___ftadd@exp2,w
  3716  03A1  1803               	skipnc
  3717  03A2  2BAB               	goto	i1l1394
  3718  03A3  0325               	decf	___ftadd@exp2,w
  3719  03A4  3AFF               	xorlw	255
  3720  03A5  0726               	addwf	___ftadd@exp1,w
  3721  03A6  00A0               	movwf	??___ftadd
  3722  03A7  3019               	movlw	25
  3723  03A8  0220               	subwf	??___ftadd,w
  3724  03A9  1803               	btfsc	3,0
  3725  03AA  0008               	return
  3726  03AB                     i1l1394:	
  3727  03AB  3006               	movlw	6
  3728  03AC  00A0               	movwf	??___ftadd
  3729  03AD  0820               	movf	??___ftadd,w
  3730  03AE  00A4               	movwf	___ftadd@sign
  3731  03AF  1BFA               	btfsc	___ftadd@f1+2,7
  3732  03B0  17A4               	bsf	___ftadd@sign,7
  3733  03B1  1BFD               	btfsc	___ftadd@f2+2,7
  3734  03B2  1724               	bsf	___ftadd@sign,6
  3735  03B3  17F9               	bsf	___ftadd@f1+1,7
  3736  03B4  30FF               	movlw	255
  3737  03B5  05F8               	andwf	___ftadd@f1,f
  3738  03B6  30FF               	movlw	255
  3739  03B7  05F9               	andwf	___ftadd@f1+1,f
  3740  03B8  3000               	movlw	0
  3741  03B9  05FA               	andwf	___ftadd@f1+2,f
  3742  03BA  17FC               	bsf	___ftadd@f2+1,7
  3743  03BB  30FF               	movlw	255
  3744  03BC  05FB               	andwf	___ftadd@f2,f
  3745  03BD  30FF               	movlw	255
  3746  03BE  05FC               	andwf	___ftadd@f2+1,f
  3747  03BF  3000               	movlw	0
  3748  03C0  05FD               	andwf	___ftadd@f2+2,f
  3749  03C1  0825               	movf	___ftadd@exp2,w
  3750  03C2  0226               	subwf	___ftadd@exp1,w
  3751  03C3  1803               	skipnc
  3752  03C4  2BEB               	goto	i1l1416
  3753  03C5                     i1l1406:	
  3754  03C5  3001               	movlw	1
  3755  03C6                     u156_25:	
  3756  03C6  1003               	clrc
  3757  03C7  0DFB               	rlf	___ftadd@f2,f
  3758  03C8  0DFC               	rlf	___ftadd@f2+1,f
  3759  03C9  0DFD               	rlf	___ftadd@f2+2,f
  3760  03CA  3EFF               	addlw	-1
  3761  03CB  1D03               	skipz
  3762  03CC  2BC6               	goto	u156_25
  3763  03CD  3001               	movlw	1
  3764  03CE  02A5               	subwf	___ftadd@exp2,f
  3765  03CF  0825               	movf	___ftadd@exp2,w
  3766  03D0  0626               	xorwf	___ftadd@exp1,w
  3767  03D1  1903               	skipnz
  3768  03D2  2BE6               	goto	i1l1414
  3769  03D3  3001               	movlw	1
  3770  03D4  02A4               	subwf	___ftadd@sign,f
  3771  03D5  0824               	movf	___ftadd@sign,w
  3772  03D6  3907               	andlw	7
  3773  03D7  1903               	btfsc	3,2
  3774  03D8  2BE6               	goto	i1l1414
  3775  03D9  2BC5               	goto	i1l1406
  3776  03DA                     i1l1412:	
  3777  03DA  3001               	movlw	1
  3778  03DB                     u159_25:	
  3779  03DB  1003               	clrc
  3780  03DC  0CFA               	rrf	___ftadd@f1+2,f
  3781  03DD  0CF9               	rrf	___ftadd@f1+1,f
  3782  03DE  0CF8               	rrf	___ftadd@f1,f
  3783  03DF  3EFF               	addlw	-1
  3784  03E0  1D03               	skipz
  3785  03E1  2BDB               	goto	u159_25
  3786  03E2  3001               	movlw	1
  3787  03E3  00A0               	movwf	??___ftadd
  3788  03E4  0820               	movf	??___ftadd,w
  3789  03E5  07A6               	addwf	___ftadd@exp1,f
  3790  03E6                     i1l1414:	
  3791  03E6  0826               	movf	___ftadd@exp1,w
  3792  03E7  0625               	xorwf	___ftadd@exp2,w
  3793  03E8  1903               	btfsc	3,2
  3794  03E9  2C14               	goto	i1l448
  3795  03EA  2BDA               	goto	i1l1412
  3796  03EB                     i1l1416:	
  3797  03EB  0826               	movf	___ftadd@exp1,w
  3798  03EC  0225               	subwf	___ftadd@exp2,w
  3799  03ED  1803               	skipnc
  3800  03EE  2C14               	goto	i1l448
  3801  03EF                     i1l1418:	
  3802  03EF  3001               	movlw	1
  3803  03F0                     u162_25:	
  3804  03F0  1003               	clrc
  3805  03F1  0DF8               	rlf	___ftadd@f1,f
  3806  03F2  0DF9               	rlf	___ftadd@f1+1,f
  3807  03F3  0DFA               	rlf	___ftadd@f1+2,f
  3808  03F4  3EFF               	addlw	-1
  3809  03F5  1D03               	skipz
  3810  03F6  2BF0               	goto	u162_25
  3811  03F7  3001               	movlw	1
  3812  03F8  02A6               	subwf	___ftadd@exp1,f
  3813  03F9  0825               	movf	___ftadd@exp2,w
  3814  03FA  0626               	xorwf	___ftadd@exp1,w
  3815  03FB  1903               	skipnz
  3816  03FC  2C10               	goto	i1l1426
  3817  03FD  3001               	movlw	1
  3818  03FE  02A4               	subwf	___ftadd@sign,f
  3819  03FF  0824               	movf	___ftadd@sign,w
  3820  0400  3907               	andlw	7
  3821  0401  1903               	btfsc	3,2
  3822  0402  2C10               	goto	i1l1426
  3823  0403  2BEF               	goto	i1l1418
  3824  0404                     i1l1424:	
  3825  0404  3001               	movlw	1
  3826  0405                     u165_25:	
  3827  0405  1003               	clrc
  3828  0406  0CFD               	rrf	___ftadd@f2+2,f
  3829  0407  0CFC               	rrf	___ftadd@f2+1,f
  3830  0408  0CFB               	rrf	___ftadd@f2,f
  3831  0409  3EFF               	addlw	-1
  3832  040A  1D03               	skipz
  3833  040B  2C05               	goto	u165_25
  3834  040C  3001               	movlw	1
  3835  040D  00A0               	movwf	??___ftadd
  3836  040E  0820               	movf	??___ftadd,w
  3837  040F  07A5               	addwf	___ftadd@exp2,f
  3838  0410                     i1l1426:	
  3839  0410  0826               	movf	___ftadd@exp1,w
  3840  0411  0625               	xorwf	___ftadd@exp2,w
  3841  0412  1D03               	skipz
  3842  0413  2C04               	goto	i1l1424
  3843  0414                     i1l448:	
  3844  0414  1FA4               	btfss	___ftadd@sign,7
  3845  0415  2C26               	goto	i1l1430
  3846  0416  30FF               	movlw	255
  3847  0417  06F8               	xorwf	___ftadd@f1,f
  3848  0418  30FF               	movlw	255
  3849  0419  06F9               	xorwf	___ftadd@f1+1,f
  3850  041A  30FF               	movlw	255
  3851  041B  06FA               	xorwf	___ftadd@f1+2,f
  3852  041C  3001               	movlw	1
  3853  041D  07F8               	addwf	___ftadd@f1,f
  3854  041E  3000               	movlw	0
  3855  041F  1803               	skipnc
  3856  0420  3001               	movlw	1
  3857  0421  07F9               	addwf	___ftadd@f1+1,f
  3858  0422  3000               	movlw	0
  3859  0423  1803               	skipnc
  3860  0424  3001               	movlw	1
  3861  0425  07FA               	addwf	___ftadd@f1+2,f
  3862  0426                     i1l1430:	
  3863  0426  1F24               	btfss	___ftadd@sign,6
  3864  0427  2C38               	goto	i1l1434
  3865  0428  30FF               	movlw	255
  3866  0429  06FB               	xorwf	___ftadd@f2,f
  3867  042A  30FF               	movlw	255
  3868  042B  06FC               	xorwf	___ftadd@f2+1,f
  3869  042C  30FF               	movlw	255
  3870  042D  06FD               	xorwf	___ftadd@f2+2,f
  3871  042E  3001               	movlw	1
  3872  042F  07FB               	addwf	___ftadd@f2,f
  3873  0430  3000               	movlw	0
  3874  0431  1803               	skipnc
  3875  0432  3001               	movlw	1
  3876  0433  07FC               	addwf	___ftadd@f2+1,f
  3877  0434  3000               	movlw	0
  3878  0435  1803               	skipnc
  3879  0436  3001               	movlw	1
  3880  0437  07FD               	addwf	___ftadd@f2+2,f
  3881  0438                     i1l1434:	
  3882  0438  01A4               	clrf	___ftadd@sign
  3883  0439  0878               	movf	___ftadd@f1,w
  3884  043A  07FB               	addwf	___ftadd@f2,f
  3885  043B  0879               	movf	___ftadd@f1+1,w
  3886  043C  1103               	clrz
  3887  043D  1803               	skipnc
  3888  043E  0A79               	incf	___ftadd@f1+1,w
  3889  043F  1D03               	btfss	3,2
  3890  0440  07FC               	addwf	___ftadd@f2+1,f
  3891  0441  087A               	movf	___ftadd@f1+2,w
  3892  0442  1103               	clrz
  3893  0443  1803               	skipnc
  3894  0444  0A7A               	incf	___ftadd@f1+2,w
  3895  0445  1D03               	btfss	3,2
  3896  0446  07FD               	addwf	___ftadd@f2+2,f
  3897  0447  1FFD               	btfss	___ftadd@f2+2,7
  3898  0448  2C5B               	goto	i1l1444
  3899  0449  30FF               	movlw	255
  3900  044A  06FB               	xorwf	___ftadd@f2,f
  3901  044B  30FF               	movlw	255
  3902  044C  06FC               	xorwf	___ftadd@f2+1,f
  3903  044D  30FF               	movlw	255
  3904  044E  06FD               	xorwf	___ftadd@f2+2,f
  3905  044F  3001               	movlw	1
  3906  0450  07FB               	addwf	___ftadd@f2,f
  3907  0451  3000               	movlw	0
  3908  0452  1803               	skipnc
  3909  0453  3001               	movlw	1
  3910  0454  07FC               	addwf	___ftadd@f2+1,f
  3911  0455  3000               	movlw	0
  3912  0456  1803               	skipnc
  3913  0457  3001               	movlw	1
  3914  0458  07FD               	addwf	___ftadd@f2+2,f
  3915  0459  01A4               	clrf	___ftadd@sign
  3916  045A  0AA4               	incf	___ftadd@sign,f
  3917  045B                     i1l1444:	
  3918  045B  087B               	movf	___ftadd@f2,w
  3919  045C  00F0               	movwf	___ftpack@arg
  3920  045D  087C               	movf	___ftadd@f2+1,w
  3921  045E  00F1               	movwf	___ftpack@arg+1
  3922  045F  087D               	movf	___ftadd@f2+2,w
  3923  0460  00F2               	movwf	___ftpack@arg+2
  3924  0461  0826               	movf	___ftadd@exp1,w
  3925  0462  00A0               	movwf	??___ftadd
  3926  0463  0820               	movf	??___ftadd,w
  3927  0464  00F3               	movwf	___ftpack@exp
  3928  0465  0824               	movf	___ftadd@sign,w
  3929  0466  00A1               	movwf	??___ftadd+1
  3930  0467  0821               	movf	??___ftadd+1,w
  3931  0468  00F4               	movwf	___ftpack@sign
  3932  0469  120A  118A  277E   	fcall	___ftpack
  3933  046C  0870               	movf	?___ftpack,w
  3934  046D  00F8               	movwf	?___ftadd
  3935  046E  0871               	movf	?___ftpack+1,w
  3936  046F  00F9               	movwf	?___ftadd+1
  3937  0470  0872               	movf	?___ftpack+2,w
  3938  0471  00FA               	movwf	?___ftadd+2
  3939  0472  0008               	return
  3940  0473                     __end_of___ftadd:	
  3941                           
  3942                           	psect	text16
  3943  0CD0                     __ptext16:	
  3944 ;; *************** function ___ftneg *****************
  3945 ;; Defined at:
  3946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  f1              3    0[COMMON] float 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;		None
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  3    0[COMMON] float 
  3953 ;; Registers used:
  3954 ;;		wreg
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3960 ;;      Params:         3       0       0       0       0
  3961 ;;      Locals:         0       0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0
  3963 ;;      Totals:         3       0       0       0       0
  3964 ;;Total ram usage:        3 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_ftoa
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function ___ftneg
  3975  0CD0                     ___ftneg:	
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in ___ftneg: [wreg]
  3979  0CD0  0872               	movf	___ftneg@f1+2,w
  3980  0CD1  0471               	iorwf	___ftneg@f1+1,w
  3981  0CD2  0470               	iorwf	___ftneg@f1,w
  3982  0CD3  1903               	skipnz
  3983  0CD4  0008               	return
  3984  0CD5  3080               	movlw	128
  3985  0CD6  06F2               	xorwf	___ftneg@f1+2,f
  3986  0CD7  0008               	return
  3987  0CD8                     __end_of___ftneg:	
  3988                           
  3989                           	psect	text17
  3990  05F1                     __ptext17:	
  3991 ;; *************** function ___ftmul *****************
  3992 ;; Defined at:
  3993 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  f1              3    0[BANK0 ] float 
  3996 ;;  f2              3    3[BANK0 ] float 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  3999 ;;  sign            1   15[BANK0 ] unsigned char 
  4000 ;;  cntr            1   14[BANK0 ] unsigned char 
  4001 ;;  exp             1   10[BANK0 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  3    0[BANK0 ] float 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0, pclath, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4011 ;;      Params:         0       6       0       0       0
  4012 ;;      Locals:         0       6       0       0       0
  4013 ;;      Temps:          0       4       0       0       0
  4014 ;;      Totals:         0      16       0       0       0
  4015 ;;Total ram usage:       16 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    1
  4018 ;; This function calls:
  4019 ;;		___ftpack
  4020 ;; This function is called by:
  4021 ;;		_ISR
  4022 ;;		_ftoa
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function ___ftmul
  4028  05F1                     ___ftmul:	
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4032  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  4033  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  4034  05F3  0820               	movf	___ftmul@f1,w
  4035  05F4  00A6               	movwf	??___ftmul
  4036  05F5  0821               	movf	___ftmul@f1+1,w
  4037  05F6  00A7               	movwf	??___ftmul+1
  4038  05F7  0822               	movf	___ftmul@f1+2,w
  4039  05F8  00A8               	movwf	??___ftmul+2
  4040  05F9  1003               	clrc
  4041  05FA  0D27               	rlf	??___ftmul+1,w
  4042  05FB  0D28               	rlf	??___ftmul+2,w
  4043  05FC  00A9               	movwf	??___ftmul+3
  4044  05FD  0829               	movf	??___ftmul+3,w
  4045  05FE  00AA               	movwf	___ftmul@exp
  4046  05FF  08AA               	movf	___ftmul@exp,f
  4047  0600  1D03               	skipz
  4048  0601  2E09               	goto	i1l1670
  4049  0602  3000               	movlw	0
  4050  0603  00A0               	movwf	?___ftmul
  4051  0604  3000               	movlw	0
  4052  0605  00A1               	movwf	?___ftmul+1
  4053  0606  3000               	movlw	0
  4054  0607  00A2               	movwf	?___ftmul+2
  4055  0608  0008               	return
  4056  0609                     i1l1670:	
  4057  0609  0823               	movf	___ftmul@f2,w
  4058  060A  00A6               	movwf	??___ftmul
  4059  060B  0824               	movf	___ftmul@f2+1,w
  4060  060C  00A7               	movwf	??___ftmul+1
  4061  060D  0825               	movf	___ftmul@f2+2,w
  4062  060E  00A8               	movwf	??___ftmul+2
  4063  060F  1003               	clrc
  4064  0610  0D27               	rlf	??___ftmul+1,w
  4065  0611  0D28               	rlf	??___ftmul+2,w
  4066  0612  00A9               	movwf	??___ftmul+3
  4067  0613  0829               	movf	??___ftmul+3,w
  4068  0614  00AF               	movwf	___ftmul@sign
  4069  0615  08AF               	movf	___ftmul@sign,f
  4070  0616  1D03               	skipz
  4071  0617  2E1F               	goto	i1l1676
  4072  0618  3000               	movlw	0
  4073  0619  00A0               	movwf	?___ftmul
  4074  061A  3000               	movlw	0
  4075  061B  00A1               	movwf	?___ftmul+1
  4076  061C  3000               	movlw	0
  4077  061D  00A2               	movwf	?___ftmul+2
  4078  061E  0008               	return
  4079  061F                     i1l1676:	
  4080  061F  082F               	movf	___ftmul@sign,w
  4081  0620  3E7B               	addlw	123
  4082  0621  00A6               	movwf	??___ftmul
  4083  0622  0826               	movf	??___ftmul,w
  4084  0623  07AA               	addwf	___ftmul@exp,f
  4085  0624  0820               	movf	___ftmul@f1,w
  4086  0625  00A6               	movwf	??___ftmul
  4087  0626  0821               	movf	___ftmul@f1+1,w
  4088  0627  00A7               	movwf	??___ftmul+1
  4089  0628  0822               	movf	___ftmul@f1+2,w
  4090  0629  00A8               	movwf	??___ftmul+2
  4091  062A  3010               	movlw	16
  4092  062B                     u222_25:	
  4093  062B  1003               	clrc
  4094  062C  0CA8               	rrf	??___ftmul+2,f
  4095  062D  0CA7               	rrf	??___ftmul+1,f
  4096  062E  0CA6               	rrf	??___ftmul,f
  4097  062F  3EFF               	addlw	-1
  4098  0630  1D03               	skipz
  4099  0631  2E2B               	goto	u222_25
  4100  0632  0826               	movf	??___ftmul,w
  4101  0633  00A9               	movwf	??___ftmul+3
  4102  0634  0829               	movf	??___ftmul+3,w
  4103  0635  00AF               	movwf	___ftmul@sign
  4104  0636  0823               	movf	___ftmul@f2,w
  4105  0637  00A6               	movwf	??___ftmul
  4106  0638  0824               	movf	___ftmul@f2+1,w
  4107  0639  00A7               	movwf	??___ftmul+1
  4108  063A  0825               	movf	___ftmul@f2+2,w
  4109  063B  00A8               	movwf	??___ftmul+2
  4110  063C  3010               	movlw	16
  4111  063D                     u223_25:	
  4112  063D  1003               	clrc
  4113  063E  0CA8               	rrf	??___ftmul+2,f
  4114  063F  0CA7               	rrf	??___ftmul+1,f
  4115  0640  0CA6               	rrf	??___ftmul,f
  4116  0641  3EFF               	addlw	-1
  4117  0642  1D03               	skipz
  4118  0643  2E3D               	goto	u223_25
  4119  0644  0826               	movf	??___ftmul,w
  4120  0645  00A9               	movwf	??___ftmul+3
  4121  0646  0829               	movf	??___ftmul+3,w
  4122  0647  06AF               	xorwf	___ftmul@sign,f
  4123  0648  3080               	movlw	128
  4124  0649  00A6               	movwf	??___ftmul
  4125  064A  0826               	movf	??___ftmul,w
  4126  064B  05AF               	andwf	___ftmul@sign,f
  4127  064C  17A1               	bsf	___ftmul@f1+1,7
  4128  064D  17A4               	bsf	___ftmul@f2+1,7
  4129  064E  30FF               	movlw	255
  4130  064F  05A3               	andwf	___ftmul@f2,f
  4131  0650  30FF               	movlw	255
  4132  0651  05A4               	andwf	___ftmul@f2+1,f
  4133  0652  3000               	movlw	0
  4134  0653  05A5               	andwf	___ftmul@f2+2,f
  4135  0654  3000               	movlw	0
  4136  0655  00AB               	movwf	___ftmul@f3_as_product
  4137  0656  3000               	movlw	0
  4138  0657  00AC               	movwf	___ftmul@f3_as_product+1
  4139  0658  3000               	movlw	0
  4140  0659  00AD               	movwf	___ftmul@f3_as_product+2
  4141  065A  3007               	movlw	7
  4142  065B  00A6               	movwf	??___ftmul
  4143  065C  0826               	movf	??___ftmul,w
  4144  065D  00AE               	movwf	___ftmul@cntr
  4145  065E                     i1l1688:	
  4146  065E  1C20               	btfss	___ftmul@f1,0
  4147  065F  2E6E               	goto	i1l1692
  4148  0660  0823               	movf	___ftmul@f2,w
  4149  0661  07AB               	addwf	___ftmul@f3_as_product,f
  4150  0662  0824               	movf	___ftmul@f2+1,w
  4151  0663  1103               	clrz
  4152  0664  1803               	skipnc
  4153  0665  0A24               	incf	___ftmul@f2+1,w
  4154  0666  1D03               	btfss	3,2
  4155  0667  07AC               	addwf	___ftmul@f3_as_product+1,f
  4156  0668  0825               	movf	___ftmul@f2+2,w
  4157  0669  1103               	clrz
  4158  066A  1803               	skipnc
  4159  066B  0A25               	incf	___ftmul@f2+2,w
  4160  066C  1D03               	btfss	3,2
  4161  066D  07AD               	addwf	___ftmul@f3_as_product+2,f
  4162  066E                     i1l1692:	
  4163  066E  3001               	movlw	1
  4164  066F                     u226_25:	
  4165  066F  1003               	clrc
  4166  0670  0CA2               	rrf	___ftmul@f1+2,f
  4167  0671  0CA1               	rrf	___ftmul@f1+1,f
  4168  0672  0CA0               	rrf	___ftmul@f1,f
  4169  0673  3EFF               	addlw	-1
  4170  0674  1D03               	skipz
  4171  0675  2E6F               	goto	u226_25
  4172  0676  3001               	movlw	1
  4173  0677                     u227_25:	
  4174  0677  1003               	clrc
  4175  0678  0DA3               	rlf	___ftmul@f2,f
  4176  0679  0DA4               	rlf	___ftmul@f2+1,f
  4177  067A  0DA5               	rlf	___ftmul@f2+2,f
  4178  067B  3EFF               	addlw	-1
  4179  067C  1D03               	skipz
  4180  067D  2E77               	goto	u227_25
  4181  067E  3001               	movlw	1
  4182  067F  02AE               	subwf	___ftmul@cntr,f
  4183  0680  1D03               	btfss	3,2
  4184  0681  2E5E               	goto	i1l1688
  4185  0682  3009               	movlw	9
  4186  0683  00A6               	movwf	??___ftmul
  4187  0684  0826               	movf	??___ftmul,w
  4188  0685  00AE               	movwf	___ftmul@cntr
  4189  0686                     i1l1700:	
  4190  0686  1C20               	btfss	___ftmul@f1,0
  4191  0687  2E96               	goto	i1l1704
  4192  0688  0823               	movf	___ftmul@f2,w
  4193  0689  07AB               	addwf	___ftmul@f3_as_product,f
  4194  068A  0824               	movf	___ftmul@f2+1,w
  4195  068B  1103               	clrz
  4196  068C  1803               	skipnc
  4197  068D  0A24               	incf	___ftmul@f2+1,w
  4198  068E  1D03               	btfss	3,2
  4199  068F  07AC               	addwf	___ftmul@f3_as_product+1,f
  4200  0690  0825               	movf	___ftmul@f2+2,w
  4201  0691  1103               	clrz
  4202  0692  1803               	skipnc
  4203  0693  0A25               	incf	___ftmul@f2+2,w
  4204  0694  1D03               	btfss	3,2
  4205  0695  07AD               	addwf	___ftmul@f3_as_product+2,f
  4206  0696                     i1l1704:	
  4207  0696  3001               	movlw	1
  4208  0697                     u231_25:	
  4209  0697  1003               	clrc
  4210  0698  0CA2               	rrf	___ftmul@f1+2,f
  4211  0699  0CA1               	rrf	___ftmul@f1+1,f
  4212  069A  0CA0               	rrf	___ftmul@f1,f
  4213  069B  3EFF               	addlw	-1
  4214  069C  1D03               	skipz
  4215  069D  2E97               	goto	u231_25
  4216  069E  3001               	movlw	1
  4217  069F                     u232_25:	
  4218  069F  1003               	clrc
  4219  06A0  0CAD               	rrf	___ftmul@f3_as_product+2,f
  4220  06A1  0CAC               	rrf	___ftmul@f3_as_product+1,f
  4221  06A2  0CAB               	rrf	___ftmul@f3_as_product,f
  4222  06A3  3EFF               	addlw	-1
  4223  06A4  1D03               	skipz
  4224  06A5  2E9F               	goto	u232_25
  4225  06A6  3001               	movlw	1
  4226  06A7  02AE               	subwf	___ftmul@cntr,f
  4227  06A8  1D03               	btfss	3,2
  4228  06A9  2E86               	goto	i1l1700
  4229  06AA  082B               	movf	___ftmul@f3_as_product,w
  4230  06AB  00F0               	movwf	___ftpack@arg
  4231  06AC  082C               	movf	___ftmul@f3_as_product+1,w
  4232  06AD  00F1               	movwf	___ftpack@arg+1
  4233  06AE  082D               	movf	___ftmul@f3_as_product+2,w
  4234  06AF  00F2               	movwf	___ftpack@arg+2
  4235  06B0  082A               	movf	___ftmul@exp,w
  4236  06B1  00A6               	movwf	??___ftmul
  4237  06B2  0826               	movf	??___ftmul,w
  4238  06B3  00F3               	movwf	___ftpack@exp
  4239  06B4  082F               	movf	___ftmul@sign,w
  4240  06B5  00A7               	movwf	??___ftmul+1
  4241  06B6  0827               	movf	??___ftmul+1,w
  4242  06B7  00F4               	movwf	___ftpack@sign
  4243  06B8  120A  118A  277E   	fcall	___ftpack
  4244  06BB  0870               	movf	?___ftpack,w
  4245  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  4246  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  4247  06BE  00A0               	movwf	?___ftmul
  4248  06BF  0871               	movf	?___ftpack+1,w
  4249  06C0  00A1               	movwf	?___ftmul+1
  4250  06C1  0872               	movf	?___ftpack+2,w
  4251  06C2  00A2               	movwf	?___ftmul+2
  4252  06C3  0008               	return
  4253  06C4                     __end_of___ftmul:	
  4254                           
  4255                           	psect	text18
  4256  0E86                     __ptext18:	
  4257 ;; *************** function ___ftge *****************
  4258 ;; Defined at:
  4259 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  ff1             3    0[COMMON] float 
  4262 ;;  ff2             3    3[COMMON] float 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;		None               void
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4274 ;;      Params:         6       0       0       0       0
  4275 ;;      Locals:         0       0       0       0       0
  4276 ;;      Temps:          6       0       0       0       0
  4277 ;;      Totals:        12       0       0       0       0
  4278 ;;Total ram usage:       12 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_ftoa
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function ___ftge
  4289  0E86                     ___ftge:	
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4293  0E86  1FF2               	btfss	___ftge@ff1+2,7
  4294  0E87  2EAD               	goto	i1l1648
  4295  0E88  3000               	movlw	0
  4296  0E89  00F6               	movwf	??___ftge
  4297  0E8A  3000               	movlw	0
  4298  0E8B  00F7               	movwf	??___ftge+1
  4299  0E8C  3080               	movlw	128
  4300  0E8D  00F8               	movwf	??___ftge+2
  4301  0E8E  0970               	comf	___ftge@ff1,w
  4302  0E8F  00F9               	movwf	??___ftge+3
  4303  0E90  0971               	comf	___ftge@ff1+1,w
  4304  0E91  00FA               	movwf	??___ftge+4
  4305  0E92  0972               	comf	___ftge@ff1+2,w
  4306  0E93  00FB               	movwf	??___ftge+5
  4307  0E94  0AF9               	incf	??___ftge+3,f
  4308  0E95  1903               	skipnz
  4309  0E96  0AFA               	incf	??___ftge+4,f
  4310  0E97  1903               	skipnz
  4311  0E98  0AFB               	incf	??___ftge+5,f
  4312  0E99  0879               	movf	??___ftge+3,w
  4313  0E9A  07F6               	addwf	??___ftge,f
  4314  0E9B  087A               	movf	??___ftge+4,w
  4315  0E9C  1803               	skipnc
  4316  0E9D  0F7A               	incfsz	??___ftge+4,w
  4317  0E9E  2EA0               	goto	u216_21
  4318  0E9F  2EA1               	goto	u216_22
  4319  0EA0                     u216_21:	
  4320  0EA0  07F7               	addwf	??___ftge+1,f
  4321  0EA1                     u216_22:	
  4322  0EA1  087B               	movf	??___ftge+5,w
  4323  0EA2  1803               	skipnc
  4324  0EA3  0F7B               	incfsz	??___ftge+5,w
  4325  0EA4  2EA6               	goto	u216_23
  4326  0EA5  2EA7               	goto	u216_24
  4327  0EA6                     u216_23:	
  4328  0EA6  07F8               	addwf	??___ftge+2,f
  4329  0EA7                     u216_24:	
  4330  0EA7  0876               	movf	??___ftge,w
  4331  0EA8  00F0               	movwf	___ftge@ff1
  4332  0EA9  0877               	movf	??___ftge+1,w
  4333  0EAA  00F1               	movwf	___ftge@ff1+1
  4334  0EAB  0878               	movf	??___ftge+2,w
  4335  0EAC  00F2               	movwf	___ftge@ff1+2
  4336  0EAD                     i1l1648:	
  4337  0EAD  1FF5               	btfss	___ftge@ff2+2,7
  4338  0EAE  2ED4               	goto	i1l1652
  4339  0EAF  3000               	movlw	0
  4340  0EB0  00F6               	movwf	??___ftge
  4341  0EB1  3000               	movlw	0
  4342  0EB2  00F7               	movwf	??___ftge+1
  4343  0EB3  3080               	movlw	128
  4344  0EB4  00F8               	movwf	??___ftge+2
  4345  0EB5  0973               	comf	___ftge@ff2,w
  4346  0EB6  00F9               	movwf	??___ftge+3
  4347  0EB7  0974               	comf	___ftge@ff2+1,w
  4348  0EB8  00FA               	movwf	??___ftge+4
  4349  0EB9  0975               	comf	___ftge@ff2+2,w
  4350  0EBA  00FB               	movwf	??___ftge+5
  4351  0EBB  0AF9               	incf	??___ftge+3,f
  4352  0EBC  1903               	skipnz
  4353  0EBD  0AFA               	incf	??___ftge+4,f
  4354  0EBE  1903               	skipnz
  4355  0EBF  0AFB               	incf	??___ftge+5,f
  4356  0EC0  0879               	movf	??___ftge+3,w
  4357  0EC1  07F6               	addwf	??___ftge,f
  4358  0EC2  087A               	movf	??___ftge+4,w
  4359  0EC3  1803               	skipnc
  4360  0EC4  0F7A               	incfsz	??___ftge+4,w
  4361  0EC5  2EC7               	goto	u218_21
  4362  0EC6  2EC8               	goto	u218_22
  4363  0EC7                     u218_21:	
  4364  0EC7  07F7               	addwf	??___ftge+1,f
  4365  0EC8                     u218_22:	
  4366  0EC8  087B               	movf	??___ftge+5,w
  4367  0EC9  1803               	skipnc
  4368  0ECA  0F7B               	incfsz	??___ftge+5,w
  4369  0ECB  2ECD               	goto	u218_23
  4370  0ECC  2ECE               	goto	u218_24
  4371  0ECD                     u218_23:	
  4372  0ECD  07F8               	addwf	??___ftge+2,f
  4373  0ECE                     u218_24:	
  4374  0ECE  0876               	movf	??___ftge,w
  4375  0ECF  00F3               	movwf	___ftge@ff2
  4376  0ED0  0877               	movf	??___ftge+1,w
  4377  0ED1  00F4               	movwf	___ftge@ff2+1
  4378  0ED2  0878               	movf	??___ftge+2,w
  4379  0ED3  00F5               	movwf	___ftge@ff2+2
  4380  0ED4                     i1l1652:	
  4381  0ED4  3080               	movlw	128
  4382  0ED5  06F2               	xorwf	___ftge@ff1+2,f
  4383  0ED6  3080               	movlw	128
  4384  0ED7  06F5               	xorwf	___ftge@ff2+2,f
  4385  0ED8  0875               	movf	___ftge@ff2+2,w
  4386  0ED9  0272               	subwf	___ftge@ff1+2,w
  4387  0EDA  1D03               	skipz
  4388  0EDB  0008               	return
  4389  0EDC  0874               	movf	___ftge@ff2+1,w
  4390  0EDD  0271               	subwf	___ftge@ff1+1,w
  4391  0EDE  1D03               	skipz
  4392  0EDF  0008               	return
  4393  0EE0  0873               	movf	___ftge@ff2,w
  4394  0EE1  0270               	subwf	___ftge@ff1,w
  4395  0EE2  0008               	return
  4396  0EE3                     __end_of___ftge:	
  4397                           
  4398                           	psect	text19
  4399  0D10                     __ptext19:	
  4400 ;; *************** function ___lwtoft *****************
  4401 ;; Defined at:
  4402 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  c               2    8[COMMON] unsigned int 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  3    8[COMMON] float 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, pclath, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4416 ;;      Params:         3       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0
  4418 ;;      Temps:          1       0       0       0       0
  4419 ;;      Totals:         4       0       0       0       0
  4420 ;;Total ram usage:        4 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    1
  4423 ;; This function calls:
  4424 ;;		___ftpack
  4425 ;; This function is called by:
  4426 ;;		_ISR
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function ___lwtoft
  4432  0D10                     ___lwtoft:	
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4436  0D10  0878               	movf	___lwtoft@c,w
  4437  0D11  00F0               	movwf	___ftpack@arg
  4438  0D12  0879               	movf	___lwtoft@c+1,w
  4439  0D13  00F1               	movwf	___ftpack@arg+1
  4440  0D14  01F2               	clrf	___ftpack@arg+2
  4441  0D15  308E               	movlw	142
  4442  0D16  00FB               	movwf	??___lwtoft
  4443  0D17  087B               	movf	??___lwtoft,w
  4444  0D18  00F3               	movwf	___ftpack@exp
  4445  0D19  01F4               	clrf	___ftpack@sign
  4446  0D1A  120A  118A  277E   	fcall	___ftpack
  4447  0D1D  0870               	movf	?___ftpack,w
  4448  0D1E  00F8               	movwf	?___lwtoft
  4449  0D1F  0871               	movf	?___ftpack+1,w
  4450  0D20  00F9               	movwf	?___lwtoft+1
  4451  0D21  0872               	movf	?___ftpack+2,w
  4452  0D22  00FA               	movwf	?___lwtoft+2
  4453  0D23  0008               	return
  4454  0D24                     __end_of___lwtoft:	
  4455                           
  4456                           	psect	text20
  4457  077E                     __ptext20:	
  4458 ;; *************** function ___ftpack *****************
  4459 ;; Defined at:
  4460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  arg             3    0[COMMON] unsigned um
  4463 ;;  exp             1    3[COMMON] unsigned char 
  4464 ;;  sign            1    4[COMMON] unsigned char 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  3    0[COMMON] float 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4476 ;;      Params:         5       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0
  4478 ;;      Temps:          3       0       0       0       0
  4479 ;;      Totals:         8       0       0       0       0
  4480 ;;Total ram usage:        8 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		___ftadd
  4486 ;;		___ftmul
  4487 ;;		___lltoft
  4488 ;;		___lwtoft
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function ___ftpack
  4494  077E                     ___ftpack:	
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4498  077E  0873               	movf	___ftpack@exp,w
  4499  077F  1903               	btfsc	3,2
  4500  0780  2F86               	goto	i1l1322
  4501  0781  0872               	movf	___ftpack@arg+2,w
  4502  0782  0471               	iorwf	___ftpack@arg+1,w
  4503  0783  0470               	iorwf	___ftpack@arg,w
  4504  0784  1D03               	skipz
  4505  0785  2F99               	goto	i1l1328
  4506  0786                     i1l1322:	
  4507  0786  3000               	movlw	0
  4508  0787  00F0               	movwf	?___ftpack
  4509  0788  3000               	movlw	0
  4510  0789  00F1               	movwf	?___ftpack+1
  4511  078A  3000               	movlw	0
  4512  078B  00F2               	movwf	?___ftpack+2
  4513  078C  0008               	return
  4514  078D                     i1l1326:	
  4515  078D  3001               	movlw	1
  4516  078E  00F5               	movwf	??___ftpack
  4517  078F  0875               	movf	??___ftpack,w
  4518  0790  07F3               	addwf	___ftpack@exp,f
  4519  0791  3001               	movlw	1
  4520  0792                     u131_25:	
  4521  0792  1003               	clrc
  4522  0793  0CF2               	rrf	___ftpack@arg+2,f
  4523  0794  0CF1               	rrf	___ftpack@arg+1,f
  4524  0795  0CF0               	rrf	___ftpack@arg,f
  4525  0796  3EFF               	addlw	-1
  4526  0797  1D03               	skipz
  4527  0798  2F92               	goto	u131_25
  4528  0799                     i1l1328:	
  4529  0799  30FE               	movlw	254
  4530  079A  0572               	andwf	___ftpack@arg+2,w
  4531  079B  1903               	btfsc	3,2
  4532  079C  2FB4               	goto	i1l419
  4533  079D  2F8D               	goto	i1l1326
  4534  079E                     i1l1330:	
  4535  079E  3001               	movlw	1
  4536  079F  00F5               	movwf	??___ftpack
  4537  07A0  0875               	movf	??___ftpack,w
  4538  07A1  07F3               	addwf	___ftpack@exp,f
  4539  07A2  3001               	movlw	1
  4540  07A3  07F0               	addwf	___ftpack@arg,f
  4541  07A4  3000               	movlw	0
  4542  07A5  1803               	skipnc
  4543  07A6  3001               	movlw	1
  4544  07A7  07F1               	addwf	___ftpack@arg+1,f
  4545  07A8  3000               	movlw	0
  4546  07A9  1803               	skipnc
  4547  07AA  3001               	movlw	1
  4548  07AB  07F2               	addwf	___ftpack@arg+2,f
  4549  07AC  3001               	movlw	1
  4550  07AD                     u133_25:	
  4551  07AD  1003               	clrc
  4552  07AE  0CF2               	rrf	___ftpack@arg+2,f
  4553  07AF  0CF1               	rrf	___ftpack@arg+1,f
  4554  07B0  0CF0               	rrf	___ftpack@arg,f
  4555  07B1  3EFF               	addlw	-1
  4556  07B2  1D03               	skipz
  4557  07B3  2FAD               	goto	u133_25
  4558  07B4                     i1l419:	
  4559  07B4  30FF               	movlw	255
  4560  07B5  0572               	andwf	___ftpack@arg+2,w
  4561  07B6  1903               	btfsc	3,2
  4562  07B7  2FC3               	goto	i1l1338
  4563  07B8  2F9E               	goto	i1l1330
  4564  07B9                     i1l1336:	
  4565  07B9  3001               	movlw	1
  4566  07BA  02F3               	subwf	___ftpack@exp,f
  4567  07BB  3001               	movlw	1
  4568  07BC                     u135_25:	
  4569  07BC  1003               	clrc
  4570  07BD  0DF0               	rlf	___ftpack@arg,f
  4571  07BE  0DF1               	rlf	___ftpack@arg+1,f
  4572  07BF  0DF2               	rlf	___ftpack@arg+2,f
  4573  07C0  3EFF               	addlw	-1
  4574  07C1  1D03               	skipz
  4575  07C2  2FBC               	goto	u135_25
  4576  07C3                     i1l1338:	
  4577  07C3  1FF1               	btfss	___ftpack@arg+1,7
  4578  07C4  2FB9               	goto	i1l1336
  4579  07C5  1873               	btfsc	___ftpack@exp,0
  4580  07C6  2FCD               	goto	i1l425
  4581  07C7  30FF               	movlw	255
  4582  07C8  05F0               	andwf	___ftpack@arg,f
  4583  07C9  307F               	movlw	127
  4584  07CA  05F1               	andwf	___ftpack@arg+1,f
  4585  07CB  30FF               	movlw	255
  4586  07CC  05F2               	andwf	___ftpack@arg+2,f
  4587  07CD                     i1l425:	
  4588  07CD  1003               	clrc
  4589  07CE  0CF3               	rrf	___ftpack@exp,f
  4590  07CF  0873               	movf	___ftpack@exp,w
  4591  07D0  00F5               	movwf	??___ftpack
  4592  07D1  01F6               	clrf	??___ftpack+1
  4593  07D2  01F7               	clrf	??___ftpack+2
  4594  07D3  3010               	movlw	16
  4595  07D4                     u138_25:	
  4596  07D4  1003               	clrc
  4597  07D5  0DF5               	rlf	??___ftpack,f
  4598  07D6  0DF6               	rlf	??___ftpack+1,f
  4599  07D7  0DF7               	rlf	??___ftpack+2,f
  4600  07D8  3EFF               	addlw	-1
  4601  07D9  1D03               	skipz
  4602  07DA  2FD4               	goto	u138_25
  4603  07DB  0875               	movf	??___ftpack,w
  4604  07DC  04F0               	iorwf	___ftpack@arg,f
  4605  07DD  0876               	movf	??___ftpack+1,w
  4606  07DE  04F1               	iorwf	___ftpack@arg+1,f
  4607  07DF  0877               	movf	??___ftpack+2,w
  4608  07E0  04F2               	iorwf	___ftpack@arg+2,f
  4609  07E1  0874               	movf	___ftpack@sign,w
  4610  07E2  1903               	btfsc	3,2
  4611  07E3  0008               	return
  4612  07E4  17F2               	bsf	___ftpack@arg+2,7
  4613  07E5  0008               	return
  4614  07E6                     __end_of___ftpack:	
  4615                           
  4616                           	psect	text21
  4617  0D24                     __ptext21:	
  4618 ;; *************** function _USART_ReceiveChar *****************
  4619 ;; Defined at:
  4620 ;;		line 80 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no PI
      +C16F877A\Supervisorio.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  USART_Data      1    4[COMMON] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      unsigned char 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4634 ;;      Params:         0       0       0       0       0
  4635 ;;      Locals:         1       0       0       0       0
  4636 ;;      Temps:          1       0       0       0       0
  4637 ;;      Totals:         2       0       0       0       0
  4638 ;;Total ram usage:        2 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    2
  4641 ;; This function calls:
  4642 ;;		_USART_WriteString
  4643 ;; This function is called by:
  4644 ;;		_ISR
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _USART_ReceiveChar
  4650  0D24                     _USART_ReceiveChar:	
  4651                           
  4652                           ;Supervisorio.c: 82: unsigned char USART_Data;
  4653                           ;Supervisorio.c: 84: if (!OERR)
  4654                           
  4655                           ;incstack = 0
  4656                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4657  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  4658  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  4659  0D26  1898               	btfsc	24,1	;volatile
  4660  0D27  2D2D               	goto	i1l1828
  4661                           
  4662                           ;Supervisorio.c: 85: {
  4663                           ;Supervisorio.c: 86: USART_Data = RCREG;
  4664  0D28  081A               	movf	26,w	;volatile
  4665  0D29  00F3               	movwf	??_USART_ReceiveChar
  4666  0D2A  0873               	movf	??_USART_ReceiveChar,w
  4667  0D2B  00F4               	movwf	USART_ReceiveChar@USART_Data
  4668  0D2C  2D3C               	goto	i1l1836
  4669  0D2D                     i1l1828:	
  4670                           ;Supervisorio.c: 88: }
  4671                           
  4672                           ;Supervisorio.c: 87: PIR1bits.RCIF = 0;
  4673                           
  4674                           
  4675                           ;Supervisorio.c: 89: else
  4676                           ;Supervisorio.c: 90: {
  4677                           ;Supervisorio.c: 91: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  4678  0D2D  3029               	movlw	low (STR_1-__stringbase)
  4679  0D2E  00F1               	movwf	USART_WriteString@str
  4680  0D2F  3080               	movlw	128
  4681  0D30  00F2               	movwf	USART_WriteString@str+1
  4682  0D31  120A  158A  255B   	fcall	_USART_WriteString
  4683                           
  4684                           ;Supervisorio.c: 93: RCSTAbits.CREN = 0;
  4685  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  4687  0D36  1218               	bcf	24,4	;volatile
  4688                           
  4689                           ;Supervisorio.c: 94: USART_Data = RCREG;
  4690  0D37  081A               	movf	26,w	;volatile
  4691  0D38  00F3               	movwf	??_USART_ReceiveChar
  4692  0D39  0873               	movf	??_USART_ReceiveChar,w
  4693  0D3A  00F4               	movwf	USART_ReceiveChar@USART_Data
  4694                           
  4695                           ;Supervisorio.c: 95: RCSTAbits.CREN = 1;
  4696  0D3B  1618               	bsf	24,4	;volatile
  4697  0D3C                     i1l1836:	
  4698                           
  4699                           ;Supervisorio.c: 96: PIR1bits.RCIF = 0;
  4700  0D3C  128C               	bcf	12,5	;volatile
  4701                           
  4702                           ;Supervisorio.c: 97: }
  4703                           ;Supervisorio.c: 99: return(USART_Data);
  4704  0D3D  0874               	movf	USART_ReceiveChar@USART_Data,w
  4705  0D3E  0008               	return
  4706  0D3F                     __end_of_USART_ReceiveChar:	
  4707                           
  4708                           	psect	text22
  4709  0D5B                     __ptext22:	
  4710 ;; *************** function _USART_WriteString *****************
  4711 ;; Defined at:
  4712 ;;		line 68 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no PI
      +C16F877A\Supervisorio.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  str             2    1[COMMON] PTR const unsigned char 
  4715 ;;		 -> NULL(0), ftoa@buf(17), STR_5(35), STR_4(32), 
  4716 ;;		 -> STR_3(35), STR_2(32), buffer(9), STR_1(40), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         2       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0
  4731 ;;      Totals:         2       0       0       0       0
  4732 ;;Total ram usage:        2 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    1
  4735 ;; This function calls:
  4736 ;;		_USART_WriteChar
  4737 ;; This function is called by:
  4738 ;;		_USART_ReceiveChar
  4739 ;;		_ISR
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           
  4744                           ;psect for function _USART_WriteString
  4745  0D5B                     _USART_WriteString:	
  4746  0D5B                     i1l1498:	
  4747                           ;Supervisorio.c: 71: while(*str != '\0')
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4751                           
  4752  0D5B  0872               	movf	USART_WriteString@str+1,w
  4753  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0D5E  00FF               	movwf	127
  4756  0D5F  0871               	movf	USART_WriteString@str,w
  4757  0D60  0084               	movwf	4
  4758  0D61  120A  118A  2500  120A  158A  	fcall	stringtab
  4759  0D66  3800               	iorlw	0
  4760  0D67  1903               	btfsc	3,2
  4761  0D68  0008               	return
  4762                           
  4763                           ;Supervisorio.c: 72: {
  4764                           ;Supervisorio.c: 74: USART_WriteChar(*str);
  4765  0D69  0872               	movf	USART_WriteString@str+1,w
  4766  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  4767  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  4768  0D6C  00FF               	movwf	127
  4769  0D6D  0871               	movf	USART_WriteString@str,w
  4770  0D6E  0084               	movwf	4
  4771  0D6F  120A  118A  2500  120A  158A  	fcall	stringtab
  4772  0D74  120A  158A  24C8  120A  158A  	fcall	_USART_WriteChar
  4773                           
  4774                           ;Supervisorio.c: 75: str++;
  4775  0D79  3001               	movlw	1
  4776  0D7A  07F1               	addwf	USART_WriteString@str,f
  4777  0D7B  1803               	skipnc
  4778  0D7C  0AF2               	incf	USART_WriteString@str+1,f
  4779  0D7D  2D5B               	goto	i1l1498
  4780  0D7E                     __end_of_USART_WriteString:	
  4781                           
  4782                           	psect	text23
  4783  0CC8                     __ptext23:	
  4784 ;; *************** function _USART_WriteChar *****************
  4785 ;; Defined at:
  4786 ;;		line 61 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no PI
      +C16F877A\Supervisorio.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  USARTData       1    wreg     unsigned char 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  USARTData       1    0[COMMON] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;		None               void
  4793 ;; Registers used:
  4794 ;;		wreg
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4800 ;;      Params:         0       0       0       0       0
  4801 ;;      Locals:         1       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0
  4803 ;;      Totals:         1       0       0       0       0
  4804 ;;Total ram usage:        1 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_USART_WriteString
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           
  4814                           ;psect for function _USART_WriteChar
  4815  0CC8                     _USART_WriteChar:	
  4816                           
  4817                           ;incstack = 0
  4818                           ; Regs used in _USART_WriteChar: [wreg]
  4819                           ;USART_WriteChar@USARTData stored from wreg
  4820  0CC8  00F0               	movwf	USART_WriteChar@USARTData
  4821  0CC9                     i1l78:	
  4822                           ;Supervisorio.c: 63: while(!PIR1bits.TXIF);
  4823                           
  4824  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  4825  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  4826  0CCB  1E0C               	btfss	12,4	;volatile
  4827  0CCC  2CC9               	goto	i1l78
  4828                           
  4829                           ;Supervisorio.c: 64: TXREG = USARTData;
  4830  0CCD  0870               	movf	USART_WriteChar@USARTData,w
  4831  0CCE  0099               	movwf	25	;volatile
  4832  0CCF  0008               	return
  4833  0CD0                     __end_of_USART_WriteChar:	
  4834                           
  4835                           	psect	text24
  4836  07E6                     __ptext24:	
  4837 ;; *************** function _ADC_Read *****************
  4838 ;; Defined at:
  4839 ;;		line 121 in file "C:\Users\Dracarys\Documents\GitHub\SistemaEmbarcado_projeto_final\SistemasEmbarcados\Firmware no P
      +IC16F877A\Supervisorio.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  channel         2    0[COMMON] unsigned short 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;		None
  4844 ;; Return value:  Size  Location     Type
  4845 ;;		None               void
  4846 ;; Registers used:
  4847 ;;		wreg, status,2, status,0
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4853 ;;      Params:         2       0       0       0       0
  4854 ;;      Locals:         0       0       0       0       0
  4855 ;;      Temps:          1       0       0       0       0
  4856 ;;      Totals:         3       0       0       0       0
  4857 ;;Total ram usage:        3 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; This function calls:
  4860 ;;		Nothing
  4861 ;; This function is called by:
  4862 ;;		_ISR
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _ADC_Read
  4868  07E6                     _ADC_Read:	
  4869                           
  4870                           ;Supervisorio.c: 123: ADCON0bits.CHS = channel;
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4874  07E6  0870               	movf	ADC_Read@channel,w
  4875  07E7  00F2               	movwf	??_ADC_Read
  4876  07E8  0DF2               	rlf	??_ADC_Read,f
  4877  07E9  0DF2               	rlf	??_ADC_Read,f
  4878  07EA  0DF2               	rlf	??_ADC_Read,f
  4879  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  4880  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  4881  07ED  081F               	movf	31,w	;volatile
  4882  07EE  0672               	xorwf	??_ADC_Read,w
  4883  07EF  39C7               	andlw	-57
  4884  07F0  0672               	xorwf	??_ADC_Read,w
  4885  07F1  009F               	movwf	31	;volatile
  4886                           
  4887                           ;Supervisorio.c: 124: ADCON0bits.ADON = 1;
  4888  07F2  141F               	bsf	31,0	;volatile
  4889                           
  4890                           ;Supervisorio.c: 126: _delay((unsigned long)((25)*(18432000/4000000.0)));
  4891  07F3  3026               	movlw	38
  4892  07F4  00F2               	movwf	??_ADC_Read
  4893  07F5                     u259_27:	
  4894  07F5  0BF2               	decfsz	??_ADC_Read,f
  4895  07F6  2FF5               	goto	u259_27
  4896                           
  4897                           ;Supervisorio.c: 128: ADCON0bits.GO = 1;
  4898  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  4899  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  4900  07F9  151F               	bsf	31,2	;volatile
  4901  07FA                     i1l98:	
  4902                           ;Supervisorio.c: 129: while(ADCON0bits.GO_DONE);
  4903                           
  4904  07FA  191F               	btfsc	31,2	;volatile
  4905  07FB  2FFA               	goto	i1l98
  4906                           
  4907                           ;Supervisorio.c: 131: PIR1bits.ADIF = 0;
  4908  07FC  130C               	bcf	12,6	;volatile
  4909  07FD  0008               	return
  4910  07FE                     __end_of_ADC_Read:	
  4911  007E                     btemp	set	126	;btemp
  4912  007E                     wtemp	set	126
  4913  007E                     wtemp0	set	126
  4914  0080                     wtemp1	set	128
  4915  0082                     wtemp2	set	130
  4916  0084                     wtemp3	set	132
  4917  0086                     wtemp4	set	134
  4918  0088                     wtemp5	set	136
  4919  007F                     wtemp6	set	127
  4920  007E                     ttemp	set	126
  4921  007E                     ttemp0	set	126
  4922  0081                     ttemp1	set	129
  4923  0084                     ttemp2	set	132
  4924  0087                     ttemp3	set	135
  4925  007F                     ttemp4	set	127
  4926  007E                     ltemp	set	126
  4927  007E                     ltemp0	set	126
  4928  0082                     ltemp1	set	130
  4929  0086                     ltemp2	set	134
  4930  0080                     ltemp3	set	128


Data Sizes:
    Strings     185
    Constant    40
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      80
    BANK1            80     28      45
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> status(BANK0[2]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S443$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    Display	PTR unsigned char  size(1) Largest target is 17
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), ftoa@buf(BANK1[17]), STR_5(CODE[35]), STR_4(CODE[32]), 
		 -> STR_3(CODE[35]), STR_2(CODE[32]), buffer(BANK0[9]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    _USART_ReceiveChar->_USART_WriteString
    _USART_WriteString->_USART_WriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd

Critical Paths under _main in BANK1

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     538
                                             25 BANK1      3     3      0
                           _ADC_Init
                        _TIMER1_Init
                         _USART_Init
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          10     6      4     538
                                             15 BANK1     10     6      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _TIMER1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  9     9      0   17193
                                             50 BANK0      9     9      0
                           _ADC_Read
                  _USART_ReceiveChar
                  _USART_WriteString
                            ___ftmul
                           ___lwtoft
                               _ftoa
 ---------------------------------------------------------------------------------
 (4) _ftoa                                                14    10      4   11105
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             26    17      9    1998
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     348
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    2181
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     380
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3189
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3016
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    2630
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6     264
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2134
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2048
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     539
                                              3 COMMON     2     2      0
                  _USART_WriteString
 ---------------------------------------------------------------------------------
 (4) _USART_WriteString                                    2     0      2     515
                                              1 COMMON     2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) _USART_WriteChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             3     1      2     150
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _TIMER1_Init
   _USART_Init
     ___aldiv

 _ISR (ROOT)
   _ADC_Read
   _USART_ReceiveChar
     _USART_WriteString
       _USART_WriteChar
   _USART_WriteString
     _USART_WriteChar
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _ftoa
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      8B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1C      2D       7       56.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      8B      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed May 13 12:12:06 2020

                          pc 0002                  __CFG_CP$OFF 0000                           fsr 0004  
        ___wmul@multiplicand 0072                 ___ftadd@exp1 0026                 ___ftadd@exp2 0025  
               ___ftadd@sign 0024                          l123 0E85                          l313 0F83  
                        _RB4 0034                          _RB5 0035                 __CFG_CPD$OFF 0000  
                        _ISR 0264                          _sec 0062                          fsr0 0004  
 __size_of_USART_WriteString 0023                          indf 0000                 __CFG_FOSC$HS 0000  
               __CFG_LVP$OFF 0000                         ?_ISR 0070                         l1622 0FA4  
                       l1614 0F94                         l1640 0FF7                         l1632 0FDC  
                       l1624 0FB4                         l1636 0FE9                         STR_1 0538  
                       STR_2 05A6                         STR_3 0560                         STR_4 05C6  
                       STR_5 0583                         STR_6 05E6                         u2105 0FB6  
                       u2115 0FCB                         u2125 0FDD                         u2085 0FA8  
                       u2475 0DAD                         u2577 0E79                         i1l78 0CC9  
                       i1l98 07FA                         _OERR 00C1                         _TMR1 000E  
                       _main 0E37                         _ftoa 06C4                 ___ftpack@arg 0070  
               ___ftpack@exp 0073                         btemp 007E             __end_of_ADC_Init 0D10  
           __end_of_ADC_Read 07FE                         ltemp 007E                         start 0012  
                       ttemp 007E                         wtemp 007E                 ___ftmul@cntr 002E  
               ___ftmul@sign 002F      __end_of_USART_WriteChar 0CD0                        ??_ISR 0052  
               ___fttol@exp1 003D                 ___fttol@lval 0039              __end_of___aldiv 1000  
                      ?_main 0070                        ?_ftoa 0044              __end_of___ftadd 0473  
              __CFG_WDTE$OFF 0000              __end_of___ftneg 0CD8              __end_of___lldiv 04D1  
            __end_of___ftmul 06C4              __end_of___llmod 0E37              __end_of___ftsub 0D5B  
            __end_of___fttol 0F71                        i1l120 0361                        i1l114 0316  
                      i1l116 0336                        i1l117 0339                        i1l118 033C  
                      i1l119 033F                        i1l152 00F5                        i1l155 0113  
                      i1l425 07CD                        i1l258 0D88                        i1l419 07B4  
                      i1l448 0414                        _RCREG 001A                        _SPBRG 0099  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _PORTE 0009                        _TRISA 0085  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _TRISE 0089                        _TXREG 0019                __CFG_PWRTE$ON 0000  
               ___lltoft@exp 007D                 USART_Init@BR 00B8                        _cont1 0060  
            __end_of_dpowers 0538              __end_of_isdigit 0CEE                        _input 005B  
              ___ftpack@sign 0074                        ftoa@f 0044                        ftoa@l 004D  
             __CFG_BOREN$OFF 0000                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F                        status 0003  
                      wtemp0 007E                        wtemp1 0080                        wtemp2 0082  
                      wtemp3 0084                        wtemp4 0086                        wtemp5 0088  
                      wtemp6 007F              __end_of_sprintf 0264                  ?_USART_Init 00AF  
            __initialization 0015                 __end_of_main 0E86                 __end_of_ftoa 077E  
                     ??_main 00B9                       ??_ftoa 0048                ___fttol@sign1 0038  
               ?_TIMER1_Init 0070     USART_WriteChar@USARTData 0070             ___llmod@dividend 0024  
                     _ADRESH 001E                       _ADRESL 009E             __end_of___ftpack 07E6  
           __end_of___lltoft 04FC                       i1l1330 079E                       i1l1322 0786  
                     i1l1412 03DA                       i1l1326 078D                       i1l1430 0426  
                     i1l1414 03E6                       i1l1406 03C5                       i1l1336 07B9  
                     i1l1328 0799                       i1l1424 0404                       i1l1416 03EB  
                     i1l1360 0CEC                       i1l1600 025F                       i1l1338 07C3  
                     i1l1434 0438                       i1l1426 0410                       i1l1418 03EF  
                     i1l1514 0064                       i1l1522 00A2                       i1l1700 0686  
                     i1l1444 045B                       i1l1540 00FC                       i1l1532 00B4  
                     i1l1508 004F                       i1l1454 0483                       i1l1366 0D80  
                     i1l1534 00F0                       i1l1704 0696                       i1l1384 0395  
                     i1l1464 04BB                       i1l1456 0493                       i1l1480 0E03  
                     i1l1560 014D                       i1l1536 00F7                       i1l1394 03AB  
                     i1l1546 0125                       i1l1652 0ED4                       i1l1388 039C  
                     i1l1468 04C8                       i1l1484 0E21                       i1l1580 01DC  
                     i1l1572 01A1                       i1l1556 0147                       i1l1670 0609  
                     i1l1734 0EFD                       i1l1478 0DF3                       i1l1590 01F6  
                     i1l1582 01E0                       i1l1648 0EAD                       i1l1760 0F4C  
                     i1l1752 0F2F                       i1l1488 0E2E                       i1l1576 01BB  
                     i1l1568 0189                       i1l1912 02E9                       i1l1498 0D5B  
                     i1l1762 0F57                       i1l1754 0F3F                       i1l1836 0D3C  
                     i1l1828 0D2D                       i1l1692 066E                       i1l1676 061F  
                     i1l1764 0F5A                       i1l1596 0250                       i1l1924 030F  
                     i1l1908 02DC                       u202_25 0201                       i1l1598 002F  
                     i1l1950 0350                       i1l1688 065E                       i1l1768 0F68  
                     i1l1776 04D5                       i1l1864 06FD                       i1l1778 04E7  
                     i1l1890 0277                       i1l1892 0278                       u131_25 0792  
                     u203_25 025C                       u133_25 07AD                       u222_25 062B  
                     u135_25 07BC                       u231_25 0697                       u223_25 063D  
                     u216_21 0EA0                       u216_22 0EA1                       u216_23 0EA6  
                     u216_24 0EA7                       u232_25 069F                       u144_25 0D89  
                     u145_25 0D90                       u218_21 0EC7                       u218_22 0EC8  
                     u218_23 0ECD                       u218_24 0ECE                       u138_25 07D4  
                     u226_25 066F                       u162_25 03F0                       u242_25 0F4E  
                     u227_25 0677                       u156_25 03C6                       u236_25 0F04  
                     u172_25 0487                       u165_25 0405                       u245_25 04DA  
                     u181_25 0E11                       u174_25 0495                       u182_25 0E22  
                     u159_25 03DB                       u239_25 0F30                       u175_25 04AA  
                     u176_25 04BC             __end_of___lwtoft 0D24                       u194_25 0150  
                     u258_27 02D6                       u179_25 0DF7                       u195_25 017F  
                     u259_27 07F5                       u197_25 0198                       u198_25 01B2  
                     u199_25 01CC                       ___ftge 0E86                    ??___aldiv 00A8  
                     ___wmul 0D7E                    ??___ftadd 0020             ?_USART_WriteChar 0070  
                  ??___ftneg 0073                    ??___lldiv 0078                    ??___ftmul 0026  
                  ??___llmod 0028                    ??___ftsub 007E                    ??___fttol 0034  
                     _buffer 0065              ADC_Read@channel 0070                       _status 006E  
                     ftoa@cp 0051        ___ftmul@f3_as_product 002B                    ??_isdigit 0070  
                  ?_ADC_Init 0070                    ?_ADC_Read 0070                       saved_w 007E  
        __size_of_USART_Init 0048                    ??_sprintf 0033      __end_of__initialization 0024  
                 ___ftadd@f1 0078                   ___ftadd@f2 007B                   ___ftge@ff1 0070  
                 ___ftge@ff2 0073                   ___ftneg@f1 0070                   ___ftmul@f1 0020  
                 ___ftmul@f2 0023                   ___ftsub@f1 002A                   ___ftsub@f2 0027  
                 ___fttol@f1 0030               __pcstackCOMMON 0070                   ___lltoft@c 0078  
                 ___lwtoft@c 0078                   ??_ADC_Init 00A0                   ??_ADC_Read 0072  
               sprintf@width 003F                   __pbssBANK0 005B                   __pbssBANK1 00BC  
                    ISR@resp 0058                   __pmaintext 0E37                      ?___ftge 0070  
                    ?___wmul 0070                   __pintentry 0004                    ?___ftpack 0070  
                  ?___lltoft 0078                    ?___lwtoft 0078         __size_of_TIMER1_Init 0010  
                 __stringtab 0500                      _Display 0064                    _ADCResult 005E  
               ??_USART_Init 00B3                      ___aldiv 0F71              __size_of___ftge 005D  
                    ___ftadd 036C                      ___ftneg 0CD0                      ___lldiv 0473  
            __size_of___wmul 0023                      ___ftmul 05F1                      ___llmod 0DE9  
                    ___ftsub 0D3F                      ___fttol 0EE3                   ??___ftpack 0075  
                 ??___lltoft 007C                      __ptext1 0DA1                      __ptext2 0F71  
                    __ptext3 0CEE                      __ptext4 0CFE                      __ptext5 0264  
                    __ptext6 06C4                      __ptext7 0028                      __ptext8 0CE0  
                    __ptext9 0D7E                   ??___lwtoft 007B                 __size_of_ISR 0108  
                  _T1CONbits 0010                      _dpowers 0510                      _isdigit 0CE0  
           ___aldiv@dividend 00A4  USART_ReceiveChar@USART_Data 0074           __end_of_USART_Init 0DE9  
                    _sprintf 0028                      clrloop0 0CD9         end_of_initialization 0024  
                    ftoa@buf 00BC                      ftoa@rem 0049              ___lldiv@divisor 0070  
            ___lldiv@counter 007D                    _RCSTAbits 0018             ___aldiv@quotient 00AB  
          __size_of_ADC_Init 0012            __size_of_ADC_Read 0018                    _TXSTAbits 0098  
                ___ftmul@exp 002A               __end_of___ftge 0EE3               __end_of___wmul 0DA1  
   __size_of_USART_WriteChar 0008          start_initialization 0015                  __end_of_ISR 036C  
                 ftoa@status 0047              ___llmod@divisor 0020              ___llmod@counter 0029  
          _USART_ReceiveChar 0D24                     ??___ftge 0076           ?_USART_ReceiveChar 0070  
                   ??___wmul 0074          ??_USART_ReceiveChar 0073            __size_of___ftpack 0068  
          __size_of___lltoft 002B                    ___latbits 0002            __size_of___lwtoft 0014  
              __pcstackBANK0 0020                __pcstackBANK1 00A0          __end_of__stringdata 05F1  
                sprintf@_val 003A                  sprintf@flag 0038                  sprintf@prec 0041  
  __end_of_USART_ReceiveChar 0D3F                     ISR@byte1 005A                     ISR@byte2 0059  
                   ?___aldiv 00A0                     ?___ftadd 0078                     ?___ftneg 0070  
                   ?___lldiv 0070                     ?___ftmul 0020                     ?___llmod 0020  
                   ?___ftsub 0027                     ?___fttol 0030                    __pstrings 0500  
              ??_TIMER1_Init 00A0           USART_Init@BaudRate 00AF                     ?_isdigit 0070  
                   _ADC_Init 0CFE                     _ADC_Read 07E6                     ?_sprintf 002A  
          ??_USART_WriteChar 0070              ___aldiv@divisor 00A0            interrupt_function 0004  
            ___aldiv@counter 00A9               ___wmul@product 0074                    clear_ram0 0CD8  
                   _PIE1bits 008C                     _PIR1bits 000C                   _ADCON0bits 001F  
                __stringbase 050F                   _ADCON1bits 009F                  __stringdata 0538  
          ___wmul@multiplier 0070          __end_of_TIMER1_Init 0CFE   __size_of_USART_ReceiveChar 001B  
           __size_of___aldiv 008F             __size_of___ftadd 0107             __size_of___ftneg 0008  
           __size_of___lldiv 005E             __size_of___ftmul 00D3             __size_of___llmod 004E  
           __size_of___ftsub 001C             __size_of___fttol 008E                     ___ftpack 077E  
         __end_of__stringtab 0510                     ___lltoft 04D1                  _isdigit$651 0070  
                   ___lwtoft 0D10             __size_of_isdigit 000E            _USART_WriteString 0D5B  
                   __ptext10 0DE9                     __ptext11 0473                     __ptext20 077E  
                   __ptext12 04D1                     __ptext21 0D24                     __ptext13 0EE3  
                   __ptext22 0D5B                     __ptext14 0D3F                     __ptext23 0CC8  
                   __ptext15 036C                     __ptext24 07E6                     __ptext16 0CD0  
                   __ptext17 05F1                     __ptext18 0E86                     __ptext19 0D10  
         ?_USART_WriteString 0071             __size_of_sprintf 023C                __size_of_main 004F  
              __size_of_ftoa 00BA          ??_USART_WriteString 0073                  _TIMER1_Init 0CEE  
                 _INTCONbits 000B    __end_of_USART_WriteString 0D7E                     isdigit@c 0071  
                   intlevel1 0000                    sprintf@ap 0039                    sprintf@sp 003E  
           ___lldiv@dividend 0074                    stringcode 050A         USART_WriteString@str 0071  
            _USART_WriteChar 0CC8                     sprintf@c 0043                     sprintf@f 002A  
           ___lldiv@quotient 0079                     stringdir 050A                     stringtab 0500  
               ___aldiv@sign 00AA                   _USART_Init 0DA1  
